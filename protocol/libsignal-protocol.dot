digraph {

    graph [
        label="libsignal_protocol",
        labelloc=t,

        pad=0.4,

        // Consider rendering the graph using a different layout algorithm, such as:
        // [dot, neato, twopi, circo, fdp, sfdp]
        layout=neato,
        overlap=false,
        splines="line",
        rankdir=LR,

        fontname="Helvetica", 
        fontsize="36",
    ];

    node [
        fontname="monospace",
        fontsize="10",
        shape="record",
        style="filled",
    ];

    edge [
        fontname="monospace",
        fontsize="10",
    ];

    "aead::AeadInPlace" [label="external trait|aead::AeadInPlace", fillcolor="#81c169"]; // "trait" node
    "aead::Error" [label="external struct|aead::Error", fillcolor="#81c169"]; // "struct" node
    "aes::autodetect::Aes256" [label="external struct|aes::autodetect::Aes256", fillcolor="#81c169"]; // "struct" node
    "aes_gcm_siv::Aes256GcmSiv" [label="external type|aes_gcm_siv::Aes256GcmSiv", fillcolor="#81c169"]; // "type" node
    "aes_gcm_siv::AesGcmSiv" [label="external struct|aes_gcm_siv::AesGcmSiv", fillcolor="#81c169"]; // "struct" node
    "alloc::alloc::Global" [label="external struct|alloc::alloc::Global", fillcolor="#81c169"]; // "struct" node
    "alloc::borrow::Cow" [label="external enum|alloc::borrow::Cow", fillcolor="#81c169"]; // "enum" node
    "alloc::boxed::Box" [label="external struct|alloc::boxed::Box", fillcolor="#81c169"]; // "struct" node
    "alloc::collections::vec_deque::VecDeque" [label="external struct|alloc::collections::vec_deque::VecDeque", fillcolor="#81c169"]; // "struct" node
    "alloc::collections::vec_deque::iter::Iter" [label="external struct|alloc::collections::vec_deque::iter::Iter", fillcolor="#81c169"]; // "struct" node
    "alloc::fmt" [label="external mod|alloc::fmt", fillcolor="#81c169"]; // "mod" node
    "alloc::string::String" [label="external struct|alloc::string::String", fillcolor="#81c169"]; // "struct" node
    "alloc::vec::Vec" [label="external struct|alloc::vec::Vec", fillcolor="#81c169"]; // "struct" node
    "alloc::vec::into_iter::IntoIter" [label="external struct|alloc::vec::into_iter::IntoIter", fillcolor="#81c169"]; // "struct" node
    "bool" [label="external builtin|bool", fillcolor="#81c169"]; // "builtin" node
    "char" [label="external builtin|char", fillcolor="#81c169"]; // "builtin" node
    "cipher::stream::StreamCipher" [label="external trait|cipher::stream::StreamCipher", fillcolor="#81c169"]; // "trait" node
    "cipher::stream_wrapper::StreamCipherCoreWrapper" [label="external struct|cipher::stream_wrapper::StreamCipherCoreWrapper", fillcolor="#81c169"]; // "struct" node
    "core::array::TryFromSliceError" [label="external struct|core::array::TryFromSliceError", fillcolor="#81c169"]; // "struct" node
    "core::clone::Clone" [label="external trait|core::clone::Clone", fillcolor="#81c169"]; // "trait" node
    "core::cmp::Ordering" [label="external enum|core::cmp::Ordering", fillcolor="#81c169"]; // "enum" node
    "core::convert::AsRef" [label="external trait|core::convert::AsRef", fillcolor="#81c169"]; // "trait" node
    "core::convert::Infallible" [label="external enum|core::convert::Infallible", fillcolor="#81c169"]; // "enum" node
    "core::error::Error" [label="external trait|core::error::Error", fillcolor="#81c169"]; // "trait" node
    "core::fmt::Arguments" [label="external struct|core::fmt::Arguments", fillcolor="#81c169"]; // "struct" node
    "core::fmt::Error" [label="external struct|core::fmt::Error", fillcolor="#81c169"]; // "struct" node
    "core::fmt::Formatter" [label="external struct|core::fmt::Formatter", fillcolor="#81c169"]; // "struct" node
    "core::fmt::Write" [label="external trait|core::fmt::Write", fillcolor="#81c169"]; // "trait" node
    "core::fmt::builders::DebugStruct" [label="external struct|core::fmt::builders::DebugStruct", fillcolor="#81c169"]; // "struct" node
    "core::fmt::builders::DebugTuple" [label="external struct|core::fmt::builders::DebugTuple", fillcolor="#81c169"]; // "struct" node
    "core::fmt::rt::Alignment" [label="external enum|core::fmt::rt::Alignment", fillcolor="#81c169"]; // "enum" node
    "core::fmt::rt::Argument" [label="external struct|core::fmt::rt::Argument", fillcolor="#81c169"]; // "struct" node
    "core::fmt::rt::Count" [label="external enum|core::fmt::rt::Count", fillcolor="#81c169"]; // "enum" node
    "core::fmt::rt::Placeholder" [label="external struct|core::fmt::rt::Placeholder", fillcolor="#81c169"]; // "struct" node
    "core::fmt::rt::UnsafeArg" [label="external struct|core::fmt::rt::UnsafeArg", fillcolor="#81c169"]; // "struct" node
    "core::future::future::Future" [label="external trait|core::future::future::Future", fillcolor="#81c169"]; // "trait" node
    "core::iter::adapters::chain::Chain" [label="external struct|core::iter::adapters::chain::Chain", fillcolor="#81c169"]; // "struct" node
    "core::iter::adapters::enumerate::Enumerate" [label="external struct|core::iter::adapters::enumerate::Enumerate", fillcolor="#81c169"]; // "struct" node
    "core::iter::adapters::flatten::FlatMap" [label="external struct|core::iter::adapters::flatten::FlatMap", fillcolor="#81c169"]; // "struct" node
    "core::iter::adapters::map::Map" [label="external struct|core::iter::adapters::map::Map", fillcolor="#81c169"]; // "struct" node
    "core::iter::adapters::rev::Rev" [label="external struct|core::iter::adapters::rev::Rev", fillcolor="#81c169"]; // "struct" node
    "core::iter::adapters::take::Take" [label="external struct|core::iter::adapters::take::Take", fillcolor="#81c169"]; // "struct" node
    "core::iter::adapters::zip::Zip" [label="external struct|core::iter::adapters::zip::Zip", fillcolor="#81c169"]; // "struct" node
    "core::iter::sources::once::Once" [label="external struct|core::iter::sources::once::Once", fillcolor="#81c169"]; // "struct" node
    "core::iter::sources::repeat::Repeat" [label="external struct|core::iter::sources::repeat::Repeat", fillcolor="#81c169"]; // "struct" node
    "core::iter::traits::exact_size::ExactSizeIterator" [label="external trait|core::iter::traits::exact_size::ExactSizeIterator", fillcolor="#81c169"]; // "trait" node
    "core::iter::traits::iterator::Iterator" [label="external trait|core::iter::traits::iterator::Iterator", fillcolor="#81c169"]; // "trait" node
    "core::marker::PhantomData" [label="external struct|core::marker::PhantomData", fillcolor="#81c169"]; // "struct" node
    "core::marker::Sized" [label="external trait|core::marker::Sized", fillcolor="#81c169"]; // "trait" node
    "core::num::error::TryFromIntError" [label="external struct|core::num::error::TryFromIntError", fillcolor="#81c169"]; // "struct" node
    "core::num::nonzero::NonZero" [label="external struct|core::num::nonzero::NonZero", fillcolor="#81c169"]; // "struct" node
    "core::ops::control_flow::ControlFlow" [label="external enum|core::ops::control_flow::ControlFlow", fillcolor="#81c169"]; // "enum" node
    "core::ops::function::FnOnce" [label="external trait|core::ops::function::FnOnce", fillcolor="#81c169"]; // "trait" node
    "core::ops::range::Range" [label="external struct|core::ops::range::Range", fillcolor="#81c169"]; // "struct" node
    "core::ops::range::RangeFrom" [label="external struct|core::ops::range::RangeFrom", fillcolor="#81c169"]; // "struct" node
    "core::ops::range::RangeFull" [label="external struct|core::ops::range::RangeFull", fillcolor="#81c169"]; // "struct" node
    "core::ops::range::RangeTo" [label="external struct|core::ops::range::RangeTo", fillcolor="#81c169"]; // "struct" node
    "core::option::Option" [label="external enum|core::option::Option", fillcolor="#81c169"]; // "enum" node
    "core::panic::location::Location" [label="external struct|core::panic::location::Location", fillcolor="#81c169"]; // "struct" node
    "core::panic::unwind_safe::UnwindSafe" [label="external trait|core::panic::unwind_safe::UnwindSafe", fillcolor="#81c169"]; // "trait" node
    "core::panicking::AssertKind" [label="external enum|core::panicking::AssertKind", fillcolor="#81c169"]; // "enum" node
    "core::result::Result" [label="external enum|core::result::Result", fillcolor="#81c169"]; // "enum" node
    "core::slice::iter::Chunks" [label="external struct|core::slice::iter::Chunks", fillcolor="#81c169"]; // "struct" node
    "core::slice::iter::ChunksExact" [label="external struct|core::slice::iter::ChunksExact", fillcolor="#81c169"]; // "struct" node
    "core::slice::iter::Iter" [label="external struct|core::slice::iter::Iter", fillcolor="#81c169"]; // "struct" node
    "core::slice::iter::IterMut" [label="external struct|core::slice::iter::IterMut", fillcolor="#81c169"]; // "struct" node
    "core::time::Duration" [label="external struct|core::time::Duration", fillcolor="#81c169"]; // "struct" node
    "crypto_common::InvalidLength" [label="external struct|crypto_common::InvalidLength", fillcolor="#81c169"]; // "struct" node
    "crypto_common::KeyInit" [label="external trait|crypto_common::KeyInit", fillcolor="#81c169"]; // "trait" node
    "crypto_common::KeyIvInit" [label="external trait|crypto_common::KeyIvInit", fillcolor="#81c169"]; // "trait" node
    "crypto_common::Output" [label="external type|crypto_common::Output", fillcolor="#81c169"]; // "type" node
    "ctr::ctr_core::CtrCore" [label="external struct|ctr::ctr_core::CtrCore", fillcolor="#81c169"]; // "struct" node
    "ctr::flavors::ctr32::Ctr32BE" [label="external enum|ctr::flavors::ctr32::Ctr32BE", fillcolor="#81c169"]; // "enum" node
    "digest::FixedOutput" [label="external trait|digest::FixedOutput", fillcolor="#81c169"]; // "trait" node
    "digest::core_api::ct_variable::CtVariableCoreWrapper" [label="external struct|digest::core_api::ct_variable::CtVariableCoreWrapper", fillcolor="#81c169"]; // "struct" node
    "digest::core_api::wrapper::CoreWrapper" [label="external struct|digest::core_api::wrapper::CoreWrapper", fillcolor="#81c169"]; // "struct" node
    "digest::digest::Digest" [label="external trait|digest::digest::Digest", fillcolor="#81c169"]; // "trait" node
    "digest::mac::CtOutput" [label="external struct|digest::mac::CtOutput", fillcolor="#81c169"]; // "struct" node
    "digest::mac::Mac" [label="external trait|digest::mac::Mac", fillcolor="#81c169"]; // "trait" node
    "digest::mac::MacError" [label="external struct|digest::mac::MacError", fillcolor="#81c169"]; // "struct" node
    "generic_array::ArrayLength" [label="external unsafe trait|generic_array::ArrayLength", fillcolor="#81c169"]; // "unsafe trait" node
    "generic_array::GenericArray" [label="external struct|generic_array::GenericArray", fillcolor="#81c169"]; // "struct" node
    "hkdf::Hkdf" [label="external struct|hkdf::Hkdf", fillcolor="#81c169"]; // "struct" node
    "hkdf::errors::InvalidLength" [label="external struct|hkdf::errors::InvalidLength", fillcolor="#81c169"]; // "struct" node
    "hmac::optim::Hmac" [label="external type|hmac::optim::Hmac", fillcolor="#81c169"]; // "type" node
    "hmac::optim::HmacCore" [label="external struct|hmac::optim::HmacCore", fillcolor="#81c169"]; // "struct" node
    "i32" [label="external builtin|i32", fillcolor="#81c169"]; // "builtin" node
    "indexmap::map::IndexMap" [label="external struct|indexmap::map::IndexMap", fillcolor="#81c169"]; // "struct" node
    "indexmap::map::core::entry::Entry" [label="external enum|indexmap::map::core::entry::Entry", fillcolor="#81c169"]; // "enum" node
    "indexmap::map::core::entry::OccupiedEntry" [label="external struct|indexmap::map::core::entry::OccupiedEntry", fillcolor="#81c169"]; // "struct" node
    "indexmap::map::core::entry::VacantEntry" [label="external struct|indexmap::map::core::entry::VacantEntry", fillcolor="#81c169"]; // "struct" node
    "itertools::Itertools" [label="external trait|itertools::Itertools", fillcolor="#81c169"]; // "trait" node
    "itertools::groupbylazy::ChunkBy" [label="external struct|itertools::groupbylazy::ChunkBy", fillcolor="#81c169"]; // "struct" node
    "itertools::groupbylazy::Group" [label="external struct|itertools::groupbylazy::Group", fillcolor="#81c169"]; // "struct" node
    "itertools::groupbylazy::Groups" [label="external struct|itertools::groupbylazy::Groups", fillcolor="#81c169"]; // "struct" node
    "libsignal_core::address::Aci" [label="external type|libsignal_core::address::Aci", fillcolor="#81c169"]; // "type" node
    "libsignal_core::address::DeviceId" [label="external struct|libsignal_core::address::DeviceId", fillcolor="#81c169"]; // "struct" node
    "libsignal_core::address::Pni" [label="external type|libsignal_core::address::Pni", fillcolor="#81c169"]; // "type" node
    "libsignal_core::address::ProtocolAddress" [label="external struct|libsignal_core::address::ProtocolAddress", fillcolor="#81c169"]; // "struct" node
    "libsignal_core::address::ServiceId" [label="external enum|libsignal_core::address::ServiceId", fillcolor="#81c169"]; // "enum" node
    "libsignal_core::address::ServiceIdFixedWidthBinaryBytes" [label="external type|libsignal_core::address::ServiceIdFixedWidthBinaryBytes", fillcolor="#81c169"]; // "type" node
    "libsignal_core::address::ServiceIdKind" [label="external enum|libsignal_core::address::ServiceIdKind", fillcolor="#81c169"]; // "enum" node
    "libsignal_core::address::SpecificServiceId" [label="external struct|libsignal_core::address::SpecificServiceId", fillcolor="#81c169"]; // "struct" node
    "libsignal_core::curve::CurveError" [label="external enum|libsignal_core::curve::CurveError", fillcolor="#81c169"]; // "enum" node
    "libsignal_core::curve::KeyPair" [label="external struct|libsignal_core::curve::KeyPair", fillcolor="#81c169"]; // "struct" node
    "libsignal_core::curve::KeyType" [label="external enum|libsignal_core::curve::KeyType", fillcolor="#81c169"]; // "enum" node
    "libsignal_core::curve::PrivateKey" [label="external struct|libsignal_core::curve::PrivateKey", fillcolor="#81c169"]; // "struct" node
    "libsignal_core::curve::PublicKey" [label="external struct|libsignal_core::curve::PublicKey", fillcolor="#81c169"]; // "struct" node
    "libsignal_protocol" [label="crate|libsignal_protocol", fillcolor="#5397c8"]; // "crate" node
    "libsignal_protocol" [label="pub(self) fn|libsignal_protocol", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::consts" [label="pub(crate) mod|libsignal_protocol::consts", fillcolor="#f8c04c"]; // "mod" node
    "libsignal_protocol::crypto" [label="pub(crate) mod|libsignal_protocol::crypto", fillcolor="#f8c04c"]; // "mod" node
    "libsignal_protocol::crypto::DecryptionError" [label="pub(crate) enum|libsignal_protocol::crypto::DecryptionError", fillcolor="#f8c04c"]; // "enum" node
    "libsignal_protocol::crypto::DecryptionError::fmt" [label="pub(self) fn|libsignal_protocol::crypto::DecryptionError::fmt", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::crypto::EncryptionError" [label="pub(crate) enum|libsignal_protocol::crypto::EncryptionError", fillcolor="#f8c04c"]; // "enum" node
    "libsignal_protocol::crypto::EncryptionError::fmt" [label="pub(self) fn|libsignal_protocol::crypto::EncryptionError::fmt", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::crypto::aes256_ctr_hmacsha256_decrypt" [label="pub(crate) fn|libsignal_protocol::crypto::aes256_ctr_hmacsha256_decrypt", fillcolor="#f8c04c"]; // "fn" node
    "libsignal_protocol::crypto::aes256_ctr_hmacsha256_encrypt" [label="pub(crate) fn|libsignal_protocol::crypto::aes256_ctr_hmacsha256_encrypt", fillcolor="#f8c04c"]; // "fn" node
    "libsignal_protocol::crypto::aes_256_ctr_decrypt" [label="pub(self) fn|libsignal_protocol::crypto::aes_256_ctr_decrypt", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::crypto::aes_256_ctr_encrypt" [label="pub(self) fn|libsignal_protocol::crypto::aes_256_ctr_encrypt", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::crypto::hmac_sha256" [label="pub(crate) fn|libsignal_protocol::crypto::hmac_sha256", fillcolor="#f8c04c"]; // "fn" node
    "libsignal_protocol::curve::KeyPair::PrivateKey" [label="pub(self) type|libsignal_protocol::curve::KeyPair::PrivateKey", fillcolor="#db5367"]; // "type" node
    "libsignal_protocol::curve::KeyPair::PublicKey" [label="pub(self) type|libsignal_protocol::curve::KeyPair::PublicKey", fillcolor="#db5367"]; // "type" node
    "libsignal_protocol::curve::KeyPair::from" [label="pub(self) fn|libsignal_protocol::curve::KeyPair::from", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::curve::KeyPair::from_public_and_private" [label="pub(self) fn|libsignal_protocol::curve::KeyPair::from_public_and_private", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::curve::KeyPair::get_private" [label="pub(self) fn|libsignal_protocol::curve::KeyPair::get_private", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::curve::KeyPair::get_public" [label="pub(self) fn|libsignal_protocol::curve::KeyPair::get_public", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::curve::PrivateKey::deserialize" [label="pub(self) fn|libsignal_protocol::curve::PrivateKey::deserialize", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::curve::PrivateKey::serialize" [label="pub(self) fn|libsignal_protocol::curve::PrivateKey::serialize", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::curve::PublicKey::deserialize" [label="pub(self) fn|libsignal_protocol::curve::PublicKey::deserialize", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::curve::PublicKey::serialize" [label="pub(self) fn|libsignal_protocol::curve::PublicKey::serialize", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::error" [label="pub mod|libsignal_protocol::error", fillcolor="#81c169"]; // "mod" node
    "libsignal_protocol::error::Result" [label="pub type|libsignal_protocol::error::Result", fillcolor="#81c169"]; // "type" node
    "libsignal_protocol::error::SignalProtocolError" [label="pub enum|libsignal_protocol::error::SignalProtocolError", fillcolor="#81c169"]; // "enum" node
    "libsignal_protocol::error::SignalProtocolError::fmt" [label="pub(self) fn|libsignal_protocol::error::SignalProtocolError::fmt", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::error::SignalProtocolError::for_application_callback" [label="pub fn|libsignal_protocol::error::SignalProtocolError::for_application_callback", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::error::SignalProtocolError::from" [label="pub(self) fn|libsignal_protocol::error::SignalProtocolError::from", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::error::SignalProtocolError::from" [label="pub(self) fn|libsignal_protocol::error::SignalProtocolError::from", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::fingerprint" [label="pub(crate) mod|libsignal_protocol::fingerprint", fillcolor="#f8c04c"]; // "mod" node
    "libsignal_protocol::fingerprint::DisplayableFingerprint" [label="pub struct|libsignal_protocol::fingerprint::DisplayableFingerprint", fillcolor="#81c169"]; // "struct" node
    "libsignal_protocol::fingerprint::DisplayableFingerprint::clone" [label="pub(self) fn|libsignal_protocol::fingerprint::DisplayableFingerprint::clone", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::fingerprint::DisplayableFingerprint::fmt" [label="pub(self) fn|libsignal_protocol::fingerprint::DisplayableFingerprint::fmt", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::fingerprint::DisplayableFingerprint::fmt" [label="pub(self) fn|libsignal_protocol::fingerprint::DisplayableFingerprint::fmt", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::fingerprint::DisplayableFingerprint::new" [label="pub fn|libsignal_protocol::fingerprint::DisplayableFingerprint::new", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::fingerprint::Fingerprint" [label="pub struct|libsignal_protocol::fingerprint::Fingerprint", fillcolor="#81c169"]; // "struct" node
    "libsignal_protocol::fingerprint::Fingerprint::clone" [label="pub(self) fn|libsignal_protocol::fingerprint::Fingerprint::clone", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::fingerprint::Fingerprint::display_string" [label="pub fn|libsignal_protocol::fingerprint::Fingerprint::display_string", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::fingerprint::Fingerprint::fmt" [label="pub(self) fn|libsignal_protocol::fingerprint::Fingerprint::fmt", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::fingerprint::Fingerprint::get_fingerprint" [label="pub(self) fn|libsignal_protocol::fingerprint::Fingerprint::get_fingerprint", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::fingerprint::Fingerprint::new" [label="pub fn|libsignal_protocol::fingerprint::Fingerprint::new", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::fingerprint::ScannableFingerprint" [label="pub struct|libsignal_protocol::fingerprint::ScannableFingerprint", fillcolor="#81c169"]; // "struct" node
    "libsignal_protocol::fingerprint::ScannableFingerprint::clone" [label="pub(self) fn|libsignal_protocol::fingerprint::ScannableFingerprint::clone", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::fingerprint::ScannableFingerprint::compare" [label="pub fn|libsignal_protocol::fingerprint::ScannableFingerprint::compare", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::fingerprint::ScannableFingerprint::deserialize" [label="pub fn|libsignal_protocol::fingerprint::ScannableFingerprint::deserialize", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::fingerprint::ScannableFingerprint::fmt" [label="pub(self) fn|libsignal_protocol::fingerprint::ScannableFingerprint::fmt", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::fingerprint::ScannableFingerprint::new" [label="pub(self) fn|libsignal_protocol::fingerprint::ScannableFingerprint::new", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::fingerprint::ScannableFingerprint::serialize" [label="pub fn|libsignal_protocol::fingerprint::ScannableFingerprint::serialize", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::fingerprint::get_encoded_string" [label="pub(self) fn|libsignal_protocol::fingerprint::get_encoded_string", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::group_cipher" [label="pub(crate) mod|libsignal_protocol::group_cipher", fillcolor="#f8c04c"]; // "mod" node
    "libsignal_protocol::group_cipher::create_sender_key_distribution_message" [label="pub async fn|libsignal_protocol::group_cipher::create_sender_key_distribution_message", fillcolor="#81c169"]; // "async fn" node
    "libsignal_protocol::group_cipher::get_sender_key" [label="pub(self) fn|libsignal_protocol::group_cipher::get_sender_key", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::group_cipher::group_decrypt" [label="pub async fn|libsignal_protocol::group_cipher::group_decrypt", fillcolor="#81c169"]; // "async fn" node
    "libsignal_protocol::group_cipher::group_encrypt" [label="pub async fn|libsignal_protocol::group_cipher::group_encrypt", fillcolor="#81c169"]; // "async fn" node
    "libsignal_protocol::group_cipher::process_sender_key_distribution_message" [label="pub async fn|libsignal_protocol::group_cipher::process_sender_key_distribution_message", fillcolor="#81c169"]; // "async fn" node
    "libsignal_protocol::identity_key" [label="pub(crate) mod|libsignal_protocol::identity_key", fillcolor="#f8c04c"]; // "mod" node
    "libsignal_protocol::identity_key::IdentityKey" [label="pub struct|libsignal_protocol::identity_key::IdentityKey", fillcolor="#81c169"]; // "struct" node
    "libsignal_protocol::identity_key::IdentityKey::Error" [label="pub(self) type|libsignal_protocol::identity_key::IdentityKey::Error", fillcolor="#db5367"]; // "type" node
    "libsignal_protocol::identity_key::IdentityKey::clone" [label="pub(self) fn|libsignal_protocol::identity_key::IdentityKey::clone", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::identity_key::IdentityKey::cmp" [label="pub(self) fn|libsignal_protocol::identity_key::IdentityKey::cmp", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::identity_key::IdentityKey::decode" [label="pub fn|libsignal_protocol::identity_key::IdentityKey::decode", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::identity_key::IdentityKey::eq" [label="pub(self) fn|libsignal_protocol::identity_key::IdentityKey::eq", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::identity_key::IdentityKey::fmt" [label="pub(self) fn|libsignal_protocol::identity_key::IdentityKey::fmt", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::identity_key::IdentityKey::new" [label="pub fn|libsignal_protocol::identity_key::IdentityKey::new", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::identity_key::IdentityKey::partial_cmp" [label="pub(self) fn|libsignal_protocol::identity_key::IdentityKey::partial_cmp", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::identity_key::IdentityKey::public_key" [label="pub fn|libsignal_protocol::identity_key::IdentityKey::public_key", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::identity_key::IdentityKey::serialize" [label="pub fn|libsignal_protocol::identity_key::IdentityKey::serialize", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::identity_key::IdentityKey::try_from" [label="pub(self) fn|libsignal_protocol::identity_key::IdentityKey::try_from", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::identity_key::IdentityKey::verify_alternate_identity" [label="pub fn|libsignal_protocol::identity_key::IdentityKey::verify_alternate_identity", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::identity_key::IdentityKeyPair" [label="pub struct|libsignal_protocol::identity_key::IdentityKeyPair", fillcolor="#81c169"]; // "struct" node
    "libsignal_protocol::identity_key::IdentityKeyPair::Error" [label="pub(self) type|libsignal_protocol::identity_key::IdentityKeyPair::Error", fillcolor="#db5367"]; // "type" node
    "libsignal_protocol::identity_key::IdentityKeyPair::Error" [label="pub(self) type|libsignal_protocol::identity_key::IdentityKeyPair::Error", fillcolor="#db5367"]; // "type" node
    "libsignal_protocol::identity_key::IdentityKeyPair::clone" [label="pub(self) fn|libsignal_protocol::identity_key::IdentityKeyPair::clone", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::identity_key::IdentityKeyPair::from" [label="pub(self) fn|libsignal_protocol::identity_key::IdentityKeyPair::from", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::identity_key::IdentityKeyPair::generate" [label="pub fn|libsignal_protocol::identity_key::IdentityKeyPair::generate", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::identity_key::IdentityKeyPair::identity_key" [label="pub fn|libsignal_protocol::identity_key::IdentityKeyPair::identity_key", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::identity_key::IdentityKeyPair::new" [label="pub fn|libsignal_protocol::identity_key::IdentityKeyPair::new", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::identity_key::IdentityKeyPair::private_key" [label="pub fn|libsignal_protocol::identity_key::IdentityKeyPair::private_key", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::identity_key::IdentityKeyPair::public_key" [label="pub fn|libsignal_protocol::identity_key::IdentityKeyPair::public_key", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::identity_key::IdentityKeyPair::serialize" [label="pub fn|libsignal_protocol::identity_key::IdentityKeyPair::serialize", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::identity_key::IdentityKeyPair::sign_alternate_identity" [label="pub fn|libsignal_protocol::identity_key::IdentityKeyPair::sign_alternate_identity", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::identity_key::IdentityKeyPair::try_from" [label="pub(self) fn|libsignal_protocol::identity_key::IdentityKeyPair::try_from", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::identity_key::IdentityKeyPair::try_from" [label="pub(self) fn|libsignal_protocol::identity_key::IdentityKeyPair::try_from", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::incremental_mac" [label="pub mod|libsignal_protocol::incremental_mac", fillcolor="#81c169"]; // "mod" node
    "libsignal_protocol::incremental_mac::Incremental" [label="pub struct|libsignal_protocol::incremental_mac::Incremental", fillcolor="#81c169"]; // "struct" node
    "libsignal_protocol::incremental_mac::Incremental::clone" [label="pub(self) fn|libsignal_protocol::incremental_mac::Incremental::clone", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::incremental_mac::Incremental::finalize" [label="pub fn|libsignal_protocol::incremental_mac::Incremental::finalize", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::incremental_mac::Incremental::new" [label="pub fn|libsignal_protocol::incremental_mac::Incremental::new", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::incremental_mac::Incremental::pending_bytes_size" [label="pub(self) fn|libsignal_protocol::incremental_mac::Incremental::pending_bytes_size", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::incremental_mac::Incremental::update" [label="pub fn|libsignal_protocol::incremental_mac::Incremental::update", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::incremental_mac::Incremental::update_chunk" [label="pub(self) fn|libsignal_protocol::incremental_mac::Incremental::update_chunk", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::incremental_mac::Incremental::validating" [label="pub fn|libsignal_protocol::incremental_mac::Incremental::validating", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::incremental_mac::Validating" [label="pub struct|libsignal_protocol::incremental_mac::Validating", fillcolor="#81c169"]; // "struct" node
    "libsignal_protocol::incremental_mac::Validating::clone" [label="pub(self) fn|libsignal_protocol::incremental_mac::Validating::clone", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::incremental_mac::Validating::finalize" [label="pub fn|libsignal_protocol::incremental_mac::Validating::finalize", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::incremental_mac::Validating::update" [label="pub fn|libsignal_protocol::incremental_mac::Validating::update", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::incremental_mac::calculate_chunk_size" [label="pub const fn|libsignal_protocol::incremental_mac::calculate_chunk_size", fillcolor="#81c169"]; // "const fn" node
    "libsignal_protocol::kem" [label="pub mod|libsignal_protocol::kem", fillcolor="#81c169"]; // "mod" node
    "libsignal_protocol::kem::Ciphertext" [label="pub(self) struct|libsignal_protocol::kem::Ciphertext", fillcolor="#db5367"]; // "struct" node
    "libsignal_protocol::kem::Ciphertext::deserialize" [label="pub fn|libsignal_protocol::kem::Ciphertext::deserialize", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::kem::Ciphertext::serialize" [label="pub fn|libsignal_protocol::kem::Ciphertext::serialize", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::kem::DynParameters" [label="pub(self) trait|libsignal_protocol::kem::DynParameters", fillcolor="#db5367"]; // "trait" node
    "libsignal_protocol::kem::Key" [label="pub struct|libsignal_protocol::kem::Key", fillcolor="#81c169"]; // "struct" node
    "libsignal_protocol::kem::Key::Error" [label="pub(self) type|libsignal_protocol::kem::Key::Error", fillcolor="#db5367"]; // "type" node
    "libsignal_protocol::kem::Key::Error" [label="pub(self) type|libsignal_protocol::kem::Key::Error", fillcolor="#db5367"]; // "type" node
    "libsignal_protocol::kem::Key::ct_eq" [label="pub(self) fn|libsignal_protocol::kem::Key::ct_eq", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::kem::Key::decapsulate" [label="pub fn|libsignal_protocol::kem::Key::decapsulate", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::kem::Key::deserialize" [label="pub fn|libsignal_protocol::kem::Key::deserialize", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::kem::Key::deserialize" [label="pub(self) fn|libsignal_protocol::kem::Key::deserialize", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::kem::Key::deserialize" [label="pub(self) fn|libsignal_protocol::kem::Key::deserialize", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::kem::Key::encapsulate" [label="pub fn|libsignal_protocol::kem::Key::encapsulate", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::kem::Key::eq" [label="pub(self) fn|libsignal_protocol::kem::Key::eq", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::kem::Key::key_type" [label="pub fn|libsignal_protocol::kem::Key::key_type", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::kem::Key::serialize" [label="pub fn|libsignal_protocol::kem::Key::serialize", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::kem::Key::serialize" [label="pub(self) fn|libsignal_protocol::kem::Key::serialize", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::kem::Key::serialize" [label="pub(self) fn|libsignal_protocol::kem::Key::serialize", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::kem::Key::try_from" [label="pub(self) fn|libsignal_protocol::kem::Key::try_from", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::kem::Key::try_from" [label="pub(self) fn|libsignal_protocol::kem::Key::try_from", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::kem::KeyKind" [label="pub trait|libsignal_protocol::kem::KeyKind", fillcolor="#81c169"]; // "trait" node
    "libsignal_protocol::kem::KeyMaterial" [label="pub(crate) struct|libsignal_protocol::kem::KeyMaterial", fillcolor="#f8c04c"]; // "struct" node
    "libsignal_protocol::kem::KeyMaterial::new" [label="pub(self) fn|libsignal_protocol::kem::KeyMaterial::new", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::kem::KeyPair" [label="pub struct|libsignal_protocol::kem::KeyPair", fillcolor="#81c169"]; // "struct" node
    "libsignal_protocol::kem::KeyPair::PrivateKey" [label="pub(self) type|libsignal_protocol::kem::KeyPair::PrivateKey", fillcolor="#db5367"]; // "type" node
    "libsignal_protocol::kem::KeyPair::PublicKey" [label="pub(self) type|libsignal_protocol::kem::KeyPair::PublicKey", fillcolor="#db5367"]; // "type" node
    "libsignal_protocol::kem::KeyPair::clone" [label="pub(self) fn|libsignal_protocol::kem::KeyPair::clone", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::kem::KeyPair::from_public_and_private" [label="pub fn|libsignal_protocol::kem::KeyPair::from_public_and_private", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::kem::KeyPair::from_public_and_private" [label="pub(self) fn|libsignal_protocol::kem::KeyPair::from_public_and_private", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::kem::KeyPair::generate" [label="pub fn|libsignal_protocol::kem::KeyPair::generate", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::kem::KeyPair::get_private" [label="pub(self) fn|libsignal_protocol::kem::KeyPair::get_private", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::kem::KeyPair::get_public" [label="pub(self) fn|libsignal_protocol::kem::KeyPair::get_public", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::kem::KeyPair::new" [label="pub fn|libsignal_protocol::kem::KeyPair::new", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::kem::KeyType" [label="pub enum|libsignal_protocol::kem::KeyType", fillcolor="#81c169"]; // "enum" node
    "libsignal_protocol::kem::KeyType::Error" [label="pub(self) type|libsignal_protocol::kem::KeyType::Error", fillcolor="#db5367"]; // "type" node
    "libsignal_protocol::kem::KeyType::clone" [label="pub(self) fn|libsignal_protocol::kem::KeyType::clone", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::kem::KeyType::eq" [label="pub(self) fn|libsignal_protocol::kem::KeyType::eq", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::kem::KeyType::fmt" [label="pub(self) fn|libsignal_protocol::kem::KeyType::fmt", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::kem::KeyType::parameters" [label="pub(self) const fn|libsignal_protocol::kem::KeyType::parameters", fillcolor="#db5367"]; // "const fn" node
    "libsignal_protocol::kem::KeyType::try_from" [label="pub(self) fn|libsignal_protocol::kem::KeyType::try_from", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::kem::KeyType::value" [label="pub(self) fn|libsignal_protocol::kem::KeyType::value", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::kem::Parameters" [label="pub(self) trait|libsignal_protocol::kem::Parameters", fillcolor="#db5367"]; // "trait" node
    "libsignal_protocol::kem::Public" [label="pub enum|libsignal_protocol::kem::Public", fillcolor="#81c169"]; // "enum" node
    "libsignal_protocol::kem::Public::key_length" [label="pub(self) fn|libsignal_protocol::kem::Public::key_length", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::kem::PublicKey" [label="pub type|libsignal_protocol::kem::PublicKey", fillcolor="#81c169"]; // "type" node
    "libsignal_protocol::kem::RawCiphertext" [label="pub(crate) type|libsignal_protocol::kem::RawCiphertext", fillcolor="#f8c04c"]; // "type" node
    "libsignal_protocol::kem::Secret" [label="pub enum|libsignal_protocol::kem::Secret", fillcolor="#81c169"]; // "enum" node
    "libsignal_protocol::kem::Secret::key_length" [label="pub(self) fn|libsignal_protocol::kem::Secret::key_length", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::kem::SecretKey" [label="pub type|libsignal_protocol::kem::SecretKey", fillcolor="#81c169"]; // "type" node
    "libsignal_protocol::kem::SerializedCiphertext" [label="pub type|libsignal_protocol::kem::SerializedCiphertext", fillcolor="#81c169"]; // "type" node
    "libsignal_protocol::kem::SharedSecret" [label="pub(self) type|libsignal_protocol::kem::SharedSecret", fillcolor="#db5367"]; // "type" node
    "libsignal_protocol::kem::kyber1024" [label="pub(self) mod|libsignal_protocol::kem::kyber1024", fillcolor="#db5367"]; // "mod" node
    "libsignal_protocol::kem::kyber1024::Parameters" [label="pub(crate) struct|libsignal_protocol::kem::kyber1024::Parameters", fillcolor="#f8c04c"]; // "struct" node
    "libsignal_protocol::kem::kyber1024::Parameters::decapsulate" [label="pub(self) fn|libsignal_protocol::kem::kyber1024::Parameters::decapsulate", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::kem::kyber1024::Parameters::encapsulate" [label="pub(self) fn|libsignal_protocol::kem::kyber1024::Parameters::encapsulate", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::kem::kyber1024::Parameters::generate" [label="pub(self) fn|libsignal_protocol::kem::kyber1024::Parameters::generate", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::proto" [label="pub(crate) mod|libsignal_protocol::proto", fillcolor="#f8c04c"]; // "mod" node
    "libsignal_protocol::proto::fingerprint" [label="pub mod|libsignal_protocol::proto::fingerprint", fillcolor="#81c169"]; // "mod" node
    "libsignal_protocol::proto::sealed_sender" [label="pub mod|libsignal_protocol::proto::sealed_sender", fillcolor="#81c169"]; // "mod" node
    "libsignal_protocol::proto::service" [label="pub mod|libsignal_protocol::proto::service", fillcolor="#81c169"]; // "mod" node
    "libsignal_protocol::proto::storage" [label="pub mod|libsignal_protocol::proto::storage", fillcolor="#81c169"]; // "mod" node
    "libsignal_protocol::proto::wire" [label="pub mod|libsignal_protocol::proto::wire", fillcolor="#81c169"]; // "mod" node
    "libsignal_protocol::protocol" [label="pub(crate) mod|libsignal_protocol::protocol", fillcolor="#f8c04c"]; // "mod" node
    "libsignal_protocol::protocol::CiphertextMessage" [label="pub enum|libsignal_protocol::protocol::CiphertextMessage", fillcolor="#81c169"]; // "enum" node
    "libsignal_protocol::protocol::CiphertextMessage::fmt" [label="pub(self) fn|libsignal_protocol::protocol::CiphertextMessage::fmt", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::protocol::CiphertextMessage::message_type" [label="pub fn|libsignal_protocol::protocol::CiphertextMessage::message_type", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::protocol::CiphertextMessage::serialize" [label="pub fn|libsignal_protocol::protocol::CiphertextMessage::serialize", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::protocol::CiphertextMessageType" [label="pub enum|libsignal_protocol::protocol::CiphertextMessageType", fillcolor="#81c169"]; // "enum" node
    "libsignal_protocol::protocol::CiphertextMessageType::clone" [label="pub(self) fn|libsignal_protocol::protocol::CiphertextMessageType::clone", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::protocol::CiphertextMessageType::eq" [label="pub(self) fn|libsignal_protocol::protocol::CiphertextMessageType::eq", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::protocol::CiphertextMessageType::fmt" [label="pub(self) fn|libsignal_protocol::protocol::CiphertextMessageType::fmt", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::protocol::CiphertextMessageType::from" [label="pub(self) fn|libsignal_protocol::protocol::CiphertextMessageType::from", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::protocol::DecryptionErrorMessage" [label="pub struct|libsignal_protocol::protocol::DecryptionErrorMessage", fillcolor="#81c169"]; // "struct" node
    "libsignal_protocol::protocol::DecryptionErrorMessage::Error" [label="pub(self) type|libsignal_protocol::protocol::DecryptionErrorMessage::Error", fillcolor="#db5367"]; // "type" node
    "libsignal_protocol::protocol::DecryptionErrorMessage::clone" [label="pub(self) fn|libsignal_protocol::protocol::DecryptionErrorMessage::clone", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::protocol::DecryptionErrorMessage::device_id" [label="pub fn|libsignal_protocol::protocol::DecryptionErrorMessage::device_id", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::protocol::DecryptionErrorMessage::fmt" [label="pub(self) fn|libsignal_protocol::protocol::DecryptionErrorMessage::fmt", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::protocol::DecryptionErrorMessage::for_original" [label="pub fn|libsignal_protocol::protocol::DecryptionErrorMessage::for_original", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::protocol::DecryptionErrorMessage::ratchet_key" [label="pub fn|libsignal_protocol::protocol::DecryptionErrorMessage::ratchet_key", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::protocol::DecryptionErrorMessage::serialized" [label="pub fn|libsignal_protocol::protocol::DecryptionErrorMessage::serialized", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::protocol::DecryptionErrorMessage::timestamp" [label="pub fn|libsignal_protocol::protocol::DecryptionErrorMessage::timestamp", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::protocol::DecryptionErrorMessage::try_from" [label="pub(self) fn|libsignal_protocol::protocol::DecryptionErrorMessage::try_from", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::protocol::KyberPayload" [label="pub struct|libsignal_protocol::protocol::KyberPayload", fillcolor="#81c169"]; // "struct" node
    "libsignal_protocol::protocol::KyberPayload::clone" [label="pub(self) fn|libsignal_protocol::protocol::KyberPayload::clone", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::protocol::KyberPayload::fmt" [label="pub(self) fn|libsignal_protocol::protocol::KyberPayload::fmt", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::protocol::KyberPayload::new" [label="pub fn|libsignal_protocol::protocol::KyberPayload::new", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::protocol::PlaintextContent" [label="pub struct|libsignal_protocol::protocol::PlaintextContent", fillcolor="#81c169"]; // "struct" node
    "libsignal_protocol::protocol::PlaintextContent::Error" [label="pub(self) type|libsignal_protocol::protocol::PlaintextContent::Error", fillcolor="#db5367"]; // "type" node
    "libsignal_protocol::protocol::PlaintextContent::body" [label="pub fn|libsignal_protocol::protocol::PlaintextContent::body", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::protocol::PlaintextContent::clone" [label="pub(self) fn|libsignal_protocol::protocol::PlaintextContent::clone", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::protocol::PlaintextContent::fmt" [label="pub(self) fn|libsignal_protocol::protocol::PlaintextContent::fmt", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::protocol::PlaintextContent::from" [label="pub(self) fn|libsignal_protocol::protocol::PlaintextContent::from", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::protocol::PlaintextContent::serialized" [label="pub fn|libsignal_protocol::protocol::PlaintextContent::serialized", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::protocol::PlaintextContent::try_from" [label="pub(self) fn|libsignal_protocol::protocol::PlaintextContent::try_from", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::protocol::PreKeySignalMessage" [label="pub struct|libsignal_protocol::protocol::PreKeySignalMessage", fillcolor="#81c169"]; // "struct" node
    "libsignal_protocol::protocol::PreKeySignalMessage::Error" [label="pub(self) type|libsignal_protocol::protocol::PreKeySignalMessage::Error", fillcolor="#db5367"]; // "type" node
    "libsignal_protocol::protocol::PreKeySignalMessage::as_ref" [label="pub(self) fn|libsignal_protocol::protocol::PreKeySignalMessage::as_ref", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::protocol::PreKeySignalMessage::base_key" [label="pub fn|libsignal_protocol::protocol::PreKeySignalMessage::base_key", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::protocol::PreKeySignalMessage::clone" [label="pub(self) fn|libsignal_protocol::protocol::PreKeySignalMessage::clone", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::protocol::PreKeySignalMessage::fmt" [label="pub(self) fn|libsignal_protocol::protocol::PreKeySignalMessage::fmt", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::protocol::PreKeySignalMessage::identity_key" [label="pub fn|libsignal_protocol::protocol::PreKeySignalMessage::identity_key", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::protocol::PreKeySignalMessage::kyber_ciphertext" [label="pub fn|libsignal_protocol::protocol::PreKeySignalMessage::kyber_ciphertext", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::protocol::PreKeySignalMessage::kyber_pre_key_id" [label="pub fn|libsignal_protocol::protocol::PreKeySignalMessage::kyber_pre_key_id", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::protocol::PreKeySignalMessage::message" [label="pub fn|libsignal_protocol::protocol::PreKeySignalMessage::message", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::protocol::PreKeySignalMessage::message_version" [label="pub fn|libsignal_protocol::protocol::PreKeySignalMessage::message_version", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::protocol::PreKeySignalMessage::new" [label="pub fn|libsignal_protocol::protocol::PreKeySignalMessage::new", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::protocol::PreKeySignalMessage::pre_key_id" [label="pub fn|libsignal_protocol::protocol::PreKeySignalMessage::pre_key_id", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::protocol::PreKeySignalMessage::registration_id" [label="pub fn|libsignal_protocol::protocol::PreKeySignalMessage::registration_id", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::protocol::PreKeySignalMessage::serialized" [label="pub fn|libsignal_protocol::protocol::PreKeySignalMessage::serialized", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::protocol::PreKeySignalMessage::signed_pre_key_id" [label="pub fn|libsignal_protocol::protocol::PreKeySignalMessage::signed_pre_key_id", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::protocol::PreKeySignalMessage::try_from" [label="pub(self) fn|libsignal_protocol::protocol::PreKeySignalMessage::try_from", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::protocol::SenderKeyDistributionMessage" [label="pub struct|libsignal_protocol::protocol::SenderKeyDistributionMessage", fillcolor="#81c169"]; // "struct" node
    "libsignal_protocol::protocol::SenderKeyDistributionMessage::Error" [label="pub(self) type|libsignal_protocol::protocol::SenderKeyDistributionMessage::Error", fillcolor="#db5367"]; // "type" node
    "libsignal_protocol::protocol::SenderKeyDistributionMessage::as_ref" [label="pub(self) fn|libsignal_protocol::protocol::SenderKeyDistributionMessage::as_ref", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::protocol::SenderKeyDistributionMessage::chain_id" [label="pub fn|libsignal_protocol::protocol::SenderKeyDistributionMessage::chain_id", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::protocol::SenderKeyDistributionMessage::chain_key" [label="pub fn|libsignal_protocol::protocol::SenderKeyDistributionMessage::chain_key", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::protocol::SenderKeyDistributionMessage::clone" [label="pub(self) fn|libsignal_protocol::protocol::SenderKeyDistributionMessage::clone", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::protocol::SenderKeyDistributionMessage::distribution_id" [label="pub fn|libsignal_protocol::protocol::SenderKeyDistributionMessage::distribution_id", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::protocol::SenderKeyDistributionMessage::fmt" [label="pub(self) fn|libsignal_protocol::protocol::SenderKeyDistributionMessage::fmt", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::protocol::SenderKeyDistributionMessage::iteration" [label="pub fn|libsignal_protocol::protocol::SenderKeyDistributionMessage::iteration", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::protocol::SenderKeyDistributionMessage::message_version" [label="pub fn|libsignal_protocol::protocol::SenderKeyDistributionMessage::message_version", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::protocol::SenderKeyDistributionMessage::new" [label="pub fn|libsignal_protocol::protocol::SenderKeyDistributionMessage::new", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::protocol::SenderKeyDistributionMessage::serialized" [label="pub fn|libsignal_protocol::protocol::SenderKeyDistributionMessage::serialized", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::protocol::SenderKeyDistributionMessage::signing_key" [label="pub fn|libsignal_protocol::protocol::SenderKeyDistributionMessage::signing_key", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::protocol::SenderKeyDistributionMessage::try_from" [label="pub(self) fn|libsignal_protocol::protocol::SenderKeyDistributionMessage::try_from", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::protocol::SenderKeyMessage" [label="pub struct|libsignal_protocol::protocol::SenderKeyMessage", fillcolor="#81c169"]; // "struct" node
    "libsignal_protocol::protocol::SenderKeyMessage::Error" [label="pub(self) type|libsignal_protocol::protocol::SenderKeyMessage::Error", fillcolor="#db5367"]; // "type" node
    "libsignal_protocol::protocol::SenderKeyMessage::as_ref" [label="pub(self) fn|libsignal_protocol::protocol::SenderKeyMessage::as_ref", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::protocol::SenderKeyMessage::chain_id" [label="pub fn|libsignal_protocol::protocol::SenderKeyMessage::chain_id", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::protocol::SenderKeyMessage::ciphertext" [label="pub fn|libsignal_protocol::protocol::SenderKeyMessage::ciphertext", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::protocol::SenderKeyMessage::clone" [label="pub(self) fn|libsignal_protocol::protocol::SenderKeyMessage::clone", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::protocol::SenderKeyMessage::distribution_id" [label="pub fn|libsignal_protocol::protocol::SenderKeyMessage::distribution_id", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::protocol::SenderKeyMessage::fmt" [label="pub(self) fn|libsignal_protocol::protocol::SenderKeyMessage::fmt", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::protocol::SenderKeyMessage::iteration" [label="pub fn|libsignal_protocol::protocol::SenderKeyMessage::iteration", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::protocol::SenderKeyMessage::message_version" [label="pub fn|libsignal_protocol::protocol::SenderKeyMessage::message_version", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::protocol::SenderKeyMessage::new" [label="pub fn|libsignal_protocol::protocol::SenderKeyMessage::new", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::protocol::SenderKeyMessage::serialized" [label="pub fn|libsignal_protocol::protocol::SenderKeyMessage::serialized", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::protocol::SenderKeyMessage::try_from" [label="pub(self) fn|libsignal_protocol::protocol::SenderKeyMessage::try_from", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::protocol::SenderKeyMessage::verify_signature" [label="pub fn|libsignal_protocol::protocol::SenderKeyMessage::verify_signature", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::protocol::SignalMessage" [label="pub struct|libsignal_protocol::protocol::SignalMessage", fillcolor="#81c169"]; // "struct" node
    "libsignal_protocol::protocol::SignalMessage::Error" [label="pub(self) type|libsignal_protocol::protocol::SignalMessage::Error", fillcolor="#db5367"]; // "type" node
    "libsignal_protocol::protocol::SignalMessage::as_ref" [label="pub(self) fn|libsignal_protocol::protocol::SignalMessage::as_ref", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::protocol::SignalMessage::body" [label="pub fn|libsignal_protocol::protocol::SignalMessage::body", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::protocol::SignalMessage::clone" [label="pub(self) fn|libsignal_protocol::protocol::SignalMessage::clone", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::protocol::SignalMessage::compute_mac" [label="pub(self) fn|libsignal_protocol::protocol::SignalMessage::compute_mac", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::protocol::SignalMessage::counter" [label="pub fn|libsignal_protocol::protocol::SignalMessage::counter", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::protocol::SignalMessage::fmt" [label="pub(self) fn|libsignal_protocol::protocol::SignalMessage::fmt", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::protocol::SignalMessage::message_version" [label="pub fn|libsignal_protocol::protocol::SignalMessage::message_version", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::protocol::SignalMessage::new" [label="pub fn|libsignal_protocol::protocol::SignalMessage::new", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::protocol::SignalMessage::sender_ratchet_key" [label="pub fn|libsignal_protocol::protocol::SignalMessage::sender_ratchet_key", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::protocol::SignalMessage::serialized" [label="pub fn|libsignal_protocol::protocol::SignalMessage::serialized", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::protocol::SignalMessage::try_from" [label="pub(self) fn|libsignal_protocol::protocol::SignalMessage::try_from", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::protocol::SignalMessage::verify_mac" [label="pub fn|libsignal_protocol::protocol::SignalMessage::verify_mac", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::protocol::extract_decryption_error_message_from_serialized_content" [label="pub fn|libsignal_protocol::protocol::extract_decryption_error_message_from_serialized_content", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::ratchet" [label="pub(crate) mod|libsignal_protocol::ratchet", fillcolor="#f8c04c"]; // "mod" node
    "libsignal_protocol::ratchet::derive_keys" [label="pub(self) fn|libsignal_protocol::ratchet::derive_keys", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::ratchet::derive_keys_with_label" [label="pub(self) fn|libsignal_protocol::ratchet::derive_keys_with_label", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::ratchet::initialize_alice_session" [label="pub(crate) fn|libsignal_protocol::ratchet::initialize_alice_session", fillcolor="#f8c04c"]; // "fn" node
    "libsignal_protocol::ratchet::initialize_alice_session_record" [label="pub fn|libsignal_protocol::ratchet::initialize_alice_session_record", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::ratchet::initialize_bob_session" [label="pub(crate) fn|libsignal_protocol::ratchet::initialize_bob_session", fillcolor="#f8c04c"]; // "fn" node
    "libsignal_protocol::ratchet::initialize_bob_session_record" [label="pub fn|libsignal_protocol::ratchet::initialize_bob_session_record", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::ratchet::keys" [label="pub(self) mod|libsignal_protocol::ratchet::keys", fillcolor="#db5367"]; // "mod" node
    "libsignal_protocol::ratchet::keys::ChainKey" [label="pub(crate) struct|libsignal_protocol::ratchet::keys::ChainKey", fillcolor="#f8c04c"]; // "struct" node
    "libsignal_protocol::ratchet::keys::ChainKey::calculate_base_material" [label="pub(self) fn|libsignal_protocol::ratchet::keys::ChainKey::calculate_base_material", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::ratchet::keys::ChainKey::clone" [label="pub(self) fn|libsignal_protocol::ratchet::keys::ChainKey::clone", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::ratchet::keys::ChainKey::fmt" [label="pub(self) fn|libsignal_protocol::ratchet::keys::ChainKey::fmt", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::ratchet::keys::ChainKey::index" [label="pub(crate) fn|libsignal_protocol::ratchet::keys::ChainKey::index", fillcolor="#f8c04c"]; // "fn" node
    "libsignal_protocol::ratchet::keys::ChainKey::key" [label="pub(crate) fn|libsignal_protocol::ratchet::keys::ChainKey::key", fillcolor="#f8c04c"]; // "fn" node
    "libsignal_protocol::ratchet::keys::ChainKey::message_keys" [label="pub(crate) fn|libsignal_protocol::ratchet::keys::ChainKey::message_keys", fillcolor="#f8c04c"]; // "fn" node
    "libsignal_protocol::ratchet::keys::ChainKey::new" [label="pub(crate) fn|libsignal_protocol::ratchet::keys::ChainKey::new", fillcolor="#f8c04c"]; // "fn" node
    "libsignal_protocol::ratchet::keys::ChainKey::next_chain_key" [label="pub(crate) fn|libsignal_protocol::ratchet::keys::ChainKey::next_chain_key", fillcolor="#f8c04c"]; // "fn" node
    "libsignal_protocol::ratchet::keys::MessageKeyGenerator" [label="pub(crate) enum|libsignal_protocol::ratchet::keys::MessageKeyGenerator", fillcolor="#f8c04c"]; // "enum" node
    "libsignal_protocol::ratchet::keys::MessageKeyGenerator::from_pb" [label="pub(crate) fn|libsignal_protocol::ratchet::keys::MessageKeyGenerator::from_pb", fillcolor="#f8c04c"]; // "fn" node
    "libsignal_protocol::ratchet::keys::MessageKeyGenerator::generate_keys" [label="pub(crate) fn|libsignal_protocol::ratchet::keys::MessageKeyGenerator::generate_keys", fillcolor="#f8c04c"]; // "fn" node
    "libsignal_protocol::ratchet::keys::MessageKeyGenerator::into_pb" [label="pub(crate) fn|libsignal_protocol::ratchet::keys::MessageKeyGenerator::into_pb", fillcolor="#f8c04c"]; // "fn" node
    "libsignal_protocol::ratchet::keys::MessageKeyGenerator::new_from_seed" [label="pub(crate) fn|libsignal_protocol::ratchet::keys::MessageKeyGenerator::new_from_seed", fillcolor="#f8c04c"]; // "fn" node
    "libsignal_protocol::ratchet::keys::MessageKeys" [label="pub(crate) struct|libsignal_protocol::ratchet::keys::MessageKeys", fillcolor="#f8c04c"]; // "struct" node
    "libsignal_protocol::ratchet::keys::MessageKeys::cipher_key" [label="pub(crate) fn|libsignal_protocol::ratchet::keys::MessageKeys::cipher_key", fillcolor="#f8c04c"]; // "fn" node
    "libsignal_protocol::ratchet::keys::MessageKeys::clone" [label="pub(self) fn|libsignal_protocol::ratchet::keys::MessageKeys::clone", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::ratchet::keys::MessageKeys::counter" [label="pub(crate) fn|libsignal_protocol::ratchet::keys::MessageKeys::counter", fillcolor="#f8c04c"]; // "fn" node
    "libsignal_protocol::ratchet::keys::MessageKeys::derive_keys" [label="pub(crate) fn|libsignal_protocol::ratchet::keys::MessageKeys::derive_keys", fillcolor="#f8c04c"]; // "fn" node
    "libsignal_protocol::ratchet::keys::MessageKeys::iv" [label="pub(crate) fn|libsignal_protocol::ratchet::keys::MessageKeys::iv", fillcolor="#f8c04c"]; // "fn" node
    "libsignal_protocol::ratchet::keys::MessageKeys::mac_key" [label="pub(crate) fn|libsignal_protocol::ratchet::keys::MessageKeys::mac_key", fillcolor="#f8c04c"]; // "fn" node
    "libsignal_protocol::ratchet::keys::RootKey" [label="pub(crate) struct|libsignal_protocol::ratchet::keys::RootKey", fillcolor="#f8c04c"]; // "struct" node
    "libsignal_protocol::ratchet::keys::RootKey::clone" [label="pub(self) fn|libsignal_protocol::ratchet::keys::RootKey::clone", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::ratchet::keys::RootKey::create_chain" [label="pub(crate) fn|libsignal_protocol::ratchet::keys::RootKey::create_chain", fillcolor="#f8c04c"]; // "fn" node
    "libsignal_protocol::ratchet::keys::RootKey::fmt" [label="pub(self) fn|libsignal_protocol::ratchet::keys::RootKey::fmt", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::ratchet::keys::RootKey::fmt" [label="pub(self) fn|libsignal_protocol::ratchet::keys::RootKey::fmt", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::ratchet::keys::RootKey::key" [label="pub(crate) fn|libsignal_protocol::ratchet::keys::RootKey::key", fillcolor="#f8c04c"]; // "fn" node
    "libsignal_protocol::ratchet::keys::RootKey::new" [label="pub(crate) fn|libsignal_protocol::ratchet::keys::RootKey::new", fillcolor="#f8c04c"]; // "fn" node
    "libsignal_protocol::ratchet::message_version" [label="pub(self) fn|libsignal_protocol::ratchet::message_version", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::ratchet::params" [label="pub(self) mod|libsignal_protocol::ratchet::params", fillcolor="#db5367"]; // "mod" node
    "libsignal_protocol::ratchet::params::AliceSignalProtocolParameters" [label="pub struct|libsignal_protocol::ratchet::params::AliceSignalProtocolParameters", fillcolor="#81c169"]; // "struct" node
    "libsignal_protocol::ratchet::params::AliceSignalProtocolParameters::new" [label="pub fn|libsignal_protocol::ratchet::params::AliceSignalProtocolParameters::new", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::ratchet::params::AliceSignalProtocolParameters::our_base_key_pair" [label="pub fn|libsignal_protocol::ratchet::params::AliceSignalProtocolParameters::our_base_key_pair", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::ratchet::params::AliceSignalProtocolParameters::our_identity_key_pair" [label="pub fn|libsignal_protocol::ratchet::params::AliceSignalProtocolParameters::our_identity_key_pair", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::ratchet::params::AliceSignalProtocolParameters::set_their_kyber_pre_key" [label="pub fn|libsignal_protocol::ratchet::params::AliceSignalProtocolParameters::set_their_kyber_pre_key", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::ratchet::params::AliceSignalProtocolParameters::set_their_one_time_pre_key" [label="pub fn|libsignal_protocol::ratchet::params::AliceSignalProtocolParameters::set_their_one_time_pre_key", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::ratchet::params::AliceSignalProtocolParameters::their_identity_key" [label="pub fn|libsignal_protocol::ratchet::params::AliceSignalProtocolParameters::their_identity_key", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::ratchet::params::AliceSignalProtocolParameters::their_kyber_pre_key" [label="pub fn|libsignal_protocol::ratchet::params::AliceSignalProtocolParameters::their_kyber_pre_key", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::ratchet::params::AliceSignalProtocolParameters::their_one_time_pre_key" [label="pub fn|libsignal_protocol::ratchet::params::AliceSignalProtocolParameters::their_one_time_pre_key", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::ratchet::params::AliceSignalProtocolParameters::their_ratchet_key" [label="pub fn|libsignal_protocol::ratchet::params::AliceSignalProtocolParameters::their_ratchet_key", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::ratchet::params::AliceSignalProtocolParameters::their_signed_pre_key" [label="pub fn|libsignal_protocol::ratchet::params::AliceSignalProtocolParameters::their_signed_pre_key", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::ratchet::params::AliceSignalProtocolParameters::with_their_kyber_pre_key" [label="pub fn|libsignal_protocol::ratchet::params::AliceSignalProtocolParameters::with_their_kyber_pre_key", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::ratchet::params::AliceSignalProtocolParameters::with_their_one_time_pre_key" [label="pub fn|libsignal_protocol::ratchet::params::AliceSignalProtocolParameters::with_their_one_time_pre_key", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::ratchet::params::BobSignalProtocolParameters" [label="pub struct|libsignal_protocol::ratchet::params::BobSignalProtocolParameters", fillcolor="#81c169"]; // "struct" node
    "libsignal_protocol::ratchet::params::BobSignalProtocolParameters::new" [label="pub fn|libsignal_protocol::ratchet::params::BobSignalProtocolParameters::new", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::ratchet::params::BobSignalProtocolParameters::our_identity_key_pair" [label="pub fn|libsignal_protocol::ratchet::params::BobSignalProtocolParameters::our_identity_key_pair", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::ratchet::params::BobSignalProtocolParameters::our_kyber_pre_key_pair" [label="pub fn|libsignal_protocol::ratchet::params::BobSignalProtocolParameters::our_kyber_pre_key_pair", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::ratchet::params::BobSignalProtocolParameters::our_one_time_pre_key_pair" [label="pub fn|libsignal_protocol::ratchet::params::BobSignalProtocolParameters::our_one_time_pre_key_pair", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::ratchet::params::BobSignalProtocolParameters::our_ratchet_key_pair" [label="pub fn|libsignal_protocol::ratchet::params::BobSignalProtocolParameters::our_ratchet_key_pair", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::ratchet::params::BobSignalProtocolParameters::our_signed_pre_key_pair" [label="pub fn|libsignal_protocol::ratchet::params::BobSignalProtocolParameters::our_signed_pre_key_pair", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::ratchet::params::BobSignalProtocolParameters::their_base_key" [label="pub fn|libsignal_protocol::ratchet::params::BobSignalProtocolParameters::their_base_key", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::ratchet::params::BobSignalProtocolParameters::their_identity_key" [label="pub fn|libsignal_protocol::ratchet::params::BobSignalProtocolParameters::their_identity_key", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::ratchet::params::BobSignalProtocolParameters::their_kyber_ciphertext" [label="pub fn|libsignal_protocol::ratchet::params::BobSignalProtocolParameters::their_kyber_ciphertext", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::sealed_sender" [label="pub(crate) mod|libsignal_protocol::sealed_sender", fillcolor="#f8c04c"]; // "mod" node
    "libsignal_protocol::sealed_sender::ContentHint" [label="pub enum|libsignal_protocol::sealed_sender::ContentHint", fillcolor="#81c169"]; // "enum" node
    "libsignal_protocol::sealed_sender::ContentHint::clone" [label="pub(self) fn|libsignal_protocol::sealed_sender::ContentHint::clone", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::sealed_sender::ContentHint::eq" [label="pub(self) fn|libsignal_protocol::sealed_sender::ContentHint::eq", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::sealed_sender::ContentHint::fmt" [label="pub(self) fn|libsignal_protocol::sealed_sender::ContentHint::fmt", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::sealed_sender::ContentHint::from" [label="pub(self) fn|libsignal_protocol::sealed_sender::ContentHint::from", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::sealed_sender::ContentHint::to_proto" [label="pub(self) fn|libsignal_protocol::sealed_sender::ContentHint::to_proto", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::sealed_sender::ContentHint::to_u32" [label="pub const fn|libsignal_protocol::sealed_sender::ContentHint::to_u32", fillcolor="#81c169"]; // "const fn" node
    "libsignal_protocol::sealed_sender::PrefixRepr" [label="pub(self) struct|libsignal_protocol::sealed_sender::PrefixRepr", fillcolor="#db5367"]; // "struct" node
    "libsignal_protocol::sealed_sender::SealedSenderDecryptionResult" [label="pub struct|libsignal_protocol::sealed_sender::SealedSenderDecryptionResult", fillcolor="#81c169"]; // "struct" node
    "libsignal_protocol::sealed_sender::SealedSenderDecryptionResult::device_id" [label="pub fn|libsignal_protocol::sealed_sender::SealedSenderDecryptionResult::device_id", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::sealed_sender::SealedSenderDecryptionResult::fmt" [label="pub(self) fn|libsignal_protocol::sealed_sender::SealedSenderDecryptionResult::fmt", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::sealed_sender::SealedSenderDecryptionResult::message" [label="pub fn|libsignal_protocol::sealed_sender::SealedSenderDecryptionResult::message", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::sealed_sender::SealedSenderDecryptionResult::sender_e164" [label="pub fn|libsignal_protocol::sealed_sender::SealedSenderDecryptionResult::sender_e164", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::sealed_sender::SealedSenderDecryptionResult::sender_uuid" [label="pub fn|libsignal_protocol::sealed_sender::SealedSenderDecryptionResult::sender_uuid", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::sealed_sender::SealedSenderV2SentMessage" [label="pub struct|libsignal_protocol::sealed_sender::SealedSenderV2SentMessage", fillcolor="#81c169"]; // "struct" node
    "libsignal_protocol::sealed_sender::SealedSenderV2SentMessage::offset_of_shared_bytes" [label="pub fn|libsignal_protocol::sealed_sender::SealedSenderV2SentMessage::offset_of_shared_bytes", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::sealed_sender::SealedSenderV2SentMessage::offset_within_full_message" [label="pub(self) fn|libsignal_protocol::sealed_sender::SealedSenderV2SentMessage::offset_within_full_message", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::sealed_sender::SealedSenderV2SentMessage::parse" [label="pub fn|libsignal_protocol::sealed_sender::SealedSenderV2SentMessage::parse", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::sealed_sender::SealedSenderV2SentMessage::range_for_recipient_key_material" [label="pub fn|libsignal_protocol::sealed_sender::SealedSenderV2SentMessage::range_for_recipient_key_material", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::sealed_sender::SealedSenderV2SentMessage::received_message_parts_for_recipient" [label="pub fn|libsignal_protocol::sealed_sender::SealedSenderV2SentMessage::received_message_parts_for_recipient", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::sealed_sender::SealedSenderV2SentMessageRecipient" [label="pub struct|libsignal_protocol::sealed_sender::SealedSenderV2SentMessageRecipient", fillcolor="#81c169"]; // "struct" node
    "libsignal_protocol::sealed_sender::SenderCertificate" [label="pub struct|libsignal_protocol::sealed_sender::SenderCertificate", fillcolor="#81c169"]; // "struct" node
    "libsignal_protocol::sealed_sender::SenderCertificate::certificate" [label="pub fn|libsignal_protocol::sealed_sender::SenderCertificate::certificate", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::sealed_sender::SenderCertificate::clone" [label="pub(self) fn|libsignal_protocol::sealed_sender::SenderCertificate::clone", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::sealed_sender::SenderCertificate::deserialize" [label="pub fn|libsignal_protocol::sealed_sender::SenderCertificate::deserialize", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::sealed_sender::SenderCertificate::expiration" [label="pub fn|libsignal_protocol::sealed_sender::SenderCertificate::expiration", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::sealed_sender::SenderCertificate::fmt" [label="pub(self) fn|libsignal_protocol::sealed_sender::SenderCertificate::fmt", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::sealed_sender::SenderCertificate::key" [label="pub fn|libsignal_protocol::sealed_sender::SenderCertificate::key", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::sealed_sender::SenderCertificate::new" [label="pub fn|libsignal_protocol::sealed_sender::SenderCertificate::new", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::sealed_sender::SenderCertificate::sender_device_id" [label="pub fn|libsignal_protocol::sealed_sender::SenderCertificate::sender_device_id", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::sealed_sender::SenderCertificate::sender_e164" [label="pub fn|libsignal_protocol::sealed_sender::SenderCertificate::sender_e164", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::sealed_sender::SenderCertificate::sender_uuid" [label="pub fn|libsignal_protocol::sealed_sender::SenderCertificate::sender_uuid", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::sealed_sender::SenderCertificate::serialized" [label="pub fn|libsignal_protocol::sealed_sender::SenderCertificate::serialized", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::sealed_sender::SenderCertificate::signature" [label="pub fn|libsignal_protocol::sealed_sender::SenderCertificate::signature", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::sealed_sender::SenderCertificate::signer" [label="pub fn|libsignal_protocol::sealed_sender::SenderCertificate::signer", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::sealed_sender::SenderCertificate::validate" [label="pub fn|libsignal_protocol::sealed_sender::SenderCertificate::validate", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::sealed_sender::ServerCertificate" [label="pub struct|libsignal_protocol::sealed_sender::ServerCertificate", fillcolor="#81c169"]; // "struct" node
    "libsignal_protocol::sealed_sender::ServerCertificate::certificate" [label="pub fn|libsignal_protocol::sealed_sender::ServerCertificate::certificate", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::sealed_sender::ServerCertificate::clone" [label="pub(self) fn|libsignal_protocol::sealed_sender::ServerCertificate::clone", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::sealed_sender::ServerCertificate::deserialize" [label="pub fn|libsignal_protocol::sealed_sender::ServerCertificate::deserialize", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::sealed_sender::ServerCertificate::fmt" [label="pub(self) fn|libsignal_protocol::sealed_sender::ServerCertificate::fmt", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::sealed_sender::ServerCertificate::key_id" [label="pub fn|libsignal_protocol::sealed_sender::ServerCertificate::key_id", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::sealed_sender::ServerCertificate::new" [label="pub fn|libsignal_protocol::sealed_sender::ServerCertificate::new", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::sealed_sender::ServerCertificate::public_key" [label="pub fn|libsignal_protocol::sealed_sender::ServerCertificate::public_key", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::sealed_sender::ServerCertificate::serialized" [label="pub fn|libsignal_protocol::sealed_sender::ServerCertificate::serialized", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::sealed_sender::ServerCertificate::signature" [label="pub fn|libsignal_protocol::sealed_sender::ServerCertificate::signature", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::sealed_sender::ServerCertificate::to_protobuf" [label="pub(crate) fn|libsignal_protocol::sealed_sender::ServerCertificate::to_protobuf", fillcolor="#f8c04c"]; // "fn" node
    "libsignal_protocol::sealed_sender::ServerCertificate::validate" [label="pub fn|libsignal_protocol::sealed_sender::ServerCertificate::validate", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessage" [label="pub(self) enum|libsignal_protocol::sealed_sender::UnidentifiedSenderMessage", fillcolor="#db5367"]; // "enum" node
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessage::deserialize" [label="pub(self) fn|libsignal_protocol::sealed_sender::UnidentifiedSenderMessage::deserialize", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent" [label="pub struct|libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent", fillcolor="#81c169"]; // "struct" node
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent::content_hint" [label="pub fn|libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent::content_hint", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent::contents" [label="pub fn|libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent::contents", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent::deserialize" [label="pub fn|libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent::deserialize", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent::group_id" [label="pub fn|libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent::group_id", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent::msg_type" [label="pub fn|libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent::msg_type", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent::new" [label="pub fn|libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent::new", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent::sender" [label="pub fn|libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent::sender", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent::serialized" [label="pub fn|libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent::serialized", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::sealed_sender::sealed_sender_decrypt" [label="pub async fn|libsignal_protocol::sealed_sender::sealed_sender_decrypt", fillcolor="#81c169"]; // "async fn" node
    "libsignal_protocol::sealed_sender::sealed_sender_decrypt_to_usmc" [label="pub async fn|libsignal_protocol::sealed_sender::sealed_sender_decrypt_to_usmc", fillcolor="#81c169"]; // "async fn" node
    "libsignal_protocol::sealed_sender::sealed_sender_encrypt" [label="pub async fn|libsignal_protocol::sealed_sender::sealed_sender_encrypt", fillcolor="#81c169"]; // "async fn" node
    "libsignal_protocol::sealed_sender::sealed_sender_encrypt_from_usmc" [label="pub async fn|libsignal_protocol::sealed_sender::sealed_sender_encrypt_from_usmc", fillcolor="#81c169"]; // "async fn" node
    "libsignal_protocol::sealed_sender::sealed_sender_multi_recipient_encrypt" [label="pub async fn|libsignal_protocol::sealed_sender::sealed_sender_multi_recipient_encrypt", fillcolor="#81c169"]; // "async fn" node
    "libsignal_protocol::sealed_sender::sealed_sender_multi_recipient_encrypt_impl" [label="pub(self) async fn|libsignal_protocol::sealed_sender::sealed_sender_multi_recipient_encrypt_impl", fillcolor="#db5367"]; // "async fn" node
    "libsignal_protocol::sealed_sender::sealed_sender_v1" [label="pub(self) mod|libsignal_protocol::sealed_sender::sealed_sender_v1", fillcolor="#db5367"]; // "mod" node
    "libsignal_protocol::sealed_sender::sealed_sender_v1::EphemeralKeys" [label="pub(super) struct|libsignal_protocol::sealed_sender::sealed_sender_v1::EphemeralKeys", fillcolor="#fe9454"]; // "struct" node
    "libsignal_protocol::sealed_sender::sealed_sender_v1::EphemeralKeys::calculate" [label="pub(super) fn|libsignal_protocol::sealed_sender::sealed_sender_v1::EphemeralKeys::calculate", fillcolor="#fe9454"]; // "fn" node
    "libsignal_protocol::sealed_sender::sealed_sender_v1::StaticKeys" [label="pub(super) struct|libsignal_protocol::sealed_sender::sealed_sender_v1::StaticKeys", fillcolor="#fe9454"]; // "struct" node
    "libsignal_protocol::sealed_sender::sealed_sender_v1::StaticKeys::calculate" [label="pub(super) fn|libsignal_protocol::sealed_sender::sealed_sender_v1::StaticKeys::calculate", fillcolor="#fe9454"]; // "fn" node
    "libsignal_protocol::sealed_sender::sealed_sender_v2" [label="pub(self) mod|libsignal_protocol::sealed_sender::sealed_sender_v2", fillcolor="#db5367"]; // "mod" node
    "libsignal_protocol::sealed_sender::sealed_sender_v2::DerivedKeys" [label="pub(super) struct|libsignal_protocol::sealed_sender::sealed_sender_v2::DerivedKeys", fillcolor="#fe9454"]; // "struct" node
    "libsignal_protocol::sealed_sender::sealed_sender_v2::DerivedKeys::derive_e" [label="pub(super) fn|libsignal_protocol::sealed_sender::sealed_sender_v2::DerivedKeys::derive_e", fillcolor="#fe9454"]; // "fn" node
    "libsignal_protocol::sealed_sender::sealed_sender_v2::DerivedKeys::derive_k" [label="pub(super) fn|libsignal_protocol::sealed_sender::sealed_sender_v2::DerivedKeys::derive_k", fillcolor="#fe9454"]; // "fn" node
    "libsignal_protocol::sealed_sender::sealed_sender_v2::DerivedKeys::new" [label="pub(super) fn|libsignal_protocol::sealed_sender::sealed_sender_v2::DerivedKeys::new", fillcolor="#fe9454"]; // "fn" node
    "libsignal_protocol::sealed_sender::sealed_sender_v2::apply_agreement_xor" [label="pub(super) fn|libsignal_protocol::sealed_sender::sealed_sender_v2::apply_agreement_xor", fillcolor="#fe9454"]; // "fn" node
    "libsignal_protocol::sealed_sender::sealed_sender_v2::compute_authentication_tag" [label="pub(super) fn|libsignal_protocol::sealed_sender::sealed_sender_v2::compute_authentication_tag", fillcolor="#fe9454"]; // "fn" node
    "libsignal_protocol::sender_keys" [label="pub(crate) mod|libsignal_protocol::sender_keys", fillcolor="#f8c04c"]; // "mod" node
    "libsignal_protocol::sender_keys::InvalidSessionError" [label="pub(crate) struct|libsignal_protocol::sender_keys::InvalidSessionError", fillcolor="#f8c04c"]; // "struct" node
    "libsignal_protocol::sender_keys::InvalidSessionError::fmt" [label="pub(self) fn|libsignal_protocol::sender_keys::InvalidSessionError::fmt", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::sender_keys::InvalidSessionError::fmt" [label="pub(self) fn|libsignal_protocol::sender_keys::InvalidSessionError::fmt", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::sender_keys::SenderChainKey" [label="pub(crate) struct|libsignal_protocol::sender_keys::SenderChainKey", fillcolor="#f8c04c"]; // "struct" node
    "libsignal_protocol::sender_keys::SenderChainKey::as_protobuf" [label="pub(crate) fn|libsignal_protocol::sender_keys::SenderChainKey::as_protobuf", fillcolor="#f8c04c"]; // "fn" node
    "libsignal_protocol::sender_keys::SenderChainKey::clone" [label="pub(self) fn|libsignal_protocol::sender_keys::SenderChainKey::clone", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::sender_keys::SenderChainKey::fmt" [label="pub(self) fn|libsignal_protocol::sender_keys::SenderChainKey::fmt", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::sender_keys::SenderChainKey::get_derivative" [label="pub(self) fn|libsignal_protocol::sender_keys::SenderChainKey::get_derivative", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::sender_keys::SenderChainKey::iteration" [label="pub(crate) fn|libsignal_protocol::sender_keys::SenderChainKey::iteration", fillcolor="#f8c04c"]; // "fn" node
    "libsignal_protocol::sender_keys::SenderChainKey::new" [label="pub(crate) fn|libsignal_protocol::sender_keys::SenderChainKey::new", fillcolor="#f8c04c"]; // "fn" node
    "libsignal_protocol::sender_keys::SenderChainKey::next" [label="pub(crate) fn|libsignal_protocol::sender_keys::SenderChainKey::next", fillcolor="#f8c04c"]; // "fn" node
    "libsignal_protocol::sender_keys::SenderChainKey::seed" [label="pub(crate) fn|libsignal_protocol::sender_keys::SenderChainKey::seed", fillcolor="#f8c04c"]; // "fn" node
    "libsignal_protocol::sender_keys::SenderChainKey::sender_message_key" [label="pub(crate) fn|libsignal_protocol::sender_keys::SenderChainKey::sender_message_key", fillcolor="#f8c04c"]; // "fn" node
    "libsignal_protocol::sender_keys::SenderKeyRecord" [label="pub struct|libsignal_protocol::sender_keys::SenderKeyRecord", fillcolor="#81c169"]; // "struct" node
    "libsignal_protocol::sender_keys::SenderKeyRecord::add_sender_key_state" [label="pub(crate) fn|libsignal_protocol::sender_keys::SenderKeyRecord::add_sender_key_state", fillcolor="#f8c04c"]; // "fn" node
    "libsignal_protocol::sender_keys::SenderKeyRecord::as_protobuf" [label="pub(crate) fn|libsignal_protocol::sender_keys::SenderKeyRecord::as_protobuf", fillcolor="#f8c04c"]; // "fn" node
    "libsignal_protocol::sender_keys::SenderKeyRecord::chain_ids_for_logging" [label="pub(crate) fn|libsignal_protocol::sender_keys::SenderKeyRecord::chain_ids_for_logging", fillcolor="#f8c04c"]; // "fn" node
    "libsignal_protocol::sender_keys::SenderKeyRecord::clone" [label="pub(self) fn|libsignal_protocol::sender_keys::SenderKeyRecord::clone", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::sender_keys::SenderKeyRecord::deserialize" [label="pub fn|libsignal_protocol::sender_keys::SenderKeyRecord::deserialize", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::sender_keys::SenderKeyRecord::fmt" [label="pub(self) fn|libsignal_protocol::sender_keys::SenderKeyRecord::fmt", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::sender_keys::SenderKeyRecord::new_empty" [label="pub(crate) fn|libsignal_protocol::sender_keys::SenderKeyRecord::new_empty", fillcolor="#f8c04c"]; // "fn" node
    "libsignal_protocol::sender_keys::SenderKeyRecord::remove_state" [label="pub(self) fn|libsignal_protocol::sender_keys::SenderKeyRecord::remove_state", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::sender_keys::SenderKeyRecord::remove_states_with_chain_id" [label="pub(self) fn|libsignal_protocol::sender_keys::SenderKeyRecord::remove_states_with_chain_id", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::sender_keys::SenderKeyRecord::sender_key_state" [label="pub(crate) fn|libsignal_protocol::sender_keys::SenderKeyRecord::sender_key_state", fillcolor="#f8c04c"]; // "fn" node
    "libsignal_protocol::sender_keys::SenderKeyRecord::sender_key_state_for_chain_id" [label="pub(crate) fn|libsignal_protocol::sender_keys::SenderKeyRecord::sender_key_state_for_chain_id", fillcolor="#f8c04c"]; // "fn" node
    "libsignal_protocol::sender_keys::SenderKeyRecord::sender_key_state_mut" [label="pub(crate) fn|libsignal_protocol::sender_keys::SenderKeyRecord::sender_key_state_mut", fillcolor="#f8c04c"]; // "fn" node
    "libsignal_protocol::sender_keys::SenderKeyRecord::serialize" [label="pub fn|libsignal_protocol::sender_keys::SenderKeyRecord::serialize", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::sender_keys::SenderKeyState" [label="pub(crate) struct|libsignal_protocol::sender_keys::SenderKeyState", fillcolor="#f8c04c"]; // "struct" node
    "libsignal_protocol::sender_keys::SenderKeyState::add_sender_message_key" [label="pub(crate) fn|libsignal_protocol::sender_keys::SenderKeyState::add_sender_message_key", fillcolor="#f8c04c"]; // "fn" node
    "libsignal_protocol::sender_keys::SenderKeyState::as_protobuf" [label="pub(crate) fn|libsignal_protocol::sender_keys::SenderKeyState::as_protobuf", fillcolor="#f8c04c"]; // "fn" node
    "libsignal_protocol::sender_keys::SenderKeyState::chain_id" [label="pub(crate) fn|libsignal_protocol::sender_keys::SenderKeyState::chain_id", fillcolor="#f8c04c"]; // "fn" node
    "libsignal_protocol::sender_keys::SenderKeyState::clone" [label="pub(self) fn|libsignal_protocol::sender_keys::SenderKeyState::clone", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::sender_keys::SenderKeyState::fmt" [label="pub(self) fn|libsignal_protocol::sender_keys::SenderKeyState::fmt", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::sender_keys::SenderKeyState::from_protobuf" [label="pub(crate) fn|libsignal_protocol::sender_keys::SenderKeyState::from_protobuf", fillcolor="#f8c04c"]; // "fn" node
    "libsignal_protocol::sender_keys::SenderKeyState::message_version" [label="pub(crate) fn|libsignal_protocol::sender_keys::SenderKeyState::message_version", fillcolor="#f8c04c"]; // "fn" node
    "libsignal_protocol::sender_keys::SenderKeyState::new" [label="pub(crate) fn|libsignal_protocol::sender_keys::SenderKeyState::new", fillcolor="#f8c04c"]; // "fn" node
    "libsignal_protocol::sender_keys::SenderKeyState::remove_sender_message_key" [label="pub(crate) fn|libsignal_protocol::sender_keys::SenderKeyState::remove_sender_message_key", fillcolor="#f8c04c"]; // "fn" node
    "libsignal_protocol::sender_keys::SenderKeyState::sender_chain_key" [label="pub(crate) fn|libsignal_protocol::sender_keys::SenderKeyState::sender_chain_key", fillcolor="#f8c04c"]; // "fn" node
    "libsignal_protocol::sender_keys::SenderKeyState::set_sender_chain_key" [label="pub(crate) fn|libsignal_protocol::sender_keys::SenderKeyState::set_sender_chain_key", fillcolor="#f8c04c"]; // "fn" node
    "libsignal_protocol::sender_keys::SenderKeyState::signing_key_private" [label="pub(crate) fn|libsignal_protocol::sender_keys::SenderKeyState::signing_key_private", fillcolor="#f8c04c"]; // "fn" node
    "libsignal_protocol::sender_keys::SenderKeyState::signing_key_public" [label="pub(crate) fn|libsignal_protocol::sender_keys::SenderKeyState::signing_key_public", fillcolor="#f8c04c"]; // "fn" node
    "libsignal_protocol::sender_keys::SenderMessageKey" [label="pub(crate) struct|libsignal_protocol::sender_keys::SenderMessageKey", fillcolor="#f8c04c"]; // "struct" node
    "libsignal_protocol::sender_keys::SenderMessageKey::as_protobuf" [label="pub(crate) fn|libsignal_protocol::sender_keys::SenderMessageKey::as_protobuf", fillcolor="#f8c04c"]; // "fn" node
    "libsignal_protocol::sender_keys::SenderMessageKey::cipher_key" [label="pub(crate) fn|libsignal_protocol::sender_keys::SenderMessageKey::cipher_key", fillcolor="#f8c04c"]; // "fn" node
    "libsignal_protocol::sender_keys::SenderMessageKey::clone" [label="pub(self) fn|libsignal_protocol::sender_keys::SenderMessageKey::clone", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::sender_keys::SenderMessageKey::fmt" [label="pub(self) fn|libsignal_protocol::sender_keys::SenderMessageKey::fmt", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::sender_keys::SenderMessageKey::from_protobuf" [label="pub(crate) fn|libsignal_protocol::sender_keys::SenderMessageKey::from_protobuf", fillcolor="#f8c04c"]; // "fn" node
    "libsignal_protocol::sender_keys::SenderMessageKey::iteration" [label="pub(crate) fn|libsignal_protocol::sender_keys::SenderMessageKey::iteration", fillcolor="#f8c04c"]; // "fn" node
    "libsignal_protocol::sender_keys::SenderMessageKey::iv" [label="pub(crate) fn|libsignal_protocol::sender_keys::SenderMessageKey::iv", fillcolor="#f8c04c"]; // "fn" node
    "libsignal_protocol::sender_keys::SenderMessageKey::new" [label="pub(crate) fn|libsignal_protocol::sender_keys::SenderMessageKey::new", fillcolor="#f8c04c"]; // "fn" node
    "libsignal_protocol::session" [label="pub(crate) mod|libsignal_protocol::session", fillcolor="#f8c04c"]; // "mod" node
    "libsignal_protocol::session::PreKeysUsed" [label="pub struct|libsignal_protocol::session::PreKeysUsed", fillcolor="#81c169"]; // "struct" node
    "libsignal_protocol::session::PreKeysUsed::default" [label="pub(self) fn|libsignal_protocol::session::PreKeysUsed::default", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::session::process_prekey" [label="pub async fn|libsignal_protocol::session::process_prekey", fillcolor="#81c169"]; // "async fn" node
    "libsignal_protocol::session::process_prekey_bundle" [label="pub async fn|libsignal_protocol::session::process_prekey_bundle", fillcolor="#81c169"]; // "async fn" node
    "libsignal_protocol::session::process_prekey_impl" [label="pub(self) async fn|libsignal_protocol::session::process_prekey_impl", fillcolor="#db5367"]; // "async fn" node
    "libsignal_protocol::session_cipher" [label="pub(crate) mod|libsignal_protocol::session_cipher", fillcolor="#f8c04c"]; // "mod" node
    "libsignal_protocol::session_cipher::CurrentOrPrevious" [label="pub(self) enum|libsignal_protocol::session_cipher::CurrentOrPrevious", fillcolor="#db5367"]; // "enum" node
    "libsignal_protocol::session_cipher::CurrentOrPrevious::clone" [label="pub(self) fn|libsignal_protocol::session_cipher::CurrentOrPrevious::clone", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::session_cipher::CurrentOrPrevious::fmt" [label="pub(self) fn|libsignal_protocol::session_cipher::CurrentOrPrevious::fmt", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::session_cipher::create_decryption_failure_log" [label="pub(self) fn|libsignal_protocol::session_cipher::create_decryption_failure_log", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::session_cipher::decrypt_message_with_record" [label="pub(self) fn|libsignal_protocol::session_cipher::decrypt_message_with_record", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::session_cipher::decrypt_message_with_state" [label="pub(self) fn|libsignal_protocol::session_cipher::decrypt_message_with_state", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::session_cipher::get_or_create_chain_key" [label="pub(self) fn|libsignal_protocol::session_cipher::get_or_create_chain_key", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::session_cipher::get_or_create_message_key" [label="pub(self) fn|libsignal_protocol::session_cipher::get_or_create_message_key", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::session_cipher::message_decrypt" [label="pub async fn|libsignal_protocol::session_cipher::message_decrypt", fillcolor="#81c169"]; // "async fn" node
    "libsignal_protocol::session_cipher::message_decrypt_prekey" [label="pub async fn|libsignal_protocol::session_cipher::message_decrypt_prekey", fillcolor="#81c169"]; // "async fn" node
    "libsignal_protocol::session_cipher::message_decrypt_signal" [label="pub async fn|libsignal_protocol::session_cipher::message_decrypt_signal", fillcolor="#81c169"]; // "async fn" node
    "libsignal_protocol::session_cipher::message_encrypt" [label="pub async fn|libsignal_protocol::session_cipher::message_encrypt", fillcolor="#81c169"]; // "async fn" node
    "libsignal_protocol::state" [label="pub(crate) mod|libsignal_protocol::state", fillcolor="#f8c04c"]; // "mod" node
    "libsignal_protocol::state::bundle" [label="pub(self) mod|libsignal_protocol::state::bundle", fillcolor="#db5367"]; // "mod" node
    "libsignal_protocol::state::bundle::KyberPreKey" [label="pub(self) struct|libsignal_protocol::state::bundle::KyberPreKey", fillcolor="#db5367"]; // "struct" node
    "libsignal_protocol::state::bundle::KyberPreKey::clone" [label="pub(self) fn|libsignal_protocol::state::bundle::KyberPreKey::clone", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::state::bundle::KyberPreKey::new" [label="pub(self) fn|libsignal_protocol::state::bundle::KyberPreKey::new", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::state::bundle::PreKeyBundle" [label="pub struct|libsignal_protocol::state::bundle::PreKeyBundle", fillcolor="#81c169"]; // "struct" node
    "libsignal_protocol::state::bundle::PreKeyBundle::Error" [label="pub(self) type|libsignal_protocol::state::bundle::PreKeyBundle::Error", fillcolor="#db5367"]; // "type" node
    "libsignal_protocol::state::bundle::PreKeyBundle::clone" [label="pub(self) fn|libsignal_protocol::state::bundle::PreKeyBundle::clone", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::state::bundle::PreKeyBundle::device_id" [label="pub fn|libsignal_protocol::state::bundle::PreKeyBundle::device_id", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::state::bundle::PreKeyBundle::has_kyber_pre_key" [label="pub fn|libsignal_protocol::state::bundle::PreKeyBundle::has_kyber_pre_key", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::state::bundle::PreKeyBundle::identity_key" [label="pub fn|libsignal_protocol::state::bundle::PreKeyBundle::identity_key", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::state::bundle::PreKeyBundle::kyber_pre_key_id" [label="pub fn|libsignal_protocol::state::bundle::PreKeyBundle::kyber_pre_key_id", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::state::bundle::PreKeyBundle::kyber_pre_key_public" [label="pub fn|libsignal_protocol::state::bundle::PreKeyBundle::kyber_pre_key_public", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::state::bundle::PreKeyBundle::kyber_pre_key_signature" [label="pub fn|libsignal_protocol::state::bundle::PreKeyBundle::kyber_pre_key_signature", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::state::bundle::PreKeyBundle::modify" [label="pub fn|libsignal_protocol::state::bundle::PreKeyBundle::modify", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::state::bundle::PreKeyBundle::new" [label="pub fn|libsignal_protocol::state::bundle::PreKeyBundle::new", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::state::bundle::PreKeyBundle::pre_key_id" [label="pub fn|libsignal_protocol::state::bundle::PreKeyBundle::pre_key_id", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::state::bundle::PreKeyBundle::pre_key_public" [label="pub fn|libsignal_protocol::state::bundle::PreKeyBundle::pre_key_public", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::state::bundle::PreKeyBundle::registration_id" [label="pub fn|libsignal_protocol::state::bundle::PreKeyBundle::registration_id", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::state::bundle::PreKeyBundle::signed_pre_key_id" [label="pub fn|libsignal_protocol::state::bundle::PreKeyBundle::signed_pre_key_id", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::state::bundle::PreKeyBundle::signed_pre_key_public" [label="pub fn|libsignal_protocol::state::bundle::PreKeyBundle::signed_pre_key_public", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::state::bundle::PreKeyBundle::signed_pre_key_signature" [label="pub fn|libsignal_protocol::state::bundle::PreKeyBundle::signed_pre_key_signature", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::state::bundle::PreKeyBundle::try_from" [label="pub(self) fn|libsignal_protocol::state::bundle::PreKeyBundle::try_from", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::state::bundle::PreKeyBundle::with_kyber_pre_key" [label="pub fn|libsignal_protocol::state::bundle::PreKeyBundle::with_kyber_pre_key", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::state::bundle::PreKeyBundleContent" [label="pub struct|libsignal_protocol::state::bundle::PreKeyBundleContent", fillcolor="#81c169"]; // "struct" node
    "libsignal_protocol::state::bundle::PreKeyBundleContent::from" [label="pub(self) fn|libsignal_protocol::state::bundle::PreKeyBundleContent::from", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::state::bundle::SignedPreKey" [label="pub(self) struct|libsignal_protocol::state::bundle::SignedPreKey", fillcolor="#db5367"]; // "struct" node
    "libsignal_protocol::state::bundle::SignedPreKey::clone" [label="pub(self) fn|libsignal_protocol::state::bundle::SignedPreKey::clone", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::state::bundle::SignedPreKey::new" [label="pub(self) fn|libsignal_protocol::state::bundle::SignedPreKey::new", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::state::kyber_prekey" [label="pub(self) mod|libsignal_protocol::state::kyber_prekey", fillcolor="#db5367"]; // "mod" node
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyId" [label="pub struct|libsignal_protocol::state::kyber_prekey::KyberPreKeyId", fillcolor="#81c169"]; // "struct" node
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyId::clone" [label="pub(self) fn|libsignal_protocol::state::kyber_prekey::KyberPreKeyId::clone", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyId::cmp" [label="pub(self) fn|libsignal_protocol::state::kyber_prekey::KyberPreKeyId::cmp", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyId::eq" [label="pub(self) fn|libsignal_protocol::state::kyber_prekey::KyberPreKeyId::eq", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyId::fmt" [label="pub(self) fn|libsignal_protocol::state::kyber_prekey::KyberPreKeyId::fmt", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyId::fmt" [label="pub(self) fn|libsignal_protocol::state::kyber_prekey::KyberPreKeyId::fmt", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyId::hash" [label="pub(self) fn|libsignal_protocol::state::kyber_prekey::KyberPreKeyId::hash", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyId::partial_cmp" [label="pub(self) fn|libsignal_protocol::state::kyber_prekey::KyberPreKeyId::partial_cmp", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyRecord" [label="pub struct|libsignal_protocol::state::kyber_prekey::KyberPreKeyRecord", fillcolor="#81c169"]; // "struct" node
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyRecord::Id" [label="pub(self) type|libsignal_protocol::state::kyber_prekey::KyberPreKeyRecord::Id", fillcolor="#db5367"]; // "type" node
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyRecord::KeyPair" [label="pub(self) type|libsignal_protocol::state::kyber_prekey::KyberPreKeyRecord::KeyPair", fillcolor="#db5367"]; // "type" node
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyRecord::clone" [label="pub(self) fn|libsignal_protocol::state::kyber_prekey::KyberPreKeyRecord::clone", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyRecord::fmt" [label="pub(self) fn|libsignal_protocol::state::kyber_prekey::KyberPreKeyRecord::fmt", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyRecord::from_storage" [label="pub(self) fn|libsignal_protocol::state::kyber_prekey::KyberPreKeyRecord::from_storage", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyRecord::generate" [label="pub fn|libsignal_protocol::state::kyber_prekey::KyberPreKeyRecord::generate", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyRecord::get_storage" [label="pub(self) fn|libsignal_protocol::state::kyber_prekey::KyberPreKeyRecord::get_storage", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyRecord::secret_key" [label="pub fn|libsignal_protocol::state::kyber_prekey::KyberPreKeyRecord::secret_key", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::state::prekey" [label="pub(self) mod|libsignal_protocol::state::prekey", fillcolor="#db5367"]; // "mod" node
    "libsignal_protocol::state::prekey::PreKeyId" [label="pub struct|libsignal_protocol::state::prekey::PreKeyId", fillcolor="#81c169"]; // "struct" node
    "libsignal_protocol::state::prekey::PreKeyId::clone" [label="pub(self) fn|libsignal_protocol::state::prekey::PreKeyId::clone", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::state::prekey::PreKeyId::cmp" [label="pub(self) fn|libsignal_protocol::state::prekey::PreKeyId::cmp", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::state::prekey::PreKeyId::eq" [label="pub(self) fn|libsignal_protocol::state::prekey::PreKeyId::eq", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::state::prekey::PreKeyId::fmt" [label="pub(self) fn|libsignal_protocol::state::prekey::PreKeyId::fmt", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::state::prekey::PreKeyId::fmt" [label="pub(self) fn|libsignal_protocol::state::prekey::PreKeyId::fmt", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::state::prekey::PreKeyId::hash" [label="pub(self) fn|libsignal_protocol::state::prekey::PreKeyId::hash", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::state::prekey::PreKeyId::partial_cmp" [label="pub(self) fn|libsignal_protocol::state::prekey::PreKeyId::partial_cmp", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::state::prekey::PreKeyRecord" [label="pub struct|libsignal_protocol::state::prekey::PreKeyRecord", fillcolor="#81c169"]; // "struct" node
    "libsignal_protocol::state::prekey::PreKeyRecord::clone" [label="pub(self) fn|libsignal_protocol::state::prekey::PreKeyRecord::clone", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::state::prekey::PreKeyRecord::deserialize" [label="pub fn|libsignal_protocol::state::prekey::PreKeyRecord::deserialize", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::state::prekey::PreKeyRecord::fmt" [label="pub(self) fn|libsignal_protocol::state::prekey::PreKeyRecord::fmt", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::state::prekey::PreKeyRecord::id" [label="pub fn|libsignal_protocol::state::prekey::PreKeyRecord::id", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::state::prekey::PreKeyRecord::key_pair" [label="pub fn|libsignal_protocol::state::prekey::PreKeyRecord::key_pair", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::state::prekey::PreKeyRecord::new" [label="pub fn|libsignal_protocol::state::prekey::PreKeyRecord::new", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::state::prekey::PreKeyRecord::private_key" [label="pub fn|libsignal_protocol::state::prekey::PreKeyRecord::private_key", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::state::prekey::PreKeyRecord::public_key" [label="pub fn|libsignal_protocol::state::prekey::PreKeyRecord::public_key", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::state::prekey::PreKeyRecord::serialize" [label="pub fn|libsignal_protocol::state::prekey::PreKeyRecord::serialize", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::state::session" [label="pub(self) mod|libsignal_protocol::state::session", fillcolor="#db5367"]; // "mod" node
    "libsignal_protocol::state::session::InvalidSessionError" [label="pub(crate) struct|libsignal_protocol::state::session::InvalidSessionError", fillcolor="#f8c04c"]; // "struct" node
    "libsignal_protocol::state::session::InvalidSessionError::fmt" [label="pub(self) fn|libsignal_protocol::state::session::InvalidSessionError::fmt", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::state::session::InvalidSessionError::fmt" [label="pub(self) fn|libsignal_protocol::state::session::InvalidSessionError::fmt", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::state::session::SessionRecord" [label="pub struct|libsignal_protocol::state::session::SessionRecord", fillcolor="#81c169"]; // "struct" node
    "libsignal_protocol::state::session::SessionRecord::alice_base_key" [label="pub fn|libsignal_protocol::state::session::SessionRecord::alice_base_key", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::state::session::SessionRecord::archive_current_state" [label="pub fn|libsignal_protocol::state::session::SessionRecord::archive_current_state", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::state::session::SessionRecord::archive_current_state_inner" [label="pub(self) fn|libsignal_protocol::state::session::SessionRecord::archive_current_state_inner", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::state::session::SessionRecord::clone" [label="pub(self) fn|libsignal_protocol::state::session::SessionRecord::clone", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::state::session::SessionRecord::current_ratchet_key_matches" [label="pub fn|libsignal_protocol::state::session::SessionRecord::current_ratchet_key_matches", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::state::session::SessionRecord::deserialize" [label="pub fn|libsignal_protocol::state::session::SessionRecord::deserialize", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::state::session::SessionRecord::get_kyber_ciphertext" [label="pub fn|libsignal_protocol::state::session::SessionRecord::get_kyber_ciphertext", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::state::session::SessionRecord::get_receiver_chain_key_bytes" [label="pub fn|libsignal_protocol::state::session::SessionRecord::get_receiver_chain_key_bytes", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::state::session::SessionRecord::get_sender_chain_key_bytes" [label="pub fn|libsignal_protocol::state::session::SessionRecord::get_sender_chain_key_bytes", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::state::session::SessionRecord::has_session_state" [label="pub(crate) fn|libsignal_protocol::state::session::SessionRecord::has_session_state", fillcolor="#f8c04c"]; // "fn" node
    "libsignal_protocol::state::session::SessionRecord::has_usable_sender_chain" [label="pub fn|libsignal_protocol::state::session::SessionRecord::has_usable_sender_chain", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::state::session::SessionRecord::local_identity_key_bytes" [label="pub fn|libsignal_protocol::state::session::SessionRecord::local_identity_key_bytes", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::state::session::SessionRecord::local_registration_id" [label="pub fn|libsignal_protocol::state::session::SessionRecord::local_registration_id", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::state::session::SessionRecord::new" [label="pub(crate) fn|libsignal_protocol::state::session::SessionRecord::new", fillcolor="#f8c04c"]; // "fn" node
    "libsignal_protocol::state::session::SessionRecord::new_fresh" [label="pub fn|libsignal_protocol::state::session::SessionRecord::new_fresh", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::state::session::SessionRecord::previous_session_states" [label="pub(crate) fn|libsignal_protocol::state::session::SessionRecord::previous_session_states", fillcolor="#f8c04c"]; // "fn" node
    "libsignal_protocol::state::session::SessionRecord::promote_old_session" [label="pub(crate) fn|libsignal_protocol::state::session::SessionRecord::promote_old_session", fillcolor="#f8c04c"]; // "fn" node
    "libsignal_protocol::state::session::SessionRecord::promote_state" [label="pub(crate) fn|libsignal_protocol::state::session::SessionRecord::promote_state", fillcolor="#f8c04c"]; // "fn" node
    "libsignal_protocol::state::session::SessionRecord::remote_identity_key_bytes" [label="pub fn|libsignal_protocol::state::session::SessionRecord::remote_identity_key_bytes", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::state::session::SessionRecord::remote_registration_id" [label="pub fn|libsignal_protocol::state::session::SessionRecord::remote_registration_id", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::state::session::SessionRecord::serialize" [label="pub fn|libsignal_protocol::state::session::SessionRecord::serialize", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::state::session::SessionRecord::session_state" [label="pub(crate) fn|libsignal_protocol::state::session::SessionRecord::session_state", fillcolor="#f8c04c"]; // "fn" node
    "libsignal_protocol::state::session::SessionRecord::session_state_mut" [label="pub(crate) fn|libsignal_protocol::state::session::SessionRecord::session_state_mut", fillcolor="#f8c04c"]; // "fn" node
    "libsignal_protocol::state::session::SessionRecord::session_version" [label="pub fn|libsignal_protocol::state::session::SessionRecord::session_version", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::state::session::SessionRecord::set_session_state" [label="pub(crate) fn|libsignal_protocol::state::session::SessionRecord::set_session_state", fillcolor="#f8c04c"]; // "fn" node
    "libsignal_protocol::state::session::SessionState" [label="pub(crate) struct|libsignal_protocol::state::session::SessionState", fillcolor="#f8c04c"]; // "struct" node
    "libsignal_protocol::state::session::SessionState::add_receiver_chain" [label="pub(crate) fn|libsignal_protocol::state::session::SessionState::add_receiver_chain", fillcolor="#f8c04c"]; // "fn" node
    "libsignal_protocol::state::session::SessionState::alice_base_key" [label="pub(crate) fn|libsignal_protocol::state::session::SessionState::alice_base_key", fillcolor="#f8c04c"]; // "fn" node
    "libsignal_protocol::state::session::SessionState::all_receiver_chain_logging_info" [label="pub(crate) fn|libsignal_protocol::state::session::SessionState::all_receiver_chain_logging_info", fillcolor="#f8c04c"]; // "fn" node
    "libsignal_protocol::state::session::SessionState::clear_unacknowledged_pre_key_message" [label="pub(crate) fn|libsignal_protocol::state::session::SessionState::clear_unacknowledged_pre_key_message", fillcolor="#f8c04c"]; // "fn" node
    "libsignal_protocol::state::session::SessionState::clone" [label="pub(self) fn|libsignal_protocol::state::session::SessionState::clone", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::state::session::SessionState::fmt" [label="pub(self) fn|libsignal_protocol::state::session::SessionState::fmt", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::state::session::SessionState::from" [label="pub(self) fn|libsignal_protocol::state::session::SessionState::from", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::state::session::SessionState::from_session_structure" [label="pub(crate) fn|libsignal_protocol::state::session::SessionState::from_session_structure", fillcolor="#f8c04c"]; // "fn" node
    "libsignal_protocol::state::session::SessionState::get_kyber_ciphertext" [label="pub(crate) fn|libsignal_protocol::state::session::SessionState::get_kyber_ciphertext", fillcolor="#f8c04c"]; // "fn" node
    "libsignal_protocol::state::session::SessionState::get_message_keys" [label="pub(crate) fn|libsignal_protocol::state::session::SessionState::get_message_keys", fillcolor="#f8c04c"]; // "fn" node
    "libsignal_protocol::state::session::SessionState::get_receiver_chain" [label="pub(crate) fn|libsignal_protocol::state::session::SessionState::get_receiver_chain", fillcolor="#f8c04c"]; // "fn" node
    "libsignal_protocol::state::session::SessionState::get_receiver_chain_key" [label="pub(crate) fn|libsignal_protocol::state::session::SessionState::get_receiver_chain_key", fillcolor="#f8c04c"]; // "fn" node
    "libsignal_protocol::state::session::SessionState::get_sender_chain_key" [label="pub(crate) fn|libsignal_protocol::state::session::SessionState::get_sender_chain_key", fillcolor="#f8c04c"]; // "fn" node
    "libsignal_protocol::state::session::SessionState::get_sender_chain_key_bytes" [label="pub(crate) fn|libsignal_protocol::state::session::SessionState::get_sender_chain_key_bytes", fillcolor="#f8c04c"]; // "fn" node
    "libsignal_protocol::state::session::SessionState::has_usable_sender_chain" [label="pub fn|libsignal_protocol::state::session::SessionState::has_usable_sender_chain", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::state::session::SessionState::local_identity_key" [label="pub(crate) fn|libsignal_protocol::state::session::SessionState::local_identity_key", fillcolor="#f8c04c"]; // "fn" node
    "libsignal_protocol::state::session::SessionState::local_identity_key_bytes" [label="pub(crate) fn|libsignal_protocol::state::session::SessionState::local_identity_key_bytes", fillcolor="#f8c04c"]; // "fn" node
    "libsignal_protocol::state::session::SessionState::local_registration_id" [label="pub(crate) fn|libsignal_protocol::state::session::SessionState::local_registration_id", fillcolor="#f8c04c"]; // "fn" node
    "libsignal_protocol::state::session::SessionState::new" [label="pub(crate) fn|libsignal_protocol::state::session::SessionState::new", fillcolor="#f8c04c"]; // "fn" node
    "libsignal_protocol::state::session::SessionState::previous_counter" [label="pub(crate) fn|libsignal_protocol::state::session::SessionState::previous_counter", fillcolor="#f8c04c"]; // "fn" node
    "libsignal_protocol::state::session::SessionState::remote_identity_key" [label="pub(crate) fn|libsignal_protocol::state::session::SessionState::remote_identity_key", fillcolor="#f8c04c"]; // "fn" node
    "libsignal_protocol::state::session::SessionState::remote_identity_key_bytes" [label="pub(crate) fn|libsignal_protocol::state::session::SessionState::remote_identity_key_bytes", fillcolor="#f8c04c"]; // "fn" node
    "libsignal_protocol::state::session::SessionState::remote_registration_id" [label="pub(crate) fn|libsignal_protocol::state::session::SessionState::remote_registration_id", fillcolor="#f8c04c"]; // "fn" node
    "libsignal_protocol::state::session::SessionState::root_key" [label="pub(crate) fn|libsignal_protocol::state::session::SessionState::root_key", fillcolor="#f8c04c"]; // "fn" node
    "libsignal_protocol::state::session::SessionState::sender_ratchet_key" [label="pub(crate) fn|libsignal_protocol::state::session::SessionState::sender_ratchet_key", fillcolor="#f8c04c"]; // "fn" node
    "libsignal_protocol::state::session::SessionState::sender_ratchet_key_for_logging" [label="pub(crate) fn|libsignal_protocol::state::session::SessionState::sender_ratchet_key_for_logging", fillcolor="#f8c04c"]; // "fn" node
    "libsignal_protocol::state::session::SessionState::sender_ratchet_private_key" [label="pub(crate) fn|libsignal_protocol::state::session::SessionState::sender_ratchet_private_key", fillcolor="#f8c04c"]; // "fn" node
    "libsignal_protocol::state::session::SessionState::session_version" [label="pub(crate) fn|libsignal_protocol::state::session::SessionState::session_version", fillcolor="#f8c04c"]; // "fn" node
    "libsignal_protocol::state::session::SessionState::session_with_self" [label="pub(crate) fn|libsignal_protocol::state::session::SessionState::session_with_self", fillcolor="#f8c04c"]; // "fn" node
    "libsignal_protocol::state::session::SessionState::set_kyber_ciphertext" [label="pub(crate) fn|libsignal_protocol::state::session::SessionState::set_kyber_ciphertext", fillcolor="#f8c04c"]; // "fn" node
    "libsignal_protocol::state::session::SessionState::set_local_registration_id" [label="pub(crate) fn|libsignal_protocol::state::session::SessionState::set_local_registration_id", fillcolor="#f8c04c"]; // "fn" node
    "libsignal_protocol::state::session::SessionState::set_message_keys" [label="pub(crate) fn|libsignal_protocol::state::session::SessionState::set_message_keys", fillcolor="#f8c04c"]; // "fn" node
    "libsignal_protocol::state::session::SessionState::set_previous_counter" [label="pub(crate) fn|libsignal_protocol::state::session::SessionState::set_previous_counter", fillcolor="#f8c04c"]; // "fn" node
    "libsignal_protocol::state::session::SessionState::set_receiver_chain_key" [label="pub(crate) fn|libsignal_protocol::state::session::SessionState::set_receiver_chain_key", fillcolor="#f8c04c"]; // "fn" node
    "libsignal_protocol::state::session::SessionState::set_remote_registration_id" [label="pub(crate) fn|libsignal_protocol::state::session::SessionState::set_remote_registration_id", fillcolor="#f8c04c"]; // "fn" node
    "libsignal_protocol::state::session::SessionState::set_root_key" [label="pub(crate) fn|libsignal_protocol::state::session::SessionState::set_root_key", fillcolor="#f8c04c"]; // "fn" node
    "libsignal_protocol::state::session::SessionState::set_sender_chain" [label="pub(crate) fn|libsignal_protocol::state::session::SessionState::set_sender_chain", fillcolor="#f8c04c"]; // "fn" node
    "libsignal_protocol::state::session::SessionState::set_sender_chain_key" [label="pub(crate) fn|libsignal_protocol::state::session::SessionState::set_sender_chain_key", fillcolor="#f8c04c"]; // "fn" node
    "libsignal_protocol::state::session::SessionState::set_unacknowledged_kyber_pre_key_id" [label="pub(crate) fn|libsignal_protocol::state::session::SessionState::set_unacknowledged_kyber_pre_key_id", fillcolor="#f8c04c"]; // "fn" node
    "libsignal_protocol::state::session::SessionState::set_unacknowledged_pre_key_message" [label="pub(crate) fn|libsignal_protocol::state::session::SessionState::set_unacknowledged_pre_key_message", fillcolor="#f8c04c"]; // "fn" node
    "libsignal_protocol::state::session::SessionState::unacknowledged_pre_key_message_items" [label="pub(crate) fn|libsignal_protocol::state::session::SessionState::unacknowledged_pre_key_message_items", fillcolor="#f8c04c"]; // "fn" node
    "libsignal_protocol::state::session::SessionState::with_receiver_chain" [label="pub(crate) fn|libsignal_protocol::state::session::SessionState::with_receiver_chain", fillcolor="#f8c04c"]; // "fn" node
    "libsignal_protocol::state::session::SessionState::with_sender_chain" [label="pub(crate) fn|libsignal_protocol::state::session::SessionState::with_sender_chain", fillcolor="#f8c04c"]; // "fn" node
    "libsignal_protocol::state::session::UnacknowledgedPreKeyMessageItems" [label="pub(crate) struct|libsignal_protocol::state::session::UnacknowledgedPreKeyMessageItems", fillcolor="#f8c04c"]; // "struct" node
    "libsignal_protocol::state::session::UnacknowledgedPreKeyMessageItems::base_key" [label="pub(crate) fn|libsignal_protocol::state::session::UnacknowledgedPreKeyMessageItems::base_key", fillcolor="#f8c04c"]; // "fn" node
    "libsignal_protocol::state::session::UnacknowledgedPreKeyMessageItems::clone" [label="pub(self) fn|libsignal_protocol::state::session::UnacknowledgedPreKeyMessageItems::clone", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::state::session::UnacknowledgedPreKeyMessageItems::fmt" [label="pub(self) fn|libsignal_protocol::state::session::UnacknowledgedPreKeyMessageItems::fmt", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::state::session::UnacknowledgedPreKeyMessageItems::kyber_ciphertext" [label="pub(crate) fn|libsignal_protocol::state::session::UnacknowledgedPreKeyMessageItems::kyber_ciphertext", fillcolor="#f8c04c"]; // "fn" node
    "libsignal_protocol::state::session::UnacknowledgedPreKeyMessageItems::kyber_pre_key_id" [label="pub(crate) fn|libsignal_protocol::state::session::UnacknowledgedPreKeyMessageItems::kyber_pre_key_id", fillcolor="#f8c04c"]; // "fn" node
    "libsignal_protocol::state::session::UnacknowledgedPreKeyMessageItems::new" [label="pub(self) fn|libsignal_protocol::state::session::UnacknowledgedPreKeyMessageItems::new", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::state::session::UnacknowledgedPreKeyMessageItems::pre_key_id" [label="pub(crate) fn|libsignal_protocol::state::session::UnacknowledgedPreKeyMessageItems::pre_key_id", fillcolor="#f8c04c"]; // "fn" node
    "libsignal_protocol::state::session::UnacknowledgedPreKeyMessageItems::signed_pre_key_id" [label="pub(crate) fn|libsignal_protocol::state::session::UnacknowledgedPreKeyMessageItems::signed_pre_key_id", fillcolor="#f8c04c"]; // "fn" node
    "libsignal_protocol::state::session::UnacknowledgedPreKeyMessageItems::timestamp" [label="pub(crate) fn|libsignal_protocol::state::session::UnacknowledgedPreKeyMessageItems::timestamp", fillcolor="#f8c04c"]; // "fn" node
    "libsignal_protocol::state::signed_prekey" [label="pub(self) mod|libsignal_protocol::state::signed_prekey", fillcolor="#db5367"]; // "mod" node
    "libsignal_protocol::state::signed_prekey::GenericSignedPreKey" [label="pub trait|libsignal_protocol::state::signed_prekey::GenericSignedPreKey", fillcolor="#81c169"]; // "trait" node
    "libsignal_protocol::state::signed_prekey::KeyPairSerde" [label="pub trait|libsignal_protocol::state::signed_prekey::KeyPairSerde", fillcolor="#81c169"]; // "trait" node
    "libsignal_protocol::state::signed_prekey::KeySerde" [label="pub trait|libsignal_protocol::state::signed_prekey::KeySerde", fillcolor="#81c169"]; // "trait" node
    "libsignal_protocol::state::signed_prekey::SignedPreKeyId" [label="pub struct|libsignal_protocol::state::signed_prekey::SignedPreKeyId", fillcolor="#81c169"]; // "struct" node
    "libsignal_protocol::state::signed_prekey::SignedPreKeyId::clone" [label="pub(self) fn|libsignal_protocol::state::signed_prekey::SignedPreKeyId::clone", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::state::signed_prekey::SignedPreKeyId::cmp" [label="pub(self) fn|libsignal_protocol::state::signed_prekey::SignedPreKeyId::cmp", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::state::signed_prekey::SignedPreKeyId::eq" [label="pub(self) fn|libsignal_protocol::state::signed_prekey::SignedPreKeyId::eq", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::state::signed_prekey::SignedPreKeyId::fmt" [label="pub(self) fn|libsignal_protocol::state::signed_prekey::SignedPreKeyId::fmt", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::state::signed_prekey::SignedPreKeyId::fmt" [label="pub(self) fn|libsignal_protocol::state::signed_prekey::SignedPreKeyId::fmt", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::state::signed_prekey::SignedPreKeyId::hash" [label="pub(self) fn|libsignal_protocol::state::signed_prekey::SignedPreKeyId::hash", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::state::signed_prekey::SignedPreKeyId::partial_cmp" [label="pub(self) fn|libsignal_protocol::state::signed_prekey::SignedPreKeyId::partial_cmp", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::state::signed_prekey::SignedPreKeyRecord" [label="pub struct|libsignal_protocol::state::signed_prekey::SignedPreKeyRecord", fillcolor="#81c169"]; // "struct" node
    "libsignal_protocol::state::signed_prekey::SignedPreKeyRecord::Id" [label="pub(self) type|libsignal_protocol::state::signed_prekey::SignedPreKeyRecord::Id", fillcolor="#db5367"]; // "type" node
    "libsignal_protocol::state::signed_prekey::SignedPreKeyRecord::KeyPair" [label="pub(self) type|libsignal_protocol::state::signed_prekey::SignedPreKeyRecord::KeyPair", fillcolor="#db5367"]; // "type" node
    "libsignal_protocol::state::signed_prekey::SignedPreKeyRecord::clone" [label="pub(self) fn|libsignal_protocol::state::signed_prekey::SignedPreKeyRecord::clone", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::state::signed_prekey::SignedPreKeyRecord::fmt" [label="pub(self) fn|libsignal_protocol::state::signed_prekey::SignedPreKeyRecord::fmt", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::state::signed_prekey::SignedPreKeyRecord::from_storage" [label="pub(self) fn|libsignal_protocol::state::signed_prekey::SignedPreKeyRecord::from_storage", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::state::signed_prekey::SignedPreKeyRecord::get_storage" [label="pub(self) fn|libsignal_protocol::state::signed_prekey::SignedPreKeyRecord::get_storage", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::state::signed_prekey::SignedPreKeyRecord::private_key" [label="pub fn|libsignal_protocol::state::signed_prekey::SignedPreKeyRecord::private_key", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::storage" [label="pub(crate) mod|libsignal_protocol::storage", fillcolor="#f8c04c"]; // "mod" node
    "libsignal_protocol::storage::inmem" [label="pub(self) mod|libsignal_protocol::storage::inmem", fillcolor="#db5367"]; // "mod" node
    "libsignal_protocol::storage::inmem::InMemIdentityKeyStore" [label="pub struct|libsignal_protocol::storage::inmem::InMemIdentityKeyStore", fillcolor="#81c169"]; // "struct" node
    "libsignal_protocol::storage::inmem::InMemIdentityKeyStore::clone" [label="pub(self) fn|libsignal_protocol::storage::inmem::InMemIdentityKeyStore::clone", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::storage::inmem::InMemIdentityKeyStore::get_identity" [label="pub(self) async fn|libsignal_protocol::storage::inmem::InMemIdentityKeyStore::get_identity", fillcolor="#db5367"]; // "async fn" node
    "libsignal_protocol::storage::inmem::InMemIdentityKeyStore::get_identity_key_pair" [label="pub(self) async fn|libsignal_protocol::storage::inmem::InMemIdentityKeyStore::get_identity_key_pair", fillcolor="#db5367"]; // "async fn" node
    "libsignal_protocol::storage::inmem::InMemIdentityKeyStore::get_local_registration_id" [label="pub(self) async fn|libsignal_protocol::storage::inmem::InMemIdentityKeyStore::get_local_registration_id", fillcolor="#db5367"]; // "async fn" node
    "libsignal_protocol::storage::inmem::InMemIdentityKeyStore::is_trusted_identity" [label="pub(self) async fn|libsignal_protocol::storage::inmem::InMemIdentityKeyStore::is_trusted_identity", fillcolor="#db5367"]; // "async fn" node
    "libsignal_protocol::storage::inmem::InMemIdentityKeyStore::new" [label="pub fn|libsignal_protocol::storage::inmem::InMemIdentityKeyStore::new", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::storage::inmem::InMemIdentityKeyStore::reset" [label="pub fn|libsignal_protocol::storage::inmem::InMemIdentityKeyStore::reset", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::storage::inmem::InMemIdentityKeyStore::save_identity" [label="pub(self) async fn|libsignal_protocol::storage::inmem::InMemIdentityKeyStore::save_identity", fillcolor="#db5367"]; // "async fn" node
    "libsignal_protocol::storage::inmem::InMemKyberPreKeyStore" [label="pub struct|libsignal_protocol::storage::inmem::InMemKyberPreKeyStore", fillcolor="#81c169"]; // "struct" node
    "libsignal_protocol::storage::inmem::InMemKyberPreKeyStore::all_kyber_pre_key_ids" [label="pub fn|libsignal_protocol::storage::inmem::InMemKyberPreKeyStore::all_kyber_pre_key_ids", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::storage::inmem::InMemKyberPreKeyStore::clone" [label="pub(self) fn|libsignal_protocol::storage::inmem::InMemKyberPreKeyStore::clone", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::storage::inmem::InMemKyberPreKeyStore::default" [label="pub(self) fn|libsignal_protocol::storage::inmem::InMemKyberPreKeyStore::default", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::storage::inmem::InMemKyberPreKeyStore::get_kyber_pre_key" [label="pub(self) async fn|libsignal_protocol::storage::inmem::InMemKyberPreKeyStore::get_kyber_pre_key", fillcolor="#db5367"]; // "async fn" node
    "libsignal_protocol::storage::inmem::InMemKyberPreKeyStore::mark_kyber_pre_key_used" [label="pub(self) async fn|libsignal_protocol::storage::inmem::InMemKyberPreKeyStore::mark_kyber_pre_key_used", fillcolor="#db5367"]; // "async fn" node
    "libsignal_protocol::storage::inmem::InMemKyberPreKeyStore::new" [label="pub fn|libsignal_protocol::storage::inmem::InMemKyberPreKeyStore::new", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::storage::inmem::InMemKyberPreKeyStore::save_kyber_pre_key" [label="pub(self) async fn|libsignal_protocol::storage::inmem::InMemKyberPreKeyStore::save_kyber_pre_key", fillcolor="#db5367"]; // "async fn" node
    "libsignal_protocol::storage::inmem::InMemPreKeyStore" [label="pub struct|libsignal_protocol::storage::inmem::InMemPreKeyStore", fillcolor="#81c169"]; // "struct" node
    "libsignal_protocol::storage::inmem::InMemPreKeyStore::all_pre_key_ids" [label="pub fn|libsignal_protocol::storage::inmem::InMemPreKeyStore::all_pre_key_ids", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::storage::inmem::InMemPreKeyStore::clone" [label="pub(self) fn|libsignal_protocol::storage::inmem::InMemPreKeyStore::clone", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::storage::inmem::InMemPreKeyStore::default" [label="pub(self) fn|libsignal_protocol::storage::inmem::InMemPreKeyStore::default", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::storage::inmem::InMemPreKeyStore::get_pre_key" [label="pub(self) async fn|libsignal_protocol::storage::inmem::InMemPreKeyStore::get_pre_key", fillcolor="#db5367"]; // "async fn" node
    "libsignal_protocol::storage::inmem::InMemPreKeyStore::new" [label="pub fn|libsignal_protocol::storage::inmem::InMemPreKeyStore::new", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::storage::inmem::InMemPreKeyStore::remove_pre_key" [label="pub(self) async fn|libsignal_protocol::storage::inmem::InMemPreKeyStore::remove_pre_key", fillcolor="#db5367"]; // "async fn" node
    "libsignal_protocol::storage::inmem::InMemPreKeyStore::save_pre_key" [label="pub(self) async fn|libsignal_protocol::storage::inmem::InMemPreKeyStore::save_pre_key", fillcolor="#db5367"]; // "async fn" node
    "libsignal_protocol::storage::inmem::InMemSenderKeyStore" [label="pub struct|libsignal_protocol::storage::inmem::InMemSenderKeyStore", fillcolor="#81c169"]; // "struct" node
    "libsignal_protocol::storage::inmem::InMemSenderKeyStore::clone" [label="pub(self) fn|libsignal_protocol::storage::inmem::InMemSenderKeyStore::clone", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::storage::inmem::InMemSenderKeyStore::default" [label="pub(self) fn|libsignal_protocol::storage::inmem::InMemSenderKeyStore::default", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::storage::inmem::InMemSenderKeyStore::load_sender_key" [label="pub(self) async fn|libsignal_protocol::storage::inmem::InMemSenderKeyStore::load_sender_key", fillcolor="#db5367"]; // "async fn" node
    "libsignal_protocol::storage::inmem::InMemSenderKeyStore::new" [label="pub fn|libsignal_protocol::storage::inmem::InMemSenderKeyStore::new", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::storage::inmem::InMemSenderKeyStore::store_sender_key" [label="pub(self) async fn|libsignal_protocol::storage::inmem::InMemSenderKeyStore::store_sender_key", fillcolor="#db5367"]; // "async fn" node
    "libsignal_protocol::storage::inmem::InMemSessionStore" [label="pub struct|libsignal_protocol::storage::inmem::InMemSessionStore", fillcolor="#81c169"]; // "struct" node
    "libsignal_protocol::storage::inmem::InMemSessionStore::clone" [label="pub(self) fn|libsignal_protocol::storage::inmem::InMemSessionStore::clone", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::storage::inmem::InMemSessionStore::default" [label="pub(self) fn|libsignal_protocol::storage::inmem::InMemSessionStore::default", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::storage::inmem::InMemSessionStore::load_existing_sessions" [label="pub fn|libsignal_protocol::storage::inmem::InMemSessionStore::load_existing_sessions", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::storage::inmem::InMemSessionStore::load_session" [label="pub(self) async fn|libsignal_protocol::storage::inmem::InMemSessionStore::load_session", fillcolor="#db5367"]; // "async fn" node
    "libsignal_protocol::storage::inmem::InMemSessionStore::new" [label="pub fn|libsignal_protocol::storage::inmem::InMemSessionStore::new", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::storage::inmem::InMemSessionStore::store_session" [label="pub(self) async fn|libsignal_protocol::storage::inmem::InMemSessionStore::store_session", fillcolor="#db5367"]; // "async fn" node
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore" [label="pub struct|libsignal_protocol::storage::inmem::InMemSignalProtocolStore", fillcolor="#81c169"]; // "struct" node
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::all_kyber_pre_key_ids" [label="pub fn|libsignal_protocol::storage::inmem::InMemSignalProtocolStore::all_kyber_pre_key_ids", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::all_pre_key_ids" [label="pub fn|libsignal_protocol::storage::inmem::InMemSignalProtocolStore::all_pre_key_ids", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::all_signed_pre_key_ids" [label="pub fn|libsignal_protocol::storage::inmem::InMemSignalProtocolStore::all_signed_pre_key_ids", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::clone" [label="pub(self) fn|libsignal_protocol::storage::inmem::InMemSignalProtocolStore::clone", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::get_identity" [label="pub(self) async fn|libsignal_protocol::storage::inmem::InMemSignalProtocolStore::get_identity", fillcolor="#db5367"]; // "async fn" node
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::get_identity_key_pair" [label="pub(self) async fn|libsignal_protocol::storage::inmem::InMemSignalProtocolStore::get_identity_key_pair", fillcolor="#db5367"]; // "async fn" node
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::get_kyber_pre_key" [label="pub(self) async fn|libsignal_protocol::storage::inmem::InMemSignalProtocolStore::get_kyber_pre_key", fillcolor="#db5367"]; // "async fn" node
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::get_local_registration_id" [label="pub(self) async fn|libsignal_protocol::storage::inmem::InMemSignalProtocolStore::get_local_registration_id", fillcolor="#db5367"]; // "async fn" node
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::get_pre_key" [label="pub(self) async fn|libsignal_protocol::storage::inmem::InMemSignalProtocolStore::get_pre_key", fillcolor="#db5367"]; // "async fn" node
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::get_signed_pre_key" [label="pub(self) async fn|libsignal_protocol::storage::inmem::InMemSignalProtocolStore::get_signed_pre_key", fillcolor="#db5367"]; // "async fn" node
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::is_trusted_identity" [label="pub(self) async fn|libsignal_protocol::storage::inmem::InMemSignalProtocolStore::is_trusted_identity", fillcolor="#db5367"]; // "async fn" node
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::load_sender_key" [label="pub(self) async fn|libsignal_protocol::storage::inmem::InMemSignalProtocolStore::load_sender_key", fillcolor="#db5367"]; // "async fn" node
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::load_session" [label="pub(self) async fn|libsignal_protocol::storage::inmem::InMemSignalProtocolStore::load_session", fillcolor="#db5367"]; // "async fn" node
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::mark_kyber_pre_key_used" [label="pub(self) async fn|libsignal_protocol::storage::inmem::InMemSignalProtocolStore::mark_kyber_pre_key_used", fillcolor="#db5367"]; // "async fn" node
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::new" [label="pub fn|libsignal_protocol::storage::inmem::InMemSignalProtocolStore::new", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::remove_pre_key" [label="pub(self) async fn|libsignal_protocol::storage::inmem::InMemSignalProtocolStore::remove_pre_key", fillcolor="#db5367"]; // "async fn" node
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::save_identity" [label="pub(self) async fn|libsignal_protocol::storage::inmem::InMemSignalProtocolStore::save_identity", fillcolor="#db5367"]; // "async fn" node
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::save_kyber_pre_key" [label="pub(self) async fn|libsignal_protocol::storage::inmem::InMemSignalProtocolStore::save_kyber_pre_key", fillcolor="#db5367"]; // "async fn" node
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::save_pre_key" [label="pub(self) async fn|libsignal_protocol::storage::inmem::InMemSignalProtocolStore::save_pre_key", fillcolor="#db5367"]; // "async fn" node
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::save_signed_pre_key" [label="pub(self) async fn|libsignal_protocol::storage::inmem::InMemSignalProtocolStore::save_signed_pre_key", fillcolor="#db5367"]; // "async fn" node
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::store_sender_key" [label="pub(self) async fn|libsignal_protocol::storage::inmem::InMemSignalProtocolStore::store_sender_key", fillcolor="#db5367"]; // "async fn" node
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::store_session" [label="pub(self) async fn|libsignal_protocol::storage::inmem::InMemSignalProtocolStore::store_session", fillcolor="#db5367"]; // "async fn" node
    "libsignal_protocol::storage::inmem::InMemSignedPreKeyStore" [label="pub struct|libsignal_protocol::storage::inmem::InMemSignedPreKeyStore", fillcolor="#81c169"]; // "struct" node
    "libsignal_protocol::storage::inmem::InMemSignedPreKeyStore::all_signed_pre_key_ids" [label="pub fn|libsignal_protocol::storage::inmem::InMemSignedPreKeyStore::all_signed_pre_key_ids", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::storage::inmem::InMemSignedPreKeyStore::clone" [label="pub(self) fn|libsignal_protocol::storage::inmem::InMemSignedPreKeyStore::clone", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::storage::inmem::InMemSignedPreKeyStore::default" [label="pub(self) fn|libsignal_protocol::storage::inmem::InMemSignedPreKeyStore::default", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::storage::inmem::InMemSignedPreKeyStore::get_signed_pre_key" [label="pub(self) async fn|libsignal_protocol::storage::inmem::InMemSignedPreKeyStore::get_signed_pre_key", fillcolor="#db5367"]; // "async fn" node
    "libsignal_protocol::storage::inmem::InMemSignedPreKeyStore::new" [label="pub fn|libsignal_protocol::storage::inmem::InMemSignedPreKeyStore::new", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::storage::inmem::InMemSignedPreKeyStore::save_signed_pre_key" [label="pub(self) async fn|libsignal_protocol::storage::inmem::InMemSignedPreKeyStore::save_signed_pre_key", fillcolor="#db5367"]; // "async fn" node
    "libsignal_protocol::storage::traits" [label="pub(self) mod|libsignal_protocol::storage::traits", fillcolor="#db5367"]; // "mod" node
    "libsignal_protocol::storage::traits::Direction" [label="pub enum|libsignal_protocol::storage::traits::Direction", fillcolor="#81c169"]; // "enum" node
    "libsignal_protocol::storage::traits::Direction::clone" [label="pub(self) fn|libsignal_protocol::storage::traits::Direction::clone", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::storage::traits::Direction::eq" [label="pub(self) fn|libsignal_protocol::storage::traits::Direction::eq", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::storage::traits::Direction::fmt" [label="pub(self) fn|libsignal_protocol::storage::traits::Direction::fmt", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::storage::traits::IdentityKeyStore" [label="pub trait|libsignal_protocol::storage::traits::IdentityKeyStore", fillcolor="#81c169"]; // "trait" node
    "libsignal_protocol::storage::traits::KyberPreKeyStore" [label="pub trait|libsignal_protocol::storage::traits::KyberPreKeyStore", fillcolor="#81c169"]; // "trait" node
    "libsignal_protocol::storage::traits::PreKeyStore" [label="pub trait|libsignal_protocol::storage::traits::PreKeyStore", fillcolor="#81c169"]; // "trait" node
    "libsignal_protocol::storage::traits::ProtocolStore" [label="pub trait|libsignal_protocol::storage::traits::ProtocolStore", fillcolor="#81c169"]; // "trait" node
    "libsignal_protocol::storage::traits::SenderKeyStore" [label="pub trait|libsignal_protocol::storage::traits::SenderKeyStore", fillcolor="#81c169"]; // "trait" node
    "libsignal_protocol::storage::traits::SessionStore" [label="pub trait|libsignal_protocol::storage::traits::SessionStore", fillcolor="#81c169"]; // "trait" node
    "libsignal_protocol::storage::traits::SignedPreKeyStore" [label="pub trait|libsignal_protocol::storage::traits::SignedPreKeyStore", fillcolor="#81c169"]; // "trait" node
    "libsignal_protocol::time::SystemTime::from" [label="pub(self) fn|libsignal_protocol::time::SystemTime::from", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::timestamp" [label="pub(crate) mod|libsignal_protocol::timestamp", fillcolor="#f8c04c"]; // "mod" node
    "libsignal_protocol::timestamp::Timestamp" [label="pub struct|libsignal_protocol::timestamp::Timestamp", fillcolor="#81c169"]; // "struct" node
    "libsignal_protocol::timestamp::Timestamp::add_millis" [label="pub fn|libsignal_protocol::timestamp::Timestamp::add_millis", fillcolor="#81c169"]; // "fn" node
    "libsignal_protocol::timestamp::Timestamp::clone" [label="pub(self) fn|libsignal_protocol::timestamp::Timestamp::clone", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::timestamp::Timestamp::cmp" [label="pub(self) fn|libsignal_protocol::timestamp::Timestamp::cmp", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::timestamp::Timestamp::epoch_millis" [label="pub const fn|libsignal_protocol::timestamp::Timestamp::epoch_millis", fillcolor="#81c169"]; // "const fn" node
    "libsignal_protocol::timestamp::Timestamp::eq" [label="pub(self) fn|libsignal_protocol::timestamp::Timestamp::eq", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::timestamp::Timestamp::fmt" [label="pub(self) fn|libsignal_protocol::timestamp::Timestamp::fmt", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::timestamp::Timestamp::from_epoch_millis" [label="pub const fn|libsignal_protocol::timestamp::Timestamp::from_epoch_millis", fillcolor="#81c169"]; // "const fn" node
    "libsignal_protocol::timestamp::Timestamp::hash" [label="pub(self) fn|libsignal_protocol::timestamp::Timestamp::hash", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::timestamp::Timestamp::partial_cmp" [label="pub(self) fn|libsignal_protocol::timestamp::Timestamp::partial_cmp", fillcolor="#db5367"]; // "fn" node
    "libsignal_protocol::timestamp::Timestamp::sub_millis" [label="pub fn|libsignal_protocol::timestamp::Timestamp::sub_millis", fillcolor="#81c169"]; // "fn" node
    "log::Level" [label="external enum|log::Level", fillcolor="#81c169"]; // "enum" node
    "log::LevelFilter" [label="external enum|log::LevelFilter", fillcolor="#81c169"]; // "enum" node
    "pqcrypto_kyber::kyber1024::Ciphertext" [label="external struct|pqcrypto_kyber::kyber1024::Ciphertext", fillcolor="#81c169"]; // "struct" node
    "pqcrypto_kyber::kyber1024::PublicKey" [label="external struct|pqcrypto_kyber::kyber1024::PublicKey", fillcolor="#81c169"]; // "struct" node
    "pqcrypto_kyber::kyber1024::SecretKey" [label="external struct|pqcrypto_kyber::kyber1024::SecretKey", fillcolor="#81c169"]; // "struct" node
    "pqcrypto_kyber::kyber1024::SharedSecret" [label="external struct|pqcrypto_kyber::kyber1024::SharedSecret", fillcolor="#81c169"]; // "struct" node
    "pqcrypto_traits::Error" [label="external enum|pqcrypto_traits::Error", fillcolor="#81c169"]; // "enum" node
    "pqcrypto_traits::kem::Ciphertext" [label="external trait|pqcrypto_traits::kem::Ciphertext", fillcolor="#81c169"]; // "trait" node
    "pqcrypto_traits::kem::PublicKey" [label="external trait|pqcrypto_traits::kem::PublicKey", fillcolor="#81c169"]; // "trait" node
    "pqcrypto_traits::kem::SecretKey" [label="external trait|pqcrypto_traits::kem::SecretKey", fillcolor="#81c169"]; // "trait" node
    "pqcrypto_traits::kem::SharedSecret" [label="external trait|pqcrypto_traits::kem::SharedSecret", fillcolor="#81c169"]; // "trait" node
    "prost::error::EncodeError" [label="external struct|prost::error::EncodeError", fillcolor="#81c169"]; // "struct" node
    "prost::message::Message" [label="external trait|prost::message::Message", fillcolor="#81c169"]; // "trait" node
    "rand::rng::Rng" [label="external trait|rand::rng::Rng", fillcolor="#81c169"]; // "trait" node
    "rand_core::CryptoRng" [label="external trait|rand_core::CryptoRng", fillcolor="#81c169"]; // "trait" node
    "rand_core::os::OsRng" [label="external struct|rand_core::os::OsRng", fillcolor="#81c169"]; // "struct" node
    "rayon_core::scope::Scope" [label="external struct|rayon_core::scope::Scope", fillcolor="#81c169"]; // "struct" node
    "serde::de::Deserialize" [label="external trait|serde::de::Deserialize", fillcolor="#81c169"]; // "trait" node
    "serde::ser::Serialize" [label="external trait|serde::ser::Serialize", fillcolor="#81c169"]; // "trait" node
    "sha2::OidSha256" [label="external struct|sha2::OidSha256", fillcolor="#81c169"]; // "struct" node
    "sha2::OidSha512" [label="external struct|sha2::OidSha512", fillcolor="#81c169"]; // "struct" node
    "sha2::Sha256" [label="external type|sha2::Sha256", fillcolor="#81c169"]; // "type" node
    "sha2::Sha512" [label="external type|sha2::Sha512", fillcolor="#81c169"]; // "type" node
    "sha2::core_api::Sha256VarCore" [label="external struct|sha2::core_api::Sha256VarCore", fillcolor="#81c169"]; // "struct" node
    "sha2::core_api::Sha512VarCore" [label="external struct|sha2::core_api::Sha512VarCore", fillcolor="#81c169"]; // "struct" node
    "signal_crypto::aes_cbc::DecryptionError" [label="external enum|signal_crypto::aes_cbc::DecryptionError", fillcolor="#81c169"]; // "enum" node
    "signal_crypto::aes_cbc::EncryptionError" [label="external enum|signal_crypto::aes_cbc::EncryptionError", fillcolor="#81c169"]; // "enum" node
    "std::collections::hash::map::HashMap" [label="external struct|std::collections::hash::map::HashMap", fillcolor="#81c169"]; // "struct" node
    "std::collections::hash::map::Keys" [label="external struct|std::collections::hash::map::Keys", fillcolor="#81c169"]; // "struct" node
    "std::hash::random::RandomState" [label="external struct|std::hash::random::RandomState", fillcolor="#81c169"]; // "struct" node
    "std::io::error::Error" [label="external struct|std::io::error::Error", fillcolor="#81c169"]; // "struct" node
    "std::time::SystemTime" [label="external struct|std::time::SystemTime", fillcolor="#81c169"]; // "struct" node
    "std::time::SystemTimeError" [label="external struct|std::time::SystemTimeError", fillcolor="#81c169"]; // "struct" node
    "str" [label="external builtin|str", fillcolor="#81c169"]; // "builtin" node
    "subtle::Choice" [label="external struct|subtle::Choice", fillcolor="#81c169"]; // "struct" node
    "subtle::ConstantTimeEq" [label="external trait|subtle::ConstantTimeEq", fillcolor="#81c169"]; // "trait" node
    "typenum::bit::B0" [label="external struct|typenum::bit::B0", fillcolor="#81c169"]; // "struct" node
    "typenum::bit::B1" [label="external struct|typenum::bit::B1", fillcolor="#81c169"]; // "struct" node
    "typenum::marker_traits::Unsigned" [label="external trait|typenum::marker_traits::Unsigned", fillcolor="#81c169"]; // "trait" node
    "typenum::uint::UInt" [label="external struct|typenum::uint::UInt", fillcolor="#81c169"]; // "struct" node
    "typenum::uint::UTerm" [label="external struct|typenum::uint::UTerm", fillcolor="#81c169"]; // "struct" node
    "u128" [label="external builtin|u128", fillcolor="#81c169"]; // "builtin" node
    "u16" [label="external builtin|u16", fillcolor="#81c169"]; // "builtin" node
    "u32" [label="external builtin|u32", fillcolor="#81c169"]; // "builtin" node
    "u64" [label="external builtin|u64", fillcolor="#81c169"]; // "builtin" node
    "u8" [label="external builtin|u8", fillcolor="#81c169"]; // "builtin" node
    "usize" [label="external builtin|usize", fillcolor="#81c169"]; // "builtin" node
    "uuid::Uuid" [label="external struct|uuid::Uuid", fillcolor="#81c169"]; // "struct" node
    "uuid::error::Error" [label="external struct|uuid::error::Error", fillcolor="#81c169"]; // "struct" node
    "zerocopy::FromBytes" [label="external unsafe trait|zerocopy::FromBytes", fillcolor="#81c169"]; // "unsafe trait" node
    "zerocopy::FromZeroes" [label="external unsafe trait|zerocopy::FromZeroes", fillcolor="#81c169"]; // "unsafe trait" node
    "zerocopy::Ref" [label="external struct|zerocopy::Ref", fillcolor="#81c169"]; // "struct" node

    "libsignal_core::curve::KeyPair" -> "libsignal_protocol::curve::KeyPair::PrivateKey" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_core::curve::KeyPair" -> "libsignal_protocol::curve::KeyPair::PublicKey" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_core::curve::KeyPair" -> "libsignal_protocol::curve::KeyPair::from" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_core::curve::KeyPair" -> "libsignal_protocol::curve::KeyPair::from_public_and_private" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_core::curve::KeyPair" -> "libsignal_protocol::curve::KeyPair::get_private" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_core::curve::KeyPair" -> "libsignal_protocol::curve::KeyPair::get_public" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_core::curve::PrivateKey" -> "libsignal_protocol::curve::PrivateKey::deserialize" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_core::curve::PrivateKey" -> "libsignal_protocol::curve::PrivateKey::serialize" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_core::curve::PublicKey" -> "libsignal_protocol::curve::PublicKey::deserialize" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_core::curve::PublicKey" -> "libsignal_protocol::curve::PublicKey::serialize" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol" -> "libsignal_core::address::Aci" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol" -> "libsignal_core::address::DeviceId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol" -> "libsignal_core::address::Pni" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol" -> "libsignal_core::address::ProtocolAddress" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol" -> "libsignal_core::address::ServiceId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol" -> "libsignal_core::address::ServiceIdFixedWidthBinaryBytes" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol" -> "libsignal_core::address::ServiceIdKind" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol" -> "libsignal_core::curve::KeyPair" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol" -> "libsignal_core::curve::PrivateKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol" -> "libsignal_protocol::consts" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol" -> "libsignal_protocol::crypto" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol" -> "libsignal_protocol::error" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol" -> "libsignal_protocol::error::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol" -> "libsignal_protocol::fingerprint" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol" -> "libsignal_protocol::fingerprint::DisplayableFingerprint" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol" -> "libsignal_protocol::fingerprint::Fingerprint" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol" -> "libsignal_protocol::fingerprint::ScannableFingerprint" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol" -> "libsignal_protocol::group_cipher" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol" -> "libsignal_protocol::group_cipher::create_sender_key_distribution_message" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol" -> "libsignal_protocol::group_cipher::group_decrypt" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol" -> "libsignal_protocol::group_cipher::group_encrypt" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol" -> "libsignal_protocol::group_cipher::process_sender_key_distribution_message" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol" -> "libsignal_protocol::identity_key" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol" -> "libsignal_protocol::identity_key::IdentityKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol" -> "libsignal_protocol::identity_key::IdentityKeyPair" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol" -> "libsignal_protocol::incremental_mac" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol" -> "libsignal_protocol::kem" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol" -> "libsignal_protocol::proto" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol" -> "libsignal_protocol::protocol" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol" -> "libsignal_protocol::protocol::CiphertextMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol" -> "libsignal_protocol::protocol::CiphertextMessageType" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol" -> "libsignal_protocol::protocol::DecryptionErrorMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol" -> "libsignal_protocol::protocol::KyberPayload" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol" -> "libsignal_protocol::protocol::PlaintextContent" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol" -> "libsignal_protocol::protocol::PreKeySignalMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol" -> "libsignal_protocol::protocol::SenderKeyDistributionMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol" -> "libsignal_protocol::protocol::SenderKeyMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol" -> "libsignal_protocol::protocol::SignalMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol" -> "libsignal_protocol::protocol::extract_decryption_error_message_from_serialized_content" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol" -> "libsignal_protocol::ratchet" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol" -> "libsignal_protocol::ratchet::initialize_alice_session_record" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol" -> "libsignal_protocol::ratchet::initialize_bob_session_record" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol" -> "libsignal_protocol::ratchet::params::AliceSignalProtocolParameters" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol" -> "libsignal_protocol::ratchet::params::BobSignalProtocolParameters" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol" -> "libsignal_protocol::sealed_sender" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol" -> "libsignal_protocol::sealed_sender::ContentHint" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol" -> "libsignal_protocol::sealed_sender::ContentHint" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol" -> "libsignal_protocol::sealed_sender::SealedSenderDecryptionResult" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol" -> "libsignal_protocol::sealed_sender::SealedSenderV2SentMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol" -> "libsignal_protocol::sealed_sender::SealedSenderV2SentMessageRecipient" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol" -> "libsignal_protocol::sealed_sender::SenderCertificate" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol" -> "libsignal_protocol::sealed_sender::ServerCertificate" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol" -> "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol" -> "libsignal_protocol::sealed_sender::sealed_sender_decrypt" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol" -> "libsignal_protocol::sealed_sender::sealed_sender_decrypt_to_usmc" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol" -> "libsignal_protocol::sealed_sender::sealed_sender_encrypt" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol" -> "libsignal_protocol::sealed_sender::sealed_sender_encrypt_from_usmc" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol" -> "libsignal_protocol::sealed_sender::sealed_sender_multi_recipient_encrypt" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol" -> "libsignal_protocol::sender_keys" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol" -> "libsignal_protocol::sender_keys::SenderKeyRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol" -> "libsignal_protocol::session" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol" -> "libsignal_protocol::session::process_prekey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol" -> "libsignal_protocol::session::process_prekey_bundle" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol" -> "libsignal_protocol::session_cipher" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol" -> "libsignal_protocol::session_cipher::message_decrypt" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol" -> "libsignal_protocol::session_cipher::message_decrypt_prekey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol" -> "libsignal_protocol::session_cipher::message_decrypt_signal" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol" -> "libsignal_protocol::session_cipher::message_encrypt" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol" -> "libsignal_protocol::state" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol" -> "libsignal_protocol::state::bundle::PreKeyBundle" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol" -> "libsignal_protocol::state::bundle::PreKeyBundleContent" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol" -> "libsignal_protocol::state::kyber_prekey::KyberPreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol" -> "libsignal_protocol::state::kyber_prekey::KyberPreKeyRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol" -> "libsignal_protocol::state::prekey::PreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol" -> "libsignal_protocol::state::prekey::PreKeyRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol" -> "libsignal_protocol::state::session::SessionRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol" -> "libsignal_protocol::state::signed_prekey::GenericSignedPreKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol" -> "libsignal_protocol::state::signed_prekey::SignedPreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol" -> "libsignal_protocol::state::signed_prekey::SignedPreKeyRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol" -> "libsignal_protocol::storage" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol" -> "libsignal_protocol::storage::inmem::InMemIdentityKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol" -> "libsignal_protocol::storage::inmem::InMemKyberPreKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol" -> "libsignal_protocol::storage::inmem::InMemPreKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol" -> "libsignal_protocol::storage::inmem::InMemSenderKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol" -> "libsignal_protocol::storage::inmem::InMemSessionStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol" -> "libsignal_protocol::storage::inmem::InMemSignalProtocolStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol" -> "libsignal_protocol::storage::inmem::InMemSignedPreKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol" -> "libsignal_protocol::storage::traits::Direction" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol" -> "libsignal_protocol::storage::traits::IdentityKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol" -> "libsignal_protocol::storage::traits::KyberPreKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol" -> "libsignal_protocol::storage::traits::PreKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol" -> "libsignal_protocol::storage::traits::ProtocolStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol" -> "libsignal_protocol::storage::traits::SenderKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol" -> "libsignal_protocol::storage::traits::SessionStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol" -> "libsignal_protocol::storage::traits::SignedPreKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol" -> "libsignal_protocol::timestamp" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol" -> "libsignal_protocol::timestamp::Timestamp" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::consts" -> "core::time::Duration" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::crypto" -> "aes::autodetect::Aes256" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::crypto" -> "cipher::stream::StreamCipher" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::crypto" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::crypto" -> "crypto_common::KeyIvInit" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::crypto" -> "digest::mac::Mac" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::crypto" -> "hmac::optim::Hmac" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::crypto" -> "libsignal_protocol::crypto::DecryptionError" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::crypto" -> "libsignal_protocol::crypto::EncryptionError" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::crypto" -> "libsignal_protocol::crypto::aes256_ctr_hmacsha256_decrypt" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::crypto" -> "libsignal_protocol::crypto::aes256_ctr_hmacsha256_encrypt" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::crypto" -> "libsignal_protocol::crypto::aes_256_ctr_decrypt" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::crypto" -> "libsignal_protocol::crypto::aes_256_ctr_encrypt" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::crypto" -> "libsignal_protocol::crypto::hmac_sha256" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::crypto" -> "sha2::Sha256" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::crypto" -> "subtle::ConstantTimeEq" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::crypto::DecryptionError" -> "libsignal_protocol::crypto::DecryptionError::fmt" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::crypto::DecryptionError::fmt" -> "core::fmt::Error" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::crypto::DecryptionError::fmt" -> "core::fmt::Formatter" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::crypto::DecryptionError::fmt" -> "core::fmt::builders::DebugTuple" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::crypto::DecryptionError::fmt" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::crypto::DecryptionError::fmt" -> "libsignal_protocol::crypto::DecryptionError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::crypto::DecryptionError::fmt" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::crypto::EncryptionError" -> "libsignal_protocol::crypto::EncryptionError::fmt" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::crypto::EncryptionError::fmt" -> "core::fmt::Error" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::crypto::EncryptionError::fmt" -> "core::fmt::Formatter" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::crypto::EncryptionError::fmt" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::crypto::EncryptionError::fmt" -> "libsignal_protocol::crypto::EncryptionError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::crypto::EncryptionError::fmt" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::crypto::aes256_ctr_hmacsha256_decrypt" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::crypto::aes256_ctr_hmacsha256_decrypt" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::crypto::aes256_ctr_hmacsha256_decrypt" -> "bool" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::crypto::aes256_ctr_hmacsha256_decrypt" -> "core::ops::range::RangeFrom" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::crypto::aes256_ctr_hmacsha256_decrypt" -> "core::ops::range::RangeTo" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::crypto::aes256_ctr_hmacsha256_decrypt" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::crypto::aes256_ctr_hmacsha256_decrypt" -> "libsignal_protocol::crypto::DecryptionError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::crypto::aes256_ctr_hmacsha256_decrypt" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::crypto::aes256_ctr_hmacsha256_decrypt" -> "subtle::Choice" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::crypto::aes256_ctr_hmacsha256_decrypt" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::crypto::aes256_ctr_hmacsha256_decrypt" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::crypto::aes256_ctr_hmacsha256_encrypt" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::crypto::aes256_ctr_hmacsha256_encrypt" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::crypto::aes256_ctr_hmacsha256_encrypt" -> "core::convert::Infallible" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::crypto::aes256_ctr_hmacsha256_encrypt" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::crypto::aes256_ctr_hmacsha256_encrypt" -> "core::ops::range::RangeTo" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::crypto::aes256_ctr_hmacsha256_encrypt" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::crypto::aes256_ctr_hmacsha256_encrypt" -> "libsignal_protocol::crypto::EncryptionError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::crypto::aes256_ctr_hmacsha256_encrypt" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::crypto::aes256_ctr_hmacsha256_encrypt" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::crypto::aes_256_ctr_decrypt" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::crypto::aes_256_ctr_decrypt" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::crypto::aes_256_ctr_decrypt" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::crypto::aes_256_ctr_decrypt" -> "libsignal_protocol::crypto::DecryptionError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::crypto::aes_256_ctr_decrypt" -> "libsignal_protocol::crypto::EncryptionError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::crypto::aes_256_ctr_decrypt" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::crypto::aes_256_ctr_encrypt" -> "aes::autodetect::Aes256" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::crypto::aes_256_ctr_encrypt" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::crypto::aes_256_ctr_encrypt" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::crypto::aes_256_ctr_encrypt" -> "cipher::stream_wrapper::StreamCipherCoreWrapper" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::crypto::aes_256_ctr_encrypt" -> "core::array::TryFromSliceError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::crypto::aes_256_ctr_encrypt" -> "core::convert::Infallible" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::crypto::aes_256_ctr_encrypt" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::crypto::aes_256_ctr_encrypt" -> "core::ops::range::RangeFull" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::crypto::aes_256_ctr_encrypt" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::crypto::aes_256_ctr_encrypt" -> "ctr::ctr_core::CtrCore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::crypto::aes_256_ctr_encrypt" -> "ctr::flavors::ctr32::Ctr32BE" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::crypto::aes_256_ctr_encrypt" -> "generic_array::GenericArray" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::crypto::aes_256_ctr_encrypt" -> "libsignal_protocol::crypto::EncryptionError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::crypto::aes_256_ctr_encrypt" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::crypto::aes_256_ctr_encrypt" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::crypto::hmac_sha256" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::crypto::hmac_sha256" -> "crypto_common::InvalidLength" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::crypto::hmac_sha256" -> "digest::core_api::ct_variable::CtVariableCoreWrapper" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::crypto::hmac_sha256" -> "digest::core_api::wrapper::CoreWrapper" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::crypto::hmac_sha256" -> "digest::mac::CtOutput" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::crypto::hmac_sha256" -> "generic_array::GenericArray" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::crypto::hmac_sha256" -> "hmac::optim::HmacCore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::crypto::hmac_sha256" -> "sha2::OidSha256" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::crypto::hmac_sha256" -> "sha2::core_api::Sha256VarCore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::crypto::hmac_sha256" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::crypto::hmac_sha256" -> "typenum::bit::B0" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::crypto::hmac_sha256" -> "typenum::bit::B1" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::crypto::hmac_sha256" -> "typenum::uint::UInt" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::crypto::hmac_sha256" -> "typenum::uint::UTerm" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::crypto::hmac_sha256" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::crypto::hmac_sha256" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::curve::KeyPair::PrivateKey" -> "libsignal_core::curve::PrivateKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::curve::KeyPair::PublicKey" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::curve::KeyPair::from" -> "libsignal_core::curve::KeyPair" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::curve::KeyPair::from" -> "libsignal_core::curve::PrivateKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::curve::KeyPair::from" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::curve::KeyPair::from" -> "libsignal_protocol::identity_key::IdentityKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::curve::KeyPair::from" -> "libsignal_protocol::identity_key::IdentityKeyPair" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::curve::KeyPair::from_public_and_private" -> "core::convert::Infallible" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::curve::KeyPair::from_public_and_private" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::curve::KeyPair::from_public_and_private" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::curve::KeyPair::from_public_and_private" -> "libsignal_core::curve::CurveError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::curve::KeyPair::from_public_and_private" -> "libsignal_core::curve::KeyPair" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::curve::KeyPair::from_public_and_private" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::curve::KeyPair::from_public_and_private" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::curve::KeyPair::get_private" -> "libsignal_core::curve::KeyPair" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::curve::KeyPair::get_private" -> "libsignal_core::curve::PrivateKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::curve::KeyPair::get_public" -> "libsignal_core::curve::KeyPair" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::curve::KeyPair::get_public" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::curve::PrivateKey::deserialize" -> "core::convert::Infallible" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::curve::PrivateKey::deserialize" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::curve::PrivateKey::deserialize" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::curve::PrivateKey::deserialize" -> "libsignal_core::curve::CurveError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::curve::PrivateKey::deserialize" -> "libsignal_core::curve::PrivateKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::curve::PrivateKey::deserialize" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::curve::PrivateKey::deserialize" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::curve::PrivateKey::serialize" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::curve::PrivateKey::serialize" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::curve::PrivateKey::serialize" -> "libsignal_core::curve::PrivateKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::curve::PrivateKey::serialize" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::curve::PublicKey::deserialize" -> "core::convert::Infallible" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::curve::PublicKey::deserialize" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::curve::PublicKey::deserialize" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::curve::PublicKey::deserialize" -> "libsignal_core::curve::CurveError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::curve::PublicKey::deserialize" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::curve::PublicKey::deserialize" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::curve::PublicKey::deserialize" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::curve::PublicKey::serialize" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::curve::PublicKey::serialize" -> "alloc::boxed::Box" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::curve::PublicKey::serialize" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::curve::PublicKey::serialize" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::curve::PublicKey::serialize" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::error" -> "core::panic::unwind_safe::UnwindSafe" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::error" -> "libsignal_core::curve::CurveError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::error" -> "libsignal_core::curve::KeyType" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::error" -> "libsignal_protocol::error::Result" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::error" -> "libsignal_protocol::error::SignalProtocolError" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::error" -> "libsignal_protocol::kem" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::error" -> "uuid::Uuid" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::error::Result" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::error::Result" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::error::SignalProtocolError" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::error::SignalProtocolError" -> "alloc::boxed::Box" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::error::SignalProtocolError" -> "alloc::string::String" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::error::SignalProtocolError" -> "core::error::Error" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::error::SignalProtocolError" -> "libsignal_core::address::ProtocolAddress" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::error::SignalProtocolError" -> "libsignal_core::curve::KeyType" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::error::SignalProtocolError" -> "libsignal_protocol::error::SignalProtocolError::fmt" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::error::SignalProtocolError" -> "libsignal_protocol::error::SignalProtocolError::for_application_callback" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::error::SignalProtocolError" -> "libsignal_protocol::error::SignalProtocolError::from" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::error::SignalProtocolError" -> "libsignal_protocol::error::SignalProtocolError::from" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::error::SignalProtocolError" -> "libsignal_protocol::kem::KeyType" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::error::SignalProtocolError" -> "libsignal_protocol::protocol::CiphertextMessageType" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::error::SignalProtocolError" -> "uuid::Uuid" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::error::SignalProtocolError::fmt" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::error::SignalProtocolError::fmt" -> "alloc::boxed::Box" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::error::SignalProtocolError::fmt" -> "alloc::string::String" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::error::SignalProtocolError::fmt" -> "core::fmt::Error" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::error::SignalProtocolError::fmt" -> "core::fmt::Formatter" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::error::SignalProtocolError::fmt" -> "core::fmt::builders::DebugStruct" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::error::SignalProtocolError::fmt" -> "core::fmt::builders::DebugTuple" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::error::SignalProtocolError::fmt" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::error::SignalProtocolError::fmt" -> "libsignal_core::address::ProtocolAddress" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::error::SignalProtocolError::fmt" -> "libsignal_core::curve::KeyType" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::error::SignalProtocolError::fmt" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::error::SignalProtocolError::fmt" -> "libsignal_protocol::kem::KeyType" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::error::SignalProtocolError::fmt" -> "libsignal_protocol::protocol::CiphertextMessageType" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::error::SignalProtocolError::fmt" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::error::SignalProtocolError::fmt" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::error::SignalProtocolError::fmt" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::error::SignalProtocolError::fmt" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::error::SignalProtocolError::fmt" -> "uuid::Uuid" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::error::SignalProtocolError::for_application_callback" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::error::SignalProtocolError::for_application_callback" -> "alloc::boxed::Box" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::error::SignalProtocolError::for_application_callback" -> "core::marker::Sized" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::error::SignalProtocolError::for_application_callback" -> "core::ops::function::FnOnce" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::error::SignalProtocolError::for_application_callback" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::error::SignalProtocolError::for_application_callback" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::error::SignalProtocolError::from" -> "libsignal_core::curve::CurveError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::error::SignalProtocolError::from" -> "libsignal_core::curve::KeyType" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::error::SignalProtocolError::from" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::error::SignalProtocolError::from" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::error::SignalProtocolError::from" -> "libsignal_protocol::state::session::InvalidSessionError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::error::SignalProtocolError::from" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::error::SignalProtocolError::from" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::error::SignalProtocolError::from" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint" -> "alloc::fmt" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint" -> "core::fmt::Write" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint" -> "digest::digest::Digest" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint" -> "libsignal_protocol::error::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint" -> "libsignal_protocol::fingerprint::DisplayableFingerprint" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::fingerprint" -> "libsignal_protocol::fingerprint::Fingerprint" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::fingerprint" -> "libsignal_protocol::fingerprint::ScannableFingerprint" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::fingerprint" -> "libsignal_protocol::fingerprint::get_encoded_string" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::fingerprint" -> "libsignal_protocol::identity_key::IdentityKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint" -> "libsignal_protocol::proto" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint" -> "prost::message::Message" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint" -> "sha2::Sha512" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint" -> "subtle::ConstantTimeEq" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::DisplayableFingerprint" -> "alloc::string::String" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::DisplayableFingerprint" -> "libsignal_protocol::fingerprint::DisplayableFingerprint::clone" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::fingerprint::DisplayableFingerprint" -> "libsignal_protocol::fingerprint::DisplayableFingerprint::fmt" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::fingerprint::DisplayableFingerprint" -> "libsignal_protocol::fingerprint::DisplayableFingerprint::fmt" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::fingerprint::DisplayableFingerprint" -> "libsignal_protocol::fingerprint::DisplayableFingerprint::new" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::fingerprint::DisplayableFingerprint::clone" -> "alloc::string::String" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::DisplayableFingerprint::clone" -> "libsignal_protocol::fingerprint::DisplayableFingerprint" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::DisplayableFingerprint::fmt" -> "alloc::string::String" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::DisplayableFingerprint::fmt" -> "alloc::string::String" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::DisplayableFingerprint::fmt" -> "bool" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::DisplayableFingerprint::fmt" -> "char" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::DisplayableFingerprint::fmt" -> "core::fmt::Arguments" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::DisplayableFingerprint::fmt" -> "core::fmt::Error" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::DisplayableFingerprint::fmt" -> "core::fmt::Error" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::DisplayableFingerprint::fmt" -> "core::fmt::Formatter" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::DisplayableFingerprint::fmt" -> "core::fmt::Formatter" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::DisplayableFingerprint::fmt" -> "core::fmt::builders::DebugStruct" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::DisplayableFingerprint::fmt" -> "core::fmt::rt::Alignment" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::DisplayableFingerprint::fmt" -> "core::fmt::rt::Argument" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::DisplayableFingerprint::fmt" -> "core::fmt::rt::Count" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::DisplayableFingerprint::fmt" -> "core::fmt::rt::Placeholder" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::DisplayableFingerprint::fmt" -> "core::fmt::rt::UnsafeArg" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::DisplayableFingerprint::fmt" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::DisplayableFingerprint::fmt" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::DisplayableFingerprint::fmt" -> "libsignal_protocol::fingerprint::DisplayableFingerprint" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::DisplayableFingerprint::fmt" -> "libsignal_protocol::fingerprint::DisplayableFingerprint" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::DisplayableFingerprint::fmt" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::DisplayableFingerprint::fmt" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::DisplayableFingerprint::fmt" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::DisplayableFingerprint::fmt" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::DisplayableFingerprint::new" -> "alloc::string::String" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::DisplayableFingerprint::new" -> "core::convert::Infallible" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::DisplayableFingerprint::new" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::DisplayableFingerprint::new" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::DisplayableFingerprint::new" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::DisplayableFingerprint::new" -> "libsignal_protocol::fingerprint::DisplayableFingerprint" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::DisplayableFingerprint::new" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::Fingerprint" -> "libsignal_protocol::fingerprint::DisplayableFingerprint" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::Fingerprint" -> "libsignal_protocol::fingerprint::Fingerprint::clone" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::fingerprint::Fingerprint" -> "libsignal_protocol::fingerprint::Fingerprint::display_string" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::fingerprint::Fingerprint" -> "libsignal_protocol::fingerprint::Fingerprint::fmt" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::fingerprint::Fingerprint" -> "libsignal_protocol::fingerprint::Fingerprint::get_fingerprint" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::fingerprint::Fingerprint" -> "libsignal_protocol::fingerprint::Fingerprint::new" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::fingerprint::Fingerprint" -> "libsignal_protocol::fingerprint::ScannableFingerprint" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::Fingerprint::clone" -> "libsignal_protocol::fingerprint::DisplayableFingerprint" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::Fingerprint::clone" -> "libsignal_protocol::fingerprint::Fingerprint" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::Fingerprint::clone" -> "libsignal_protocol::fingerprint::ScannableFingerprint" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::Fingerprint::display_string" -> "alloc::string::String" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::Fingerprint::display_string" -> "char" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::Fingerprint::display_string" -> "core::fmt::Arguments" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::Fingerprint::display_string" -> "core::fmt::rt::Alignment" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::Fingerprint::display_string" -> "core::fmt::rt::Argument" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::Fingerprint::display_string" -> "core::fmt::rt::Count" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::Fingerprint::display_string" -> "core::fmt::rt::Placeholder" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::Fingerprint::display_string" -> "core::fmt::rt::UnsafeArg" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::Fingerprint::display_string" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::Fingerprint::display_string" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::Fingerprint::display_string" -> "libsignal_protocol::fingerprint::DisplayableFingerprint" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::Fingerprint::display_string" -> "libsignal_protocol::fingerprint::Fingerprint" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::Fingerprint::display_string" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::Fingerprint::display_string" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::Fingerprint::display_string" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::Fingerprint::fmt" -> "core::fmt::Error" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::Fingerprint::fmt" -> "core::fmt::Formatter" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::Fingerprint::fmt" -> "core::fmt::builders::DebugStruct" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::Fingerprint::fmt" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::Fingerprint::fmt" -> "libsignal_protocol::fingerprint::DisplayableFingerprint" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::Fingerprint::fmt" -> "libsignal_protocol::fingerprint::Fingerprint" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::Fingerprint::fmt" -> "libsignal_protocol::fingerprint::ScannableFingerprint" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::Fingerprint::fmt" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::Fingerprint::get_fingerprint" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::Fingerprint::get_fingerprint" -> "alloc::boxed::Box" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::Fingerprint::get_fingerprint" -> "alloc::string::String" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::Fingerprint::get_fingerprint" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::Fingerprint::get_fingerprint" -> "bool" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::Fingerprint::get_fingerprint" -> "char" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::Fingerprint::get_fingerprint" -> "core::fmt::Arguments" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::Fingerprint::get_fingerprint" -> "core::fmt::rt::Alignment" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::Fingerprint::get_fingerprint" -> "core::fmt::rt::Argument" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::Fingerprint::get_fingerprint" -> "core::fmt::rt::Count" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::Fingerprint::get_fingerprint" -> "core::fmt::rt::Placeholder" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::Fingerprint::get_fingerprint" -> "core::fmt::rt::UnsafeArg" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::Fingerprint::get_fingerprint" -> "core::ops::range::Range" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::Fingerprint::get_fingerprint" -> "core::ops::range::RangeFull" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::Fingerprint::get_fingerprint" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::Fingerprint::get_fingerprint" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::Fingerprint::get_fingerprint" -> "digest::core_api::ct_variable::CtVariableCoreWrapper" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::Fingerprint::get_fingerprint" -> "digest::core_api::wrapper::CoreWrapper" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::Fingerprint::get_fingerprint" -> "generic_array::GenericArray" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::Fingerprint::get_fingerprint" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::Fingerprint::get_fingerprint" -> "libsignal_protocol::identity_key::IdentityKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::Fingerprint::get_fingerprint" -> "sha2::OidSha512" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::Fingerprint::get_fingerprint" -> "sha2::core_api::Sha512VarCore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::Fingerprint::get_fingerprint" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::Fingerprint::get_fingerprint" -> "typenum::bit::B0" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::Fingerprint::get_fingerprint" -> "typenum::bit::B1" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::Fingerprint::get_fingerprint" -> "typenum::uint::UInt" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::Fingerprint::get_fingerprint" -> "typenum::uint::UTerm" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::Fingerprint::get_fingerprint" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::Fingerprint::get_fingerprint" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::Fingerprint::get_fingerprint" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::Fingerprint::new" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::Fingerprint::new" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::Fingerprint::new" -> "core::convert::Infallible" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::Fingerprint::new" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::Fingerprint::new" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::Fingerprint::new" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::Fingerprint::new" -> "libsignal_protocol::fingerprint::DisplayableFingerprint" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::Fingerprint::new" -> "libsignal_protocol::fingerprint::Fingerprint" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::Fingerprint::new" -> "libsignal_protocol::fingerprint::ScannableFingerprint" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::Fingerprint::new" -> "libsignal_protocol::identity_key::IdentityKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::Fingerprint::new" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::Fingerprint::new" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::ScannableFingerprint" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::ScannableFingerprint" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::ScannableFingerprint" -> "libsignal_protocol::fingerprint::ScannableFingerprint::clone" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::fingerprint::ScannableFingerprint" -> "libsignal_protocol::fingerprint::ScannableFingerprint::compare" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::fingerprint::ScannableFingerprint" -> "libsignal_protocol::fingerprint::ScannableFingerprint::deserialize" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::fingerprint::ScannableFingerprint" -> "libsignal_protocol::fingerprint::ScannableFingerprint::fmt" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::fingerprint::ScannableFingerprint" -> "libsignal_protocol::fingerprint::ScannableFingerprint::new" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::fingerprint::ScannableFingerprint" -> "libsignal_protocol::fingerprint::ScannableFingerprint::serialize" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::fingerprint::ScannableFingerprint::clone" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::ScannableFingerprint::clone" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::ScannableFingerprint::clone" -> "libsignal_protocol::fingerprint::ScannableFingerprint" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::ScannableFingerprint::clone" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::ScannableFingerprint::clone" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::ScannableFingerprint::compare" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::ScannableFingerprint::compare" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::ScannableFingerprint::compare" -> "bool" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::ScannableFingerprint::compare" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::ScannableFingerprint::compare" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::ScannableFingerprint::compare" -> "i32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::ScannableFingerprint::compare" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::ScannableFingerprint::compare" -> "libsignal_protocol::fingerprint::ScannableFingerprint" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::ScannableFingerprint::compare" -> "subtle::Choice" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::ScannableFingerprint::compare" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::ScannableFingerprint::compare" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::ScannableFingerprint::deserialize" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::ScannableFingerprint::deserialize" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::ScannableFingerprint::deserialize" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::ScannableFingerprint::deserialize" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::ScannableFingerprint::deserialize" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::ScannableFingerprint::deserialize" -> "libsignal_protocol::fingerprint::ScannableFingerprint" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::ScannableFingerprint::deserialize" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::ScannableFingerprint::deserialize" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::ScannableFingerprint::fmt" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::ScannableFingerprint::fmt" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::ScannableFingerprint::fmt" -> "core::fmt::Error" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::ScannableFingerprint::fmt" -> "core::fmt::Formatter" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::ScannableFingerprint::fmt" -> "core::fmt::builders::DebugStruct" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::ScannableFingerprint::fmt" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::ScannableFingerprint::fmt" -> "libsignal_protocol::fingerprint::ScannableFingerprint" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::ScannableFingerprint::fmt" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::ScannableFingerprint::fmt" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::ScannableFingerprint::fmt" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::ScannableFingerprint::new" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::ScannableFingerprint::new" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::ScannableFingerprint::new" -> "core::ops::range::RangeTo" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::ScannableFingerprint::new" -> "libsignal_protocol::fingerprint::ScannableFingerprint" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::ScannableFingerprint::new" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::ScannableFingerprint::new" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::ScannableFingerprint::new" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::ScannableFingerprint::serialize" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::ScannableFingerprint::serialize" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::ScannableFingerprint::serialize" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::ScannableFingerprint::serialize" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::ScannableFingerprint::serialize" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::ScannableFingerprint::serialize" -> "libsignal_protocol::fingerprint::ScannableFingerprint" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::ScannableFingerprint::serialize" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::ScannableFingerprint::serialize" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::get_encoded_string" -> "alloc::string::String" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::get_encoded_string" -> "bool" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::get_encoded_string" -> "char" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::get_encoded_string" -> "core::fmt::Arguments" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::get_encoded_string" -> "core::fmt::Error" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::get_encoded_string" -> "core::fmt::rt::Alignment" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::get_encoded_string" -> "core::fmt::rt::Argument" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::get_encoded_string" -> "core::fmt::rt::Count" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::get_encoded_string" -> "core::fmt::rt::Placeholder" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::get_encoded_string" -> "core::fmt::rt::UnsafeArg" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::get_encoded_string" -> "core::iter::adapters::map::Map" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::get_encoded_string" -> "core::iter::adapters::take::Take" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::get_encoded_string" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::get_encoded_string" -> "core::slice::iter::ChunksExact" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::get_encoded_string" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::get_encoded_string" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::get_encoded_string" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::get_encoded_string" -> "u64" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::get_encoded_string" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::fingerprint::get_encoded_string" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher" -> "libsignal_core::address::ProtocolAddress" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher" -> "libsignal_core::curve::KeyPair" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher" -> "libsignal_protocol::consts" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher" -> "libsignal_protocol::error::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher" -> "libsignal_protocol::group_cipher::create_sender_key_distribution_message" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::group_cipher" -> "libsignal_protocol::group_cipher::get_sender_key" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::group_cipher" -> "libsignal_protocol::group_cipher::group_decrypt" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::group_cipher" -> "libsignal_protocol::group_cipher::group_encrypt" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::group_cipher" -> "libsignal_protocol::group_cipher::process_sender_key_distribution_message" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::group_cipher" -> "libsignal_protocol::protocol::CiphertextMessageType" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher" -> "libsignal_protocol::protocol::SenderKeyDistributionMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher" -> "libsignal_protocol::protocol::SenderKeyMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher" -> "libsignal_protocol::sender_keys::SenderKeyRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher" -> "libsignal_protocol::sender_keys::SenderKeyState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher" -> "libsignal_protocol::sender_keys::SenderMessageKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher" -> "libsignal_protocol::storage::traits::SenderKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher" -> "rand::rng::Rng" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher" -> "rand_core::CryptoRng" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher" -> "uuid::Uuid" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::create_sender_key_distribution_message" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::create_sender_key_distribution_message" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::create_sender_key_distribution_message" -> "bool" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::create_sender_key_distribution_message" -> "char" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::create_sender_key_distribution_message" -> "core::convert::Infallible" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::create_sender_key_distribution_message" -> "core::fmt::Arguments" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::create_sender_key_distribution_message" -> "core::fmt::rt::Alignment" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::create_sender_key_distribution_message" -> "core::fmt::rt::Argument" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::create_sender_key_distribution_message" -> "core::fmt::rt::Count" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::create_sender_key_distribution_message" -> "core::fmt::rt::Placeholder" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::create_sender_key_distribution_message" -> "core::fmt::rt::UnsafeArg" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::create_sender_key_distribution_message" -> "core::future::future::Future" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::create_sender_key_distribution_message" -> "core::marker::Sized" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::create_sender_key_distribution_message" -> "core::num::error::TryFromIntError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::create_sender_key_distribution_message" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::create_sender_key_distribution_message" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::create_sender_key_distribution_message" -> "core::panic::location::Location" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::create_sender_key_distribution_message" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::create_sender_key_distribution_message" -> "i32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::create_sender_key_distribution_message" -> "libsignal_core::address::ProtocolAddress" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::create_sender_key_distribution_message" -> "libsignal_core::curve::KeyPair" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::create_sender_key_distribution_message" -> "libsignal_core::curve::PrivateKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::create_sender_key_distribution_message" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::create_sender_key_distribution_message" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::create_sender_key_distribution_message" -> "libsignal_protocol::protocol::SenderKeyDistributionMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::create_sender_key_distribution_message" -> "libsignal_protocol::sender_keys::InvalidSessionError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::create_sender_key_distribution_message" -> "libsignal_protocol::sender_keys::SenderChainKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::create_sender_key_distribution_message" -> "libsignal_protocol::sender_keys::SenderKeyRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::create_sender_key_distribution_message" -> "libsignal_protocol::sender_keys::SenderKeyState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::create_sender_key_distribution_message" -> "libsignal_protocol::storage::traits::SenderKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::create_sender_key_distribution_message" -> "log::Level" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::create_sender_key_distribution_message" -> "log::LevelFilter" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::create_sender_key_distribution_message" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::create_sender_key_distribution_message" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::create_sender_key_distribution_message" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::create_sender_key_distribution_message" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::create_sender_key_distribution_message" -> "uuid::Uuid" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::get_sender_key" -> "bool" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::get_sender_key" -> "char" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::get_sender_key" -> "core::convert::Infallible" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::get_sender_key" -> "core::fmt::Arguments" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::get_sender_key" -> "core::fmt::rt::Alignment" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::get_sender_key" -> "core::fmt::rt::Argument" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::get_sender_key" -> "core::fmt::rt::Count" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::get_sender_key" -> "core::fmt::rt::Placeholder" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::get_sender_key" -> "core::fmt::rt::UnsafeArg" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::get_sender_key" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::get_sender_key" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::get_sender_key" -> "core::panic::location::Location" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::get_sender_key" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::get_sender_key" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::get_sender_key" -> "libsignal_protocol::protocol::CiphertextMessageType" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::get_sender_key" -> "libsignal_protocol::sender_keys::SenderChainKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::get_sender_key" -> "libsignal_protocol::sender_keys::SenderKeyState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::get_sender_key" -> "libsignal_protocol::sender_keys::SenderMessageKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::get_sender_key" -> "log::Level" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::get_sender_key" -> "log::LevelFilter" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::get_sender_key" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::get_sender_key" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::get_sender_key" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::get_sender_key" -> "uuid::Uuid" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::group_decrypt" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::group_decrypt" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::group_decrypt" -> "bool" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::group_decrypt" -> "char" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::group_decrypt" -> "core::convert::Infallible" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::group_decrypt" -> "core::fmt::Arguments" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::group_decrypt" -> "core::fmt::rt::Alignment" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::group_decrypt" -> "core::fmt::rt::Argument" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::group_decrypt" -> "core::fmt::rt::Count" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::group_decrypt" -> "core::fmt::rt::Placeholder" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::group_decrypt" -> "core::fmt::rt::UnsafeArg" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::group_decrypt" -> "core::future::future::Future" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::group_decrypt" -> "core::marker::Sized" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::group_decrypt" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::group_decrypt" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::group_decrypt" -> "core::panic::location::Location" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::group_decrypt" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::group_decrypt" -> "libsignal_core::address::ProtocolAddress" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::group_decrypt" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::group_decrypt" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::group_decrypt" -> "libsignal_protocol::protocol::CiphertextMessageType" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::group_decrypt" -> "libsignal_protocol::protocol::SenderKeyMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::group_decrypt" -> "libsignal_protocol::sender_keys::InvalidSessionError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::group_decrypt" -> "libsignal_protocol::sender_keys::SenderKeyRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::group_decrypt" -> "libsignal_protocol::sender_keys::SenderKeyState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::group_decrypt" -> "libsignal_protocol::sender_keys::SenderMessageKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::group_decrypt" -> "libsignal_protocol::storage::traits::SenderKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::group_decrypt" -> "log::Level" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::group_decrypt" -> "log::LevelFilter" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::group_decrypt" -> "signal_crypto::aes_cbc::DecryptionError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::group_decrypt" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::group_decrypt" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::group_decrypt" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::group_decrypt" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::group_decrypt" -> "uuid::Uuid" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::group_encrypt" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::group_encrypt" -> "alloc::boxed::Box" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::group_encrypt" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::group_encrypt" -> "bool" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::group_encrypt" -> "char" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::group_encrypt" -> "core::convert::Infallible" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::group_encrypt" -> "core::fmt::Arguments" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::group_encrypt" -> "core::fmt::rt::Alignment" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::group_encrypt" -> "core::fmt::rt::Argument" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::group_encrypt" -> "core::fmt::rt::Count" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::group_encrypt" -> "core::fmt::rt::Placeholder" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::group_encrypt" -> "core::fmt::rt::UnsafeArg" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::group_encrypt" -> "core::future::future::Future" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::group_encrypt" -> "core::marker::Sized" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::group_encrypt" -> "core::num::error::TryFromIntError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::group_encrypt" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::group_encrypt" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::group_encrypt" -> "core::panic::location::Location" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::group_encrypt" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::group_encrypt" -> "libsignal_core::address::ProtocolAddress" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::group_encrypt" -> "libsignal_core::curve::PrivateKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::group_encrypt" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::group_encrypt" -> "libsignal_protocol::protocol::SenderKeyMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::group_encrypt" -> "libsignal_protocol::sender_keys::InvalidSessionError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::group_encrypt" -> "libsignal_protocol::sender_keys::SenderChainKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::group_encrypt" -> "libsignal_protocol::sender_keys::SenderKeyRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::group_encrypt" -> "libsignal_protocol::sender_keys::SenderKeyState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::group_encrypt" -> "libsignal_protocol::sender_keys::SenderMessageKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::group_encrypt" -> "libsignal_protocol::storage::traits::SenderKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::group_encrypt" -> "log::Level" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::group_encrypt" -> "log::LevelFilter" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::group_encrypt" -> "signal_crypto::aes_cbc::EncryptionError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::group_encrypt" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::group_encrypt" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::group_encrypt" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::group_encrypt" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::group_encrypt" -> "uuid::Uuid" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::process_sender_key_distribution_message" -> "bool" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::process_sender_key_distribution_message" -> "char" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::process_sender_key_distribution_message" -> "core::convert::Infallible" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::process_sender_key_distribution_message" -> "core::fmt::Arguments" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::process_sender_key_distribution_message" -> "core::fmt::rt::Alignment" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::process_sender_key_distribution_message" -> "core::fmt::rt::Argument" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::process_sender_key_distribution_message" -> "core::fmt::rt::Count" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::process_sender_key_distribution_message" -> "core::fmt::rt::Placeholder" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::process_sender_key_distribution_message" -> "core::fmt::rt::UnsafeArg" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::process_sender_key_distribution_message" -> "core::future::future::Future" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::process_sender_key_distribution_message" -> "core::marker::Sized" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::process_sender_key_distribution_message" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::process_sender_key_distribution_message" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::process_sender_key_distribution_message" -> "core::panic::location::Location" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::process_sender_key_distribution_message" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::process_sender_key_distribution_message" -> "libsignal_core::address::ProtocolAddress" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::process_sender_key_distribution_message" -> "libsignal_core::curve::PrivateKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::process_sender_key_distribution_message" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::process_sender_key_distribution_message" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::process_sender_key_distribution_message" -> "libsignal_protocol::protocol::SenderKeyDistributionMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::process_sender_key_distribution_message" -> "libsignal_protocol::sender_keys::SenderKeyRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::process_sender_key_distribution_message" -> "libsignal_protocol::storage::traits::SenderKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::process_sender_key_distribution_message" -> "log::Level" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::process_sender_key_distribution_message" -> "log::LevelFilter" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::process_sender_key_distribution_message" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::process_sender_key_distribution_message" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::process_sender_key_distribution_message" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::process_sender_key_distribution_message" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::group_cipher::process_sender_key_distribution_message" -> "uuid::Uuid" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key" -> "libsignal_core::curve::KeyPair" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key" -> "libsignal_core::curve::PrivateKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key" -> "libsignal_protocol::error::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key" -> "libsignal_protocol::identity_key::IdentityKey" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::identity_key" -> "libsignal_protocol::identity_key::IdentityKeyPair" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::identity_key" -> "libsignal_protocol::proto" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key" -> "prost::message::Message" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key" -> "rand::rng::Rng" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key" -> "rand_core::CryptoRng" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKey" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKey" -> "libsignal_protocol::identity_key::IdentityKey::Error" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::identity_key::IdentityKey" -> "libsignal_protocol::identity_key::IdentityKey::clone" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::identity_key::IdentityKey" -> "libsignal_protocol::identity_key::IdentityKey::cmp" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::identity_key::IdentityKey" -> "libsignal_protocol::identity_key::IdentityKey::decode" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::identity_key::IdentityKey" -> "libsignal_protocol::identity_key::IdentityKey::eq" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::identity_key::IdentityKey" -> "libsignal_protocol::identity_key::IdentityKey::fmt" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::identity_key::IdentityKey" -> "libsignal_protocol::identity_key::IdentityKey::new" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::identity_key::IdentityKey" -> "libsignal_protocol::identity_key::IdentityKey::partial_cmp" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::identity_key::IdentityKey" -> "libsignal_protocol::identity_key::IdentityKey::public_key" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::identity_key::IdentityKey" -> "libsignal_protocol::identity_key::IdentityKey::serialize" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::identity_key::IdentityKey" -> "libsignal_protocol::identity_key::IdentityKey::try_from" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::identity_key::IdentityKey" -> "libsignal_protocol::identity_key::IdentityKey::verify_alternate_identity" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::identity_key::IdentityKey::Error" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKey::clone" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKey::clone" -> "libsignal_protocol::identity_key::IdentityKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKey::cmp" -> "core::cmp::Ordering" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKey::cmp" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKey::cmp" -> "libsignal_protocol::identity_key::IdentityKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKey::decode" -> "core::convert::Infallible" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKey::decode" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKey::decode" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKey::decode" -> "libsignal_core::curve::CurveError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKey::decode" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKey::decode" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKey::decode" -> "libsignal_protocol::identity_key::IdentityKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKey::decode" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKey::eq" -> "bool" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKey::eq" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKey::eq" -> "libsignal_protocol::identity_key::IdentityKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKey::fmt" -> "core::fmt::Error" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKey::fmt" -> "core::fmt::Formatter" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKey::fmt" -> "core::fmt::builders::DebugStruct" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKey::fmt" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKey::fmt" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKey::fmt" -> "libsignal_protocol::identity_key::IdentityKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKey::fmt" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKey::new" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKey::new" -> "libsignal_protocol::identity_key::IdentityKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKey::partial_cmp" -> "core::cmp::Ordering" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKey::partial_cmp" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKey::partial_cmp" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKey::partial_cmp" -> "libsignal_protocol::identity_key::IdentityKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKey::partial_cmp" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKey::public_key" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKey::public_key" -> "libsignal_protocol::identity_key::IdentityKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKey::serialize" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKey::serialize" -> "alloc::boxed::Box" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKey::serialize" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKey::serialize" -> "libsignal_protocol::identity_key::IdentityKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKey::serialize" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKey::try_from" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKey::try_from" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKey::try_from" -> "libsignal_protocol::identity_key::IdentityKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKey::try_from" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKey::verify_alternate_identity" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKey::verify_alternate_identity" -> "alloc::boxed::Box" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKey::verify_alternate_identity" -> "bool" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKey::verify_alternate_identity" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKey::verify_alternate_identity" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKey::verify_alternate_identity" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKey::verify_alternate_identity" -> "libsignal_protocol::identity_key::IdentityKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKey::verify_alternate_identity" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKey::verify_alternate_identity" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKeyPair" -> "libsignal_core::curve::PrivateKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKeyPair" -> "libsignal_protocol::identity_key::IdentityKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKeyPair" -> "libsignal_protocol::identity_key::IdentityKeyPair::Error" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::identity_key::IdentityKeyPair" -> "libsignal_protocol::identity_key::IdentityKeyPair::Error" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::identity_key::IdentityKeyPair" -> "libsignal_protocol::identity_key::IdentityKeyPair::clone" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::identity_key::IdentityKeyPair" -> "libsignal_protocol::identity_key::IdentityKeyPair::from" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::identity_key::IdentityKeyPair" -> "libsignal_protocol::identity_key::IdentityKeyPair::generate" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::identity_key::IdentityKeyPair" -> "libsignal_protocol::identity_key::IdentityKeyPair::identity_key" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::identity_key::IdentityKeyPair" -> "libsignal_protocol::identity_key::IdentityKeyPair::new" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::identity_key::IdentityKeyPair" -> "libsignal_protocol::identity_key::IdentityKeyPair::private_key" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::identity_key::IdentityKeyPair" -> "libsignal_protocol::identity_key::IdentityKeyPair::public_key" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::identity_key::IdentityKeyPair" -> "libsignal_protocol::identity_key::IdentityKeyPair::serialize" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::identity_key::IdentityKeyPair" -> "libsignal_protocol::identity_key::IdentityKeyPair::sign_alternate_identity" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::identity_key::IdentityKeyPair" -> "libsignal_protocol::identity_key::IdentityKeyPair::try_from" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::identity_key::IdentityKeyPair" -> "libsignal_protocol::identity_key::IdentityKeyPair::try_from" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::identity_key::IdentityKeyPair::Error" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKeyPair::Error" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKeyPair::clone" -> "libsignal_core::curve::PrivateKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKeyPair::clone" -> "libsignal_protocol::identity_key::IdentityKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKeyPair::clone" -> "libsignal_protocol::identity_key::IdentityKeyPair" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKeyPair::from" -> "libsignal_core::curve::KeyPair" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKeyPair::from" -> "libsignal_core::curve::PrivateKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKeyPair::from" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKeyPair::from" -> "libsignal_protocol::identity_key::IdentityKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKeyPair::from" -> "libsignal_protocol::identity_key::IdentityKeyPair" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKeyPair::generate" -> "libsignal_core::curve::KeyPair" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKeyPair::generate" -> "libsignal_core::curve::PrivateKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKeyPair::generate" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKeyPair::generate" -> "libsignal_protocol::identity_key::IdentityKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKeyPair::generate" -> "libsignal_protocol::identity_key::IdentityKeyPair" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKeyPair::identity_key" -> "libsignal_protocol::identity_key::IdentityKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKeyPair::identity_key" -> "libsignal_protocol::identity_key::IdentityKeyPair" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKeyPair::new" -> "libsignal_core::curve::PrivateKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKeyPair::new" -> "libsignal_protocol::identity_key::IdentityKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKeyPair::new" -> "libsignal_protocol::identity_key::IdentityKeyPair" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKeyPair::private_key" -> "libsignal_core::curve::PrivateKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKeyPair::private_key" -> "libsignal_protocol::identity_key::IdentityKeyPair" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKeyPair::public_key" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKeyPair::public_key" -> "libsignal_protocol::identity_key::IdentityKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKeyPair::public_key" -> "libsignal_protocol::identity_key::IdentityKeyPair" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKeyPair::serialize" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKeyPair::serialize" -> "alloc::boxed::Box" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKeyPair::serialize" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKeyPair::serialize" -> "libsignal_core::curve::PrivateKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKeyPair::serialize" -> "libsignal_protocol::identity_key::IdentityKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKeyPair::serialize" -> "libsignal_protocol::identity_key::IdentityKeyPair" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKeyPair::serialize" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKeyPair::sign_alternate_identity" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKeyPair::sign_alternate_identity" -> "alloc::boxed::Box" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKeyPair::sign_alternate_identity" -> "core::convert::Infallible" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKeyPair::sign_alternate_identity" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKeyPair::sign_alternate_identity" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKeyPair::sign_alternate_identity" -> "libsignal_core::curve::CurveError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKeyPair::sign_alternate_identity" -> "libsignal_core::curve::PrivateKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKeyPair::sign_alternate_identity" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKeyPair::sign_alternate_identity" -> "libsignal_protocol::identity_key::IdentityKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKeyPair::sign_alternate_identity" -> "libsignal_protocol::identity_key::IdentityKeyPair" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKeyPair::sign_alternate_identity" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKeyPair::sign_alternate_identity" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKeyPair::try_from" -> "core::convert::Infallible" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKeyPair::try_from" -> "core::convert::Infallible" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKeyPair::try_from" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKeyPair::try_from" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKeyPair::try_from" -> "core::ops::range::RangeFull" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKeyPair::try_from" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKeyPair::try_from" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKeyPair::try_from" -> "libsignal_core::curve::CurveError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKeyPair::try_from" -> "libsignal_core::curve::CurveError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKeyPair::try_from" -> "libsignal_core::curve::PrivateKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKeyPair::try_from" -> "libsignal_core::curve::PrivateKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKeyPair::try_from" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKeyPair::try_from" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKeyPair::try_from" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKeyPair::try_from" -> "libsignal_protocol::identity_key::IdentityKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKeyPair::try_from" -> "libsignal_protocol::identity_key::IdentityKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKeyPair::try_from" -> "libsignal_protocol::identity_key::IdentityKeyPair" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKeyPair::try_from" -> "libsignal_protocol::identity_key::IdentityKeyPair" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::identity_key::IdentityKeyPair::try_from" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::incremental_mac" -> "crypto_common::Output" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::incremental_mac" -> "digest::FixedOutput" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::incremental_mac" -> "digest::mac::Mac" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::incremental_mac" -> "digest::mac::MacError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::incremental_mac" -> "generic_array::ArrayLength" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::incremental_mac" -> "generic_array::GenericArray" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::incremental_mac" -> "libsignal_protocol::incremental_mac::Incremental" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::incremental_mac" -> "libsignal_protocol::incremental_mac::Validating" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::incremental_mac" -> "libsignal_protocol::incremental_mac::calculate_chunk_size" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::incremental_mac" -> "typenum::marker_traits::Unsigned" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::incremental_mac::Incremental" -> "libsignal_protocol::incremental_mac::Incremental::clone" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::incremental_mac::Incremental" -> "libsignal_protocol::incremental_mac::Incremental::finalize" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::incremental_mac::Incremental" -> "libsignal_protocol::incremental_mac::Incremental::new" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::incremental_mac::Incremental" -> "libsignal_protocol::incremental_mac::Incremental::pending_bytes_size" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::incremental_mac::Incremental" -> "libsignal_protocol::incremental_mac::Incremental::update" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::incremental_mac::Incremental" -> "libsignal_protocol::incremental_mac::Incremental::update_chunk" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::incremental_mac::Incremental" -> "libsignal_protocol::incremental_mac::Incremental::validating" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::incremental_mac::Incremental::clone" -> "libsignal_protocol::incremental_mac::Incremental" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::incremental_mac::Incremental::clone" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::incremental_mac::Incremental::finalize" -> "digest::mac::CtOutput" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::incremental_mac::Incremental::finalize" -> "generic_array::GenericArray" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::incremental_mac::Incremental::finalize" -> "libsignal_protocol::incremental_mac::Incremental" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::incremental_mac::Incremental::finalize" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::incremental_mac::Incremental::new" -> "bool" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::incremental_mac::Incremental::new" -> "core::fmt::Arguments" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::incremental_mac::Incremental::new" -> "core::fmt::rt::Argument" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::incremental_mac::Incremental::new" -> "core::fmt::rt::Placeholder" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::incremental_mac::Incremental::new" -> "core::fmt::rt::UnsafeArg" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::incremental_mac::Incremental::new" -> "libsignal_protocol::incremental_mac::Incremental" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::incremental_mac::Incremental::new" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::incremental_mac::Incremental::new" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::incremental_mac::Incremental::pending_bytes_size" -> "libsignal_protocol::incremental_mac::Incremental" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::incremental_mac::Incremental::pending_bytes_size" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::incremental_mac::Incremental::update" -> "core::iter::adapters::chain::Chain" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::incremental_mac::Incremental::update" -> "core::iter::adapters::flatten::FlatMap" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::incremental_mac::Incremental::update" -> "core::iter::sources::once::Once" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::incremental_mac::Incremental::update" -> "core::iter::traits::iterator::Iterator" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::incremental_mac::Incremental::update" -> "core::marker::Sized" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::incremental_mac::Incremental::update" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::incremental_mac::Incremental::update" -> "core::slice::iter::Chunks" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::incremental_mac::Incremental::update" -> "generic_array::GenericArray" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::incremental_mac::Incremental::update" -> "libsignal_protocol::incremental_mac::Incremental" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::incremental_mac::Incremental::update" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::incremental_mac::Incremental::update" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::incremental_mac::Incremental::update_chunk" -> "bool" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::incremental_mac::Incremental::update_chunk" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::incremental_mac::Incremental::update_chunk" -> "digest::mac::CtOutput" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::incremental_mac::Incremental::update_chunk" -> "generic_array::GenericArray" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::incremental_mac::Incremental::update_chunk" -> "libsignal_protocol::incremental_mac::Incremental" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::incremental_mac::Incremental::update_chunk" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::incremental_mac::Incremental::update_chunk" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::incremental_mac::Incremental::validating" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::incremental_mac::Incremental::validating" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::incremental_mac::Incremental::validating" -> "core::iter::adapters::map::Map" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::incremental_mac::Incremental::validating" -> "core::iter::adapters::rev::Rev" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::incremental_mac::Incremental::validating" -> "generic_array::GenericArray" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::incremental_mac::Incremental::validating" -> "libsignal_protocol::incremental_mac::Incremental" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::incremental_mac::Incremental::validating" -> "libsignal_protocol::incremental_mac::Validating" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::incremental_mac::Incremental::validating" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::incremental_mac::Validating" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::incremental_mac::Validating" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::incremental_mac::Validating" -> "generic_array::GenericArray" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::incremental_mac::Validating" -> "libsignal_protocol::incremental_mac::Incremental" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::incremental_mac::Validating" -> "libsignal_protocol::incremental_mac::Validating::clone" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::incremental_mac::Validating" -> "libsignal_protocol::incremental_mac::Validating::finalize" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::incremental_mac::Validating" -> "libsignal_protocol::incremental_mac::Validating::update" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::incremental_mac::Validating::clone" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::incremental_mac::Validating::clone" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::incremental_mac::Validating::clone" -> "generic_array::GenericArray" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::incremental_mac::Validating::clone" -> "libsignal_protocol::incremental_mac::Incremental" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::incremental_mac::Validating::clone" -> "libsignal_protocol::incremental_mac::Validating" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::incremental_mac::Validating::clone" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::incremental_mac::Validating::finalize" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::incremental_mac::Validating::finalize" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::incremental_mac::Validating::finalize" -> "bool" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::incremental_mac::Validating::finalize" -> "core::ops::range::RangeFull" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::incremental_mac::Validating::finalize" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::incremental_mac::Validating::finalize" -> "digest::mac::MacError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::incremental_mac::Validating::finalize" -> "generic_array::GenericArray" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::incremental_mac::Validating::finalize" -> "libsignal_protocol::incremental_mac::Incremental" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::incremental_mac::Validating::finalize" -> "libsignal_protocol::incremental_mac::Validating" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::incremental_mac::Validating::finalize" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::incremental_mac::Validating::finalize" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::incremental_mac::Validating::update" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::incremental_mac::Validating::update" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::incremental_mac::Validating::update" -> "bool" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::incremental_mac::Validating::update" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::incremental_mac::Validating::update" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::incremental_mac::Validating::update" -> "digest::mac::MacError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::incremental_mac::Validating::update" -> "generic_array::GenericArray" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::incremental_mac::Validating::update" -> "i32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::incremental_mac::Validating::update" -> "libsignal_protocol::incremental_mac::Incremental" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::incremental_mac::Validating::update" -> "libsignal_protocol::incremental_mac::Validating" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::incremental_mac::Validating::update" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::incremental_mac::Validating::update" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::incremental_mac::calculate_chunk_size" -> "bool" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::incremental_mac::calculate_chunk_size" -> "core::fmt::Arguments" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::incremental_mac::calculate_chunk_size" -> "core::fmt::rt::Argument" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::incremental_mac::calculate_chunk_size" -> "core::fmt::rt::Placeholder" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::incremental_mac::calculate_chunk_size" -> "core::fmt::rt::UnsafeArg" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::incremental_mac::calculate_chunk_size" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::incremental_mac::calculate_chunk_size" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem" -> "core::marker::PhantomData" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem" -> "libsignal_protocol::error::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem" -> "libsignal_protocol::kem::Ciphertext" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::kem" -> "libsignal_protocol::kem::DynParameters" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::kem" -> "libsignal_protocol::kem::Key" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::kem" -> "libsignal_protocol::kem::KeyKind" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::kem" -> "libsignal_protocol::kem::KeyMaterial" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::kem" -> "libsignal_protocol::kem::KeyPair" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::kem" -> "libsignal_protocol::kem::KeyType" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::kem" -> "libsignal_protocol::kem::Parameters" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::kem" -> "libsignal_protocol::kem::Public" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::kem" -> "libsignal_protocol::kem::PublicKey" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::kem" -> "libsignal_protocol::kem::RawCiphertext" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::kem" -> "libsignal_protocol::kem::Secret" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::kem" -> "libsignal_protocol::kem::SecretKey" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::kem" -> "libsignal_protocol::kem::SerializedCiphertext" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::kem" -> "libsignal_protocol::kem::SharedSecret" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::kem" -> "libsignal_protocol::kem::kyber1024" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::kem" -> "subtle::ConstantTimeEq" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Ciphertext" -> "libsignal_protocol::kem::Ciphertext::deserialize" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::kem::Ciphertext" -> "libsignal_protocol::kem::Ciphertext::serialize" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::kem::Ciphertext" -> "libsignal_protocol::kem::KeyType" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Ciphertext::deserialize" -> "bool" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Ciphertext::deserialize" -> "core::convert::Infallible" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Ciphertext::deserialize" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Ciphertext::deserialize" -> "core::ops::range::RangeFrom" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Ciphertext::deserialize" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Ciphertext::deserialize" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Ciphertext::deserialize" -> "libsignal_protocol::kem::Ciphertext" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Ciphertext::deserialize" -> "libsignal_protocol::kem::KeyType" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Ciphertext::deserialize" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Ciphertext::deserialize" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Ciphertext::serialize" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Ciphertext::serialize" -> "alloc::boxed::Box" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Ciphertext::serialize" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Ciphertext::serialize" -> "libsignal_protocol::kem::Ciphertext" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Ciphertext::serialize" -> "libsignal_protocol::kem::KeyType" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Ciphertext::serialize" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Ciphertext::serialize" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Key" -> "libsignal_protocol::kem::Key::Error" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::kem::Key" -> "libsignal_protocol::kem::Key::Error" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::kem::Key" -> "libsignal_protocol::kem::Key::ct_eq" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::kem::Key" -> "libsignal_protocol::kem::Key::decapsulate" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::kem::Key" -> "libsignal_protocol::kem::Key::deserialize" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::kem::Key" -> "libsignal_protocol::kem::Key::deserialize" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::kem::Key" -> "libsignal_protocol::kem::Key::deserialize" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::kem::Key" -> "libsignal_protocol::kem::Key::encapsulate" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::kem::Key" -> "libsignal_protocol::kem::Key::eq" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::kem::Key" -> "libsignal_protocol::kem::Key::key_type" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::kem::Key" -> "libsignal_protocol::kem::Key::serialize" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::kem::Key" -> "libsignal_protocol::kem::Key::serialize" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::kem::Key" -> "libsignal_protocol::kem::Key::serialize" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::kem::Key" -> "libsignal_protocol::kem::Key::try_from" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::kem::Key" -> "libsignal_protocol::kem::Key::try_from" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::kem::Key" -> "libsignal_protocol::kem::KeyMaterial" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Key" -> "libsignal_protocol::kem::KeyType" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Key::Error" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Key::Error" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Key::ct_eq" -> "bool" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Key::ct_eq" -> "i32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Key::ct_eq" -> "libsignal_protocol::kem::Key" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Key::ct_eq" -> "libsignal_protocol::kem::KeyMaterial" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Key::ct_eq" -> "libsignal_protocol::kem::KeyType" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Key::ct_eq" -> "libsignal_protocol::kem::Public" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Key::ct_eq" -> "subtle::Choice" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Key::decapsulate" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Key::decapsulate" -> "alloc::boxed::Box" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Key::decapsulate" -> "bool" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Key::decapsulate" -> "core::convert::Infallible" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Key::decapsulate" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Key::decapsulate" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Key::decapsulate" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Key::decapsulate" -> "libsignal_protocol::kem::Ciphertext" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Key::decapsulate" -> "libsignal_protocol::kem::Key" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Key::decapsulate" -> "libsignal_protocol::kem::KeyMaterial" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Key::decapsulate" -> "libsignal_protocol::kem::KeyType" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Key::decapsulate" -> "libsignal_protocol::kem::Secret" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Key::decapsulate" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Key::deserialize" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Key::deserialize" -> "alloc::boxed::Box" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Key::deserialize" -> "bool" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Key::deserialize" -> "core::convert::Infallible" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Key::deserialize" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Key::deserialize" -> "core::ops::range::RangeFrom" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Key::deserialize" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Key::deserialize" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Key::deserialize" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Key::deserialize" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Key::deserialize" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Key::deserialize" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Key::deserialize" -> "libsignal_protocol::kem::Key" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Key::deserialize" -> "libsignal_protocol::kem::Key" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Key::deserialize" -> "libsignal_protocol::kem::Key" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Key::deserialize" -> "libsignal_protocol::kem::KeyMaterial" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Key::deserialize" -> "libsignal_protocol::kem::KeyType" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Key::deserialize" -> "libsignal_protocol::kem::Public" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Key::deserialize" -> "libsignal_protocol::kem::Secret" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Key::deserialize" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Key::deserialize" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Key::deserialize" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Key::deserialize" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Key::encapsulate" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Key::encapsulate" -> "alloc::boxed::Box" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Key::encapsulate" -> "libsignal_protocol::kem::Ciphertext" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Key::encapsulate" -> "libsignal_protocol::kem::Key" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Key::encapsulate" -> "libsignal_protocol::kem::KeyMaterial" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Key::encapsulate" -> "libsignal_protocol::kem::KeyType" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Key::encapsulate" -> "libsignal_protocol::kem::Public" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Key::encapsulate" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Key::eq" -> "bool" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Key::eq" -> "libsignal_protocol::kem::Key" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Key::eq" -> "libsignal_protocol::kem::Public" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Key::eq" -> "subtle::Choice" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Key::key_type" -> "libsignal_protocol::kem::Key" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Key::key_type" -> "libsignal_protocol::kem::KeyType" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Key::serialize" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Key::serialize" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Key::serialize" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Key::serialize" -> "alloc::boxed::Box" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Key::serialize" -> "alloc::boxed::Box" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Key::serialize" -> "alloc::boxed::Box" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Key::serialize" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Key::serialize" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Key::serialize" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Key::serialize" -> "i32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Key::serialize" -> "libsignal_protocol::kem::Key" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Key::serialize" -> "libsignal_protocol::kem::Key" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Key::serialize" -> "libsignal_protocol::kem::Key" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Key::serialize" -> "libsignal_protocol::kem::KeyMaterial" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Key::serialize" -> "libsignal_protocol::kem::KeyType" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Key::serialize" -> "libsignal_protocol::kem::Public" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Key::serialize" -> "libsignal_protocol::kem::Secret" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Key::serialize" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Key::serialize" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Key::serialize" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Key::serialize" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Key::try_from" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Key::try_from" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Key::try_from" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Key::try_from" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Key::try_from" -> "libsignal_protocol::kem::Key" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Key::try_from" -> "libsignal_protocol::kem::Key" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Key::try_from" -> "libsignal_protocol::kem::Public" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Key::try_from" -> "libsignal_protocol::kem::Secret" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Key::try_from" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Key::try_from" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::KeyMaterial" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::KeyMaterial" -> "alloc::boxed::Box" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::KeyMaterial" -> "core::marker::PhantomData" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::KeyMaterial" -> "libsignal_protocol::kem::KeyMaterial::new" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::kem::KeyMaterial::new" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::KeyMaterial::new" -> "alloc::boxed::Box" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::KeyMaterial::new" -> "core::marker::PhantomData" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::KeyMaterial::new" -> "libsignal_protocol::kem::KeyMaterial" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::KeyMaterial::new" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::KeyPair" -> "libsignal_protocol::kem::Key" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::KeyPair" -> "libsignal_protocol::kem::KeyPair::PrivateKey" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::kem::KeyPair" -> "libsignal_protocol::kem::KeyPair::PublicKey" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::kem::KeyPair" -> "libsignal_protocol::kem::KeyPair::clone" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::kem::KeyPair" -> "libsignal_protocol::kem::KeyPair::from_public_and_private" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::kem::KeyPair" -> "libsignal_protocol::kem::KeyPair::from_public_and_private" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::kem::KeyPair" -> "libsignal_protocol::kem::KeyPair::generate" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::kem::KeyPair" -> "libsignal_protocol::kem::KeyPair::get_private" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::kem::KeyPair" -> "libsignal_protocol::kem::KeyPair::get_public" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::kem::KeyPair" -> "libsignal_protocol::kem::KeyPair::new" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::kem::KeyPair" -> "libsignal_protocol::kem::Public" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::KeyPair" -> "libsignal_protocol::kem::Secret" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::KeyPair::PrivateKey" -> "libsignal_protocol::kem::Key" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::KeyPair::PrivateKey" -> "libsignal_protocol::kem::Secret" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::KeyPair::PublicKey" -> "libsignal_protocol::kem::Key" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::KeyPair::PublicKey" -> "libsignal_protocol::kem::Public" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::KeyPair::clone" -> "libsignal_protocol::kem::Key" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::KeyPair::clone" -> "libsignal_protocol::kem::KeyPair" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::KeyPair::clone" -> "libsignal_protocol::kem::Public" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::KeyPair::clone" -> "libsignal_protocol::kem::Secret" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::KeyPair::from_public_and_private" -> "bool" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::KeyPair::from_public_and_private" -> "core::convert::Infallible" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::KeyPair::from_public_and_private" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::KeyPair::from_public_and_private" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::KeyPair::from_public_and_private" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::KeyPair::from_public_and_private" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::KeyPair::from_public_and_private" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::KeyPair::from_public_and_private" -> "libsignal_protocol::kem::Key" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::KeyPair::from_public_and_private" -> "libsignal_protocol::kem::KeyPair" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::KeyPair::from_public_and_private" -> "libsignal_protocol::kem::KeyPair" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::KeyPair::from_public_and_private" -> "libsignal_protocol::kem::KeyType" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::KeyPair::from_public_and_private" -> "libsignal_protocol::kem::Public" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::KeyPair::from_public_and_private" -> "libsignal_protocol::kem::Secret" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::KeyPair::from_public_and_private" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::KeyPair::from_public_and_private" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::KeyPair::generate" -> "libsignal_protocol::kem::Key" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::KeyPair::generate" -> "libsignal_protocol::kem::KeyMaterial" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::KeyPair::generate" -> "libsignal_protocol::kem::KeyPair" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::KeyPair::generate" -> "libsignal_protocol::kem::KeyType" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::KeyPair::generate" -> "libsignal_protocol::kem::Public" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::KeyPair::generate" -> "libsignal_protocol::kem::Secret" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::KeyPair::get_private" -> "libsignal_protocol::kem::Key" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::KeyPair::get_private" -> "libsignal_protocol::kem::KeyPair" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::KeyPair::get_private" -> "libsignal_protocol::kem::Secret" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::KeyPair::get_public" -> "libsignal_protocol::kem::Key" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::KeyPair::get_public" -> "libsignal_protocol::kem::KeyPair" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::KeyPair::get_public" -> "libsignal_protocol::kem::Public" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::KeyPair::new" -> "bool" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::KeyPair::new" -> "core::fmt::Arguments" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::KeyPair::new" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::KeyPair::new" -> "core::panicking::AssertKind" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::KeyPair::new" -> "libsignal_protocol::kem::Key" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::KeyPair::new" -> "libsignal_protocol::kem::KeyPair" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::KeyPair::new" -> "libsignal_protocol::kem::KeyType" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::KeyPair::new" -> "libsignal_protocol::kem::Public" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::KeyPair::new" -> "libsignal_protocol::kem::Secret" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::KeyType" -> "libsignal_protocol::kem::KeyType::Error" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::kem::KeyType" -> "libsignal_protocol::kem::KeyType::clone" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::kem::KeyType" -> "libsignal_protocol::kem::KeyType::eq" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::kem::KeyType" -> "libsignal_protocol::kem::KeyType::fmt" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::kem::KeyType" -> "libsignal_protocol::kem::KeyType::parameters" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::kem::KeyType" -> "libsignal_protocol::kem::KeyType::try_from" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::kem::KeyType" -> "libsignal_protocol::kem::KeyType::value" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::kem::KeyType::Error" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::KeyType::clone" -> "libsignal_protocol::kem::KeyType" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::KeyType::eq" -> "bool" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::KeyType::eq" -> "libsignal_protocol::kem::KeyType" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::KeyType::fmt" -> "core::fmt::Error" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::KeyType::fmt" -> "core::fmt::Formatter" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::KeyType::fmt" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::KeyType::fmt" -> "libsignal_protocol::kem::KeyType" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::KeyType::fmt" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::KeyType::parameters" -> "libsignal_protocol::kem::DynParameters" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::KeyType::parameters" -> "libsignal_protocol::kem::KeyType" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::KeyType::parameters" -> "libsignal_protocol::kem::kyber1024::Parameters" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::KeyType::try_from" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::KeyType::try_from" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::KeyType::try_from" -> "libsignal_protocol::kem::KeyType" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::KeyType::try_from" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::KeyType::value" -> "libsignal_protocol::kem::KeyType" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::KeyType::value" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Public" -> "libsignal_protocol::kem::Public::key_length" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::kem::Public::key_length" -> "libsignal_protocol::kem::KeyType" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Public::key_length" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::PublicKey" -> "libsignal_protocol::kem::Key" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::PublicKey" -> "libsignal_protocol::kem::Public" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::RawCiphertext" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::RawCiphertext" -> "alloc::boxed::Box" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Secret" -> "libsignal_protocol::kem::Secret::key_length" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::kem::Secret::key_length" -> "libsignal_protocol::kem::KeyType" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::Secret::key_length" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::SecretKey" -> "libsignal_protocol::kem::Key" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::SecretKey" -> "libsignal_protocol::kem::Secret" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::SerializedCiphertext" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::SerializedCiphertext" -> "alloc::boxed::Box" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::SharedSecret" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::SharedSecret" -> "alloc::boxed::Box" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::kyber1024" -> "libsignal_protocol::error::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::kyber1024" -> "libsignal_protocol::kem::KeyMaterial" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::kyber1024" -> "libsignal_protocol::kem::Public" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::kyber1024" -> "libsignal_protocol::kem::Secret" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::kyber1024" -> "libsignal_protocol::kem::kyber1024::Parameters" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::kem::kyber1024" -> "pqcrypto_traits::kem::Ciphertext" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::kyber1024" -> "pqcrypto_traits::kem::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::kyber1024" -> "pqcrypto_traits::kem::SecretKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::kyber1024" -> "pqcrypto_traits::kem::SharedSecret" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::kyber1024::Parameters" -> "libsignal_protocol::kem::kyber1024::Parameters::decapsulate" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::kem::kyber1024::Parameters" -> "libsignal_protocol::kem::kyber1024::Parameters::encapsulate" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::kem::kyber1024::Parameters" -> "libsignal_protocol::kem::kyber1024::Parameters::generate" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::kem::kyber1024::Parameters::decapsulate" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::kyber1024::Parameters::decapsulate" -> "alloc::boxed::Box" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::kyber1024::Parameters::decapsulate" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::kyber1024::Parameters::decapsulate" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::kyber1024::Parameters::decapsulate" -> "libsignal_protocol::kem::KeyMaterial" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::kyber1024::Parameters::decapsulate" -> "libsignal_protocol::kem::Secret" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::kyber1024::Parameters::decapsulate" -> "pqcrypto_kyber::kyber1024::Ciphertext" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::kyber1024::Parameters::decapsulate" -> "pqcrypto_kyber::kyber1024::SecretKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::kyber1024::Parameters::decapsulate" -> "pqcrypto_kyber::kyber1024::SharedSecret" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::kyber1024::Parameters::decapsulate" -> "pqcrypto_traits::Error" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::kyber1024::Parameters::decapsulate" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::kyber1024::Parameters::decapsulate" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::kyber1024::Parameters::encapsulate" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::kyber1024::Parameters::encapsulate" -> "alloc::boxed::Box" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::kyber1024::Parameters::encapsulate" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::kyber1024::Parameters::encapsulate" -> "libsignal_protocol::kem::KeyMaterial" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::kyber1024::Parameters::encapsulate" -> "libsignal_protocol::kem::Public" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::kyber1024::Parameters::encapsulate" -> "pqcrypto_kyber::kyber1024::Ciphertext" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::kyber1024::Parameters::encapsulate" -> "pqcrypto_kyber::kyber1024::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::kyber1024::Parameters::encapsulate" -> "pqcrypto_kyber::kyber1024::SharedSecret" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::kyber1024::Parameters::encapsulate" -> "pqcrypto_traits::Error" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::kyber1024::Parameters::encapsulate" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::kyber1024::Parameters::encapsulate" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::kyber1024::Parameters::generate" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::kyber1024::Parameters::generate" -> "alloc::boxed::Box" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::kyber1024::Parameters::generate" -> "libsignal_protocol::kem::KeyMaterial" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::kyber1024::Parameters::generate" -> "libsignal_protocol::kem::Public" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::kyber1024::Parameters::generate" -> "libsignal_protocol::kem::Secret" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::kyber1024::Parameters::generate" -> "pqcrypto_kyber::kyber1024::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::kyber1024::Parameters::generate" -> "pqcrypto_kyber::kyber1024::SecretKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::kem::kyber1024::Parameters::generate" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::proto" -> "libsignal_protocol::proto::fingerprint" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::proto" -> "libsignal_protocol::proto::sealed_sender" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::proto" -> "libsignal_protocol::proto::service" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::proto" -> "libsignal_protocol::proto::storage" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::proto" -> "libsignal_protocol::proto::wire" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::protocol" -> "digest::mac::Mac" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol" -> "hmac::optim::Hmac" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol" -> "libsignal_core::curve::PrivateKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol" -> "libsignal_protocol::error::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol" -> "libsignal_protocol::identity_key::IdentityKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol" -> "libsignal_protocol::kem" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol" -> "libsignal_protocol::proto" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol" -> "libsignal_protocol::protocol::CiphertextMessage" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::protocol" -> "libsignal_protocol::protocol::CiphertextMessageType" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::protocol" -> "libsignal_protocol::protocol::DecryptionErrorMessage" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::protocol" -> "libsignal_protocol::protocol::KyberPayload" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::protocol" -> "libsignal_protocol::protocol::PlaintextContent" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::protocol" -> "libsignal_protocol::protocol::PreKeySignalMessage" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::protocol" -> "libsignal_protocol::protocol::SenderKeyDistributionMessage" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::protocol" -> "libsignal_protocol::protocol::SenderKeyMessage" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::protocol" -> "libsignal_protocol::protocol::SignalMessage" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::protocol" -> "libsignal_protocol::protocol::extract_decryption_error_message_from_serialized_content" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::protocol" -> "libsignal_protocol::state::kyber_prekey::KyberPreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol" -> "libsignal_protocol::state::prekey::PreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol" -> "libsignal_protocol::state::signed_prekey::SignedPreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol" -> "libsignal_protocol::timestamp::Timestamp" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol" -> "prost::message::Message" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol" -> "rand::rng::Rng" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol" -> "rand_core::CryptoRng" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol" -> "sha2::Sha256" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol" -> "subtle::ConstantTimeEq" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol" -> "uuid::Uuid" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::CiphertextMessage" -> "libsignal_protocol::protocol::CiphertextMessage::fmt" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::protocol::CiphertextMessage" -> "libsignal_protocol::protocol::CiphertextMessage::message_type" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::protocol::CiphertextMessage" -> "libsignal_protocol::protocol::CiphertextMessage::serialize" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::protocol::CiphertextMessage" -> "libsignal_protocol::protocol::PlaintextContent" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::CiphertextMessage" -> "libsignal_protocol::protocol::PreKeySignalMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::CiphertextMessage" -> "libsignal_protocol::protocol::SenderKeyMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::CiphertextMessage" -> "libsignal_protocol::protocol::SignalMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::CiphertextMessage::fmt" -> "core::fmt::Error" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::CiphertextMessage::fmt" -> "core::fmt::Formatter" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::CiphertextMessage::fmt" -> "core::fmt::builders::DebugTuple" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::CiphertextMessage::fmt" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::CiphertextMessage::fmt" -> "libsignal_protocol::protocol::CiphertextMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::CiphertextMessage::fmt" -> "libsignal_protocol::protocol::PlaintextContent" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::CiphertextMessage::fmt" -> "libsignal_protocol::protocol::PreKeySignalMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::CiphertextMessage::fmt" -> "libsignal_protocol::protocol::SenderKeyMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::CiphertextMessage::fmt" -> "libsignal_protocol::protocol::SignalMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::CiphertextMessage::fmt" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::CiphertextMessage::message_type" -> "libsignal_protocol::protocol::CiphertextMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::CiphertextMessage::message_type" -> "libsignal_protocol::protocol::CiphertextMessageType" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::CiphertextMessage::message_type" -> "libsignal_protocol::protocol::PlaintextContent" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::CiphertextMessage::message_type" -> "libsignal_protocol::protocol::PreKeySignalMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::CiphertextMessage::message_type" -> "libsignal_protocol::protocol::SenderKeyMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::CiphertextMessage::message_type" -> "libsignal_protocol::protocol::SignalMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::CiphertextMessage::serialize" -> "libsignal_protocol::protocol::CiphertextMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::CiphertextMessage::serialize" -> "libsignal_protocol::protocol::PlaintextContent" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::CiphertextMessage::serialize" -> "libsignal_protocol::protocol::PreKeySignalMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::CiphertextMessage::serialize" -> "libsignal_protocol::protocol::SenderKeyMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::CiphertextMessage::serialize" -> "libsignal_protocol::protocol::SignalMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::CiphertextMessage::serialize" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::CiphertextMessageType" -> "libsignal_protocol::protocol::CiphertextMessageType::clone" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::protocol::CiphertextMessageType" -> "libsignal_protocol::protocol::CiphertextMessageType::eq" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::protocol::CiphertextMessageType" -> "libsignal_protocol::protocol::CiphertextMessageType::fmt" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::protocol::CiphertextMessageType" -> "libsignal_protocol::protocol::CiphertextMessageType::from" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::protocol::CiphertextMessageType::clone" -> "libsignal_protocol::protocol::CiphertextMessageType" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::CiphertextMessageType::eq" -> "bool" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::CiphertextMessageType::eq" -> "libsignal_protocol::protocol::CiphertextMessageType" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::CiphertextMessageType::fmt" -> "core::fmt::Error" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::CiphertextMessageType::fmt" -> "core::fmt::Formatter" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::CiphertextMessageType::fmt" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::CiphertextMessageType::fmt" -> "libsignal_protocol::protocol::CiphertextMessageType" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::CiphertextMessageType::fmt" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::CiphertextMessageType::from" -> "bool" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::CiphertextMessageType::from" -> "i32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::CiphertextMessageType::from" -> "libsignal_protocol::protocol::CiphertextMessageType" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::DecryptionErrorMessage" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::DecryptionErrorMessage" -> "alloc::boxed::Box" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::DecryptionErrorMessage" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::DecryptionErrorMessage" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::DecryptionErrorMessage" -> "libsignal_protocol::protocol::DecryptionErrorMessage::Error" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::protocol::DecryptionErrorMessage" -> "libsignal_protocol::protocol::DecryptionErrorMessage::clone" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::protocol::DecryptionErrorMessage" -> "libsignal_protocol::protocol::DecryptionErrorMessage::device_id" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::protocol::DecryptionErrorMessage" -> "libsignal_protocol::protocol::DecryptionErrorMessage::fmt" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::protocol::DecryptionErrorMessage" -> "libsignal_protocol::protocol::DecryptionErrorMessage::for_original" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::protocol::DecryptionErrorMessage" -> "libsignal_protocol::protocol::DecryptionErrorMessage::ratchet_key" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::protocol::DecryptionErrorMessage" -> "libsignal_protocol::protocol::DecryptionErrorMessage::serialized" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::protocol::DecryptionErrorMessage" -> "libsignal_protocol::protocol::DecryptionErrorMessage::timestamp" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::protocol::DecryptionErrorMessage" -> "libsignal_protocol::protocol::DecryptionErrorMessage::try_from" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::protocol::DecryptionErrorMessage" -> "libsignal_protocol::timestamp::Timestamp" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::DecryptionErrorMessage::Error" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::DecryptionErrorMessage::clone" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::DecryptionErrorMessage::clone" -> "alloc::boxed::Box" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::DecryptionErrorMessage::clone" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::DecryptionErrorMessage::clone" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::DecryptionErrorMessage::clone" -> "libsignal_protocol::protocol::DecryptionErrorMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::DecryptionErrorMessage::clone" -> "libsignal_protocol::timestamp::Timestamp" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::DecryptionErrorMessage::clone" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::DecryptionErrorMessage::clone" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::DecryptionErrorMessage::device_id" -> "libsignal_protocol::protocol::DecryptionErrorMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::DecryptionErrorMessage::device_id" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::DecryptionErrorMessage::fmt" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::DecryptionErrorMessage::fmt" -> "alloc::boxed::Box" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::DecryptionErrorMessage::fmt" -> "core::fmt::Error" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::DecryptionErrorMessage::fmt" -> "core::fmt::Formatter" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::DecryptionErrorMessage::fmt" -> "core::fmt::builders::DebugStruct" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::DecryptionErrorMessage::fmt" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::DecryptionErrorMessage::fmt" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::DecryptionErrorMessage::fmt" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::DecryptionErrorMessage::fmt" -> "libsignal_protocol::protocol::DecryptionErrorMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::DecryptionErrorMessage::fmt" -> "libsignal_protocol::timestamp::Timestamp" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::DecryptionErrorMessage::fmt" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::DecryptionErrorMessage::fmt" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::DecryptionErrorMessage::fmt" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::DecryptionErrorMessage::for_original" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::DecryptionErrorMessage::for_original" -> "alloc::boxed::Box" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::DecryptionErrorMessage::for_original" -> "alloc::string::String" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::DecryptionErrorMessage::for_original" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::DecryptionErrorMessage::for_original" -> "core::convert::Infallible" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::DecryptionErrorMessage::for_original" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::DecryptionErrorMessage::for_original" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::DecryptionErrorMessage::for_original" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::DecryptionErrorMessage::for_original" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::DecryptionErrorMessage::for_original" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::DecryptionErrorMessage::for_original" -> "libsignal_protocol::protocol::CiphertextMessageType" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::DecryptionErrorMessage::for_original" -> "libsignal_protocol::protocol::DecryptionErrorMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::DecryptionErrorMessage::for_original" -> "libsignal_protocol::protocol::PreKeySignalMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::DecryptionErrorMessage::for_original" -> "libsignal_protocol::protocol::SignalMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::DecryptionErrorMessage::for_original" -> "libsignal_protocol::timestamp::Timestamp" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::DecryptionErrorMessage::for_original" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::DecryptionErrorMessage::for_original" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::DecryptionErrorMessage::for_original" -> "u64" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::DecryptionErrorMessage::for_original" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::DecryptionErrorMessage::ratchet_key" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::DecryptionErrorMessage::ratchet_key" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::DecryptionErrorMessage::ratchet_key" -> "libsignal_protocol::protocol::DecryptionErrorMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::DecryptionErrorMessage::serialized" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::DecryptionErrorMessage::serialized" -> "alloc::boxed::Box" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::DecryptionErrorMessage::serialized" -> "libsignal_protocol::protocol::DecryptionErrorMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::DecryptionErrorMessage::serialized" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::DecryptionErrorMessage::timestamp" -> "libsignal_protocol::protocol::DecryptionErrorMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::DecryptionErrorMessage::timestamp" -> "libsignal_protocol::timestamp::Timestamp" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::DecryptionErrorMessage::try_from" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::DecryptionErrorMessage::try_from" -> "alloc::boxed::Box" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::DecryptionErrorMessage::try_from" -> "core::iter::adapters::map::Map" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::DecryptionErrorMessage::try_from" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::DecryptionErrorMessage::try_from" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::DecryptionErrorMessage::try_from" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::DecryptionErrorMessage::try_from" -> "libsignal_core::curve::CurveError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::DecryptionErrorMessage::try_from" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::DecryptionErrorMessage::try_from" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::DecryptionErrorMessage::try_from" -> "libsignal_protocol::protocol::DecryptionErrorMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::DecryptionErrorMessage::try_from" -> "libsignal_protocol::timestamp::Timestamp" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::DecryptionErrorMessage::try_from" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::DecryptionErrorMessage::try_from" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::KyberPayload" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::KyberPayload" -> "alloc::boxed::Box" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::KyberPayload" -> "libsignal_protocol::protocol::KyberPayload::clone" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::protocol::KyberPayload" -> "libsignal_protocol::protocol::KyberPayload::fmt" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::protocol::KyberPayload" -> "libsignal_protocol::protocol::KyberPayload::new" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::protocol::KyberPayload" -> "libsignal_protocol::state::kyber_prekey::KyberPreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::KyberPayload::clone" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::KyberPayload::clone" -> "alloc::boxed::Box" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::KyberPayload::clone" -> "libsignal_protocol::protocol::KyberPayload" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::KyberPayload::clone" -> "libsignal_protocol::state::kyber_prekey::KyberPreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::KyberPayload::clone" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::KyberPayload::fmt" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::KyberPayload::fmt" -> "alloc::boxed::Box" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::KyberPayload::fmt" -> "core::fmt::Error" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::KyberPayload::fmt" -> "core::fmt::Formatter" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::KyberPayload::fmt" -> "core::fmt::builders::DebugStruct" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::KyberPayload::fmt" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::KyberPayload::fmt" -> "libsignal_protocol::protocol::KyberPayload" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::KyberPayload::fmt" -> "libsignal_protocol::state::kyber_prekey::KyberPreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::KyberPayload::fmt" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::KyberPayload::fmt" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::KyberPayload::new" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::KyberPayload::new" -> "alloc::boxed::Box" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::KyberPayload::new" -> "libsignal_protocol::protocol::KyberPayload" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::KyberPayload::new" -> "libsignal_protocol::state::kyber_prekey::KyberPreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::KyberPayload::new" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PlaintextContent" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PlaintextContent" -> "alloc::boxed::Box" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PlaintextContent" -> "libsignal_protocol::protocol::PlaintextContent::Error" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::protocol::PlaintextContent" -> "libsignal_protocol::protocol::PlaintextContent::body" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::protocol::PlaintextContent" -> "libsignal_protocol::protocol::PlaintextContent::clone" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::protocol::PlaintextContent" -> "libsignal_protocol::protocol::PlaintextContent::fmt" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::protocol::PlaintextContent" -> "libsignal_protocol::protocol::PlaintextContent::from" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::protocol::PlaintextContent" -> "libsignal_protocol::protocol::PlaintextContent::serialized" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::protocol::PlaintextContent" -> "libsignal_protocol::protocol::PlaintextContent::try_from" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::protocol::PlaintextContent::Error" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PlaintextContent::body" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PlaintextContent::body" -> "alloc::boxed::Box" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PlaintextContent::body" -> "core::ops::range::RangeFrom" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PlaintextContent::body" -> "libsignal_protocol::protocol::PlaintextContent" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PlaintextContent::body" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PlaintextContent::body" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PlaintextContent::clone" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PlaintextContent::clone" -> "alloc::boxed::Box" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PlaintextContent::clone" -> "libsignal_protocol::protocol::PlaintextContent" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PlaintextContent::clone" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PlaintextContent::fmt" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PlaintextContent::fmt" -> "alloc::boxed::Box" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PlaintextContent::fmt" -> "core::fmt::Error" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PlaintextContent::fmt" -> "core::fmt::Formatter" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PlaintextContent::fmt" -> "core::fmt::builders::DebugStruct" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PlaintextContent::fmt" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PlaintextContent::fmt" -> "libsignal_protocol::protocol::PlaintextContent" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PlaintextContent::fmt" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PlaintextContent::fmt" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PlaintextContent::from" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PlaintextContent::from" -> "alloc::boxed::Box" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PlaintextContent::from" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PlaintextContent::from" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PlaintextContent::from" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PlaintextContent::from" -> "libsignal_protocol::protocol::DecryptionErrorMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PlaintextContent::from" -> "libsignal_protocol::protocol::PlaintextContent" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PlaintextContent::from" -> "prost::error::EncodeError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PlaintextContent::from" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PlaintextContent::from" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PlaintextContent::from" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PlaintextContent::serialized" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PlaintextContent::serialized" -> "alloc::boxed::Box" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PlaintextContent::serialized" -> "libsignal_protocol::protocol::PlaintextContent" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PlaintextContent::serialized" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PlaintextContent::try_from" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PlaintextContent::try_from" -> "alloc::boxed::Box" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PlaintextContent::try_from" -> "bool" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PlaintextContent::try_from" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PlaintextContent::try_from" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PlaintextContent::try_from" -> "libsignal_protocol::protocol::PlaintextContent" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PlaintextContent::try_from" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PlaintextContent::try_from" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PlaintextContent::try_from" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage" -> "alloc::boxed::Box" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage" -> "libsignal_protocol::identity_key::IdentityKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage" -> "libsignal_protocol::protocol::KyberPayload" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage" -> "libsignal_protocol::protocol::PreKeySignalMessage::Error" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::protocol::PreKeySignalMessage" -> "libsignal_protocol::protocol::PreKeySignalMessage::as_ref" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::protocol::PreKeySignalMessage" -> "libsignal_protocol::protocol::PreKeySignalMessage::base_key" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::protocol::PreKeySignalMessage" -> "libsignal_protocol::protocol::PreKeySignalMessage::clone" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::protocol::PreKeySignalMessage" -> "libsignal_protocol::protocol::PreKeySignalMessage::fmt" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::protocol::PreKeySignalMessage" -> "libsignal_protocol::protocol::PreKeySignalMessage::identity_key" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::protocol::PreKeySignalMessage" -> "libsignal_protocol::protocol::PreKeySignalMessage::kyber_ciphertext" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::protocol::PreKeySignalMessage" -> "libsignal_protocol::protocol::PreKeySignalMessage::kyber_pre_key_id" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::protocol::PreKeySignalMessage" -> "libsignal_protocol::protocol::PreKeySignalMessage::message" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::protocol::PreKeySignalMessage" -> "libsignal_protocol::protocol::PreKeySignalMessage::message_version" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::protocol::PreKeySignalMessage" -> "libsignal_protocol::protocol::PreKeySignalMessage::new" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::protocol::PreKeySignalMessage" -> "libsignal_protocol::protocol::PreKeySignalMessage::pre_key_id" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::protocol::PreKeySignalMessage" -> "libsignal_protocol::protocol::PreKeySignalMessage::registration_id" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::protocol::PreKeySignalMessage" -> "libsignal_protocol::protocol::PreKeySignalMessage::serialized" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::protocol::PreKeySignalMessage" -> "libsignal_protocol::protocol::PreKeySignalMessage::signed_pre_key_id" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::protocol::PreKeySignalMessage" -> "libsignal_protocol::protocol::PreKeySignalMessage::try_from" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::protocol::PreKeySignalMessage" -> "libsignal_protocol::protocol::SignalMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage" -> "libsignal_protocol::state::prekey::PreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage" -> "libsignal_protocol::state::signed_prekey::SignedPreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage::Error" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage::as_ref" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage::as_ref" -> "alloc::boxed::Box" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage::as_ref" -> "libsignal_protocol::protocol::PreKeySignalMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage::as_ref" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage::base_key" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage::base_key" -> "libsignal_protocol::protocol::PreKeySignalMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage::clone" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage::clone" -> "alloc::boxed::Box" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage::clone" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage::clone" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage::clone" -> "libsignal_protocol::identity_key::IdentityKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage::clone" -> "libsignal_protocol::protocol::KyberPayload" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage::clone" -> "libsignal_protocol::protocol::PreKeySignalMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage::clone" -> "libsignal_protocol::protocol::SignalMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage::clone" -> "libsignal_protocol::state::prekey::PreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage::clone" -> "libsignal_protocol::state::signed_prekey::SignedPreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage::clone" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage::clone" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage::fmt" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage::fmt" -> "alloc::boxed::Box" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage::fmt" -> "core::fmt::Error" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage::fmt" -> "core::fmt::Formatter" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage::fmt" -> "core::fmt::builders::DebugStruct" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage::fmt" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage::fmt" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage::fmt" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage::fmt" -> "libsignal_protocol::identity_key::IdentityKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage::fmt" -> "libsignal_protocol::protocol::KyberPayload" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage::fmt" -> "libsignal_protocol::protocol::PreKeySignalMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage::fmt" -> "libsignal_protocol::protocol::SignalMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage::fmt" -> "libsignal_protocol::state::prekey::PreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage::fmt" -> "libsignal_protocol::state::signed_prekey::SignedPreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage::fmt" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage::fmt" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage::fmt" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage::identity_key" -> "libsignal_protocol::identity_key::IdentityKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage::identity_key" -> "libsignal_protocol::protocol::PreKeySignalMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage::kyber_ciphertext" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage::kyber_ciphertext" -> "alloc::boxed::Box" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage::kyber_ciphertext" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage::kyber_ciphertext" -> "libsignal_protocol::protocol::KyberPayload" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage::kyber_ciphertext" -> "libsignal_protocol::protocol::PreKeySignalMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage::kyber_ciphertext" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage::kyber_pre_key_id" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage::kyber_pre_key_id" -> "libsignal_protocol::protocol::KyberPayload" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage::kyber_pre_key_id" -> "libsignal_protocol::protocol::PreKeySignalMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage::kyber_pre_key_id" -> "libsignal_protocol::state::kyber_prekey::KyberPreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage::message" -> "libsignal_protocol::protocol::PreKeySignalMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage::message" -> "libsignal_protocol::protocol::SignalMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage::message_version" -> "libsignal_protocol::protocol::PreKeySignalMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage::message_version" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage::new" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage::new" -> "alloc::boxed::Box" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage::new" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage::new" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage::new" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage::new" -> "i32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage::new" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage::new" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage::new" -> "libsignal_protocol::identity_key::IdentityKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage::new" -> "libsignal_protocol::protocol::KyberPayload" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage::new" -> "libsignal_protocol::protocol::PreKeySignalMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage::new" -> "libsignal_protocol::protocol::SignalMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage::new" -> "libsignal_protocol::state::kyber_prekey::KyberPreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage::new" -> "libsignal_protocol::state::prekey::PreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage::new" -> "libsignal_protocol::state::signed_prekey::SignedPreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage::new" -> "prost::error::EncodeError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage::new" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage::new" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage::new" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage::new" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage::pre_key_id" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage::pre_key_id" -> "libsignal_protocol::protocol::PreKeySignalMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage::pre_key_id" -> "libsignal_protocol::state::prekey::PreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage::registration_id" -> "libsignal_protocol::protocol::PreKeySignalMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage::registration_id" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage::serialized" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage::serialized" -> "alloc::boxed::Box" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage::serialized" -> "libsignal_protocol::protocol::PreKeySignalMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage::serialized" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage::signed_pre_key_id" -> "libsignal_protocol::protocol::PreKeySignalMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage::signed_pre_key_id" -> "libsignal_protocol::state::signed_prekey::SignedPreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage::try_from" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage::try_from" -> "alloc::boxed::Box" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage::try_from" -> "bool" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage::try_from" -> "core::convert::Infallible" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage::try_from" -> "core::iter::adapters::map::Map" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage::try_from" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage::try_from" -> "core::ops::range::RangeFrom" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage::try_from" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage::try_from" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage::try_from" -> "i32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage::try_from" -> "libsignal_core::curve::CurveError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage::try_from" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage::try_from" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage::try_from" -> "libsignal_protocol::identity_key::IdentityKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage::try_from" -> "libsignal_protocol::protocol::CiphertextMessageType" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage::try_from" -> "libsignal_protocol::protocol::KyberPayload" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage::try_from" -> "libsignal_protocol::protocol::PreKeySignalMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage::try_from" -> "libsignal_protocol::protocol::SignalMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage::try_from" -> "libsignal_protocol::state::kyber_prekey::KyberPreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage::try_from" -> "libsignal_protocol::state::signed_prekey::SignedPreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage::try_from" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage::try_from" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage::try_from" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::PreKeySignalMessage::try_from" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyDistributionMessage" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyDistributionMessage" -> "alloc::boxed::Box" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyDistributionMessage" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyDistributionMessage" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyDistributionMessage" -> "libsignal_protocol::protocol::SenderKeyDistributionMessage::Error" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::protocol::SenderKeyDistributionMessage" -> "libsignal_protocol::protocol::SenderKeyDistributionMessage::as_ref" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::protocol::SenderKeyDistributionMessage" -> "libsignal_protocol::protocol::SenderKeyDistributionMessage::chain_id" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::protocol::SenderKeyDistributionMessage" -> "libsignal_protocol::protocol::SenderKeyDistributionMessage::chain_key" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::protocol::SenderKeyDistributionMessage" -> "libsignal_protocol::protocol::SenderKeyDistributionMessage::clone" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::protocol::SenderKeyDistributionMessage" -> "libsignal_protocol::protocol::SenderKeyDistributionMessage::distribution_id" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::protocol::SenderKeyDistributionMessage" -> "libsignal_protocol::protocol::SenderKeyDistributionMessage::fmt" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::protocol::SenderKeyDistributionMessage" -> "libsignal_protocol::protocol::SenderKeyDistributionMessage::iteration" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::protocol::SenderKeyDistributionMessage" -> "libsignal_protocol::protocol::SenderKeyDistributionMessage::message_version" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::protocol::SenderKeyDistributionMessage" -> "libsignal_protocol::protocol::SenderKeyDistributionMessage::new" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::protocol::SenderKeyDistributionMessage" -> "libsignal_protocol::protocol::SenderKeyDistributionMessage::serialized" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::protocol::SenderKeyDistributionMessage" -> "libsignal_protocol::protocol::SenderKeyDistributionMessage::signing_key" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::protocol::SenderKeyDistributionMessage" -> "libsignal_protocol::protocol::SenderKeyDistributionMessage::try_from" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::protocol::SenderKeyDistributionMessage" -> "uuid::Uuid" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyDistributionMessage::Error" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyDistributionMessage::as_ref" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyDistributionMessage::as_ref" -> "alloc::boxed::Box" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyDistributionMessage::as_ref" -> "libsignal_protocol::protocol::SenderKeyDistributionMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyDistributionMessage::as_ref" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyDistributionMessage::chain_id" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyDistributionMessage::chain_id" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyDistributionMessage::chain_id" -> "libsignal_protocol::protocol::SenderKeyDistributionMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyDistributionMessage::chain_id" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyDistributionMessage::chain_key" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyDistributionMessage::chain_key" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyDistributionMessage::chain_key" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyDistributionMessage::chain_key" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyDistributionMessage::chain_key" -> "libsignal_protocol::protocol::SenderKeyDistributionMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyDistributionMessage::chain_key" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyDistributionMessage::clone" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyDistributionMessage::clone" -> "alloc::boxed::Box" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyDistributionMessage::clone" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyDistributionMessage::clone" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyDistributionMessage::clone" -> "libsignal_protocol::protocol::SenderKeyDistributionMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyDistributionMessage::clone" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyDistributionMessage::clone" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyDistributionMessage::clone" -> "uuid::Uuid" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyDistributionMessage::distribution_id" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyDistributionMessage::distribution_id" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyDistributionMessage::distribution_id" -> "libsignal_protocol::protocol::SenderKeyDistributionMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyDistributionMessage::distribution_id" -> "uuid::Uuid" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyDistributionMessage::fmt" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyDistributionMessage::fmt" -> "alloc::boxed::Box" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyDistributionMessage::fmt" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyDistributionMessage::fmt" -> "core::fmt::Error" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyDistributionMessage::fmt" -> "core::fmt::Formatter" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyDistributionMessage::fmt" -> "core::fmt::builders::DebugStruct" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyDistributionMessage::fmt" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyDistributionMessage::fmt" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyDistributionMessage::fmt" -> "libsignal_protocol::protocol::SenderKeyDistributionMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyDistributionMessage::fmt" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyDistributionMessage::fmt" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyDistributionMessage::fmt" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyDistributionMessage::fmt" -> "uuid::Uuid" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyDistributionMessage::iteration" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyDistributionMessage::iteration" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyDistributionMessage::iteration" -> "libsignal_protocol::protocol::SenderKeyDistributionMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyDistributionMessage::iteration" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyDistributionMessage::message_version" -> "libsignal_protocol::protocol::SenderKeyDistributionMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyDistributionMessage::message_version" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyDistributionMessage::new" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyDistributionMessage::new" -> "alloc::boxed::Box" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyDistributionMessage::new" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyDistributionMessage::new" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyDistributionMessage::new" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyDistributionMessage::new" -> "i32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyDistributionMessage::new" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyDistributionMessage::new" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyDistributionMessage::new" -> "libsignal_protocol::protocol::SenderKeyDistributionMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyDistributionMessage::new" -> "prost::error::EncodeError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyDistributionMessage::new" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyDistributionMessage::new" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyDistributionMessage::new" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyDistributionMessage::new" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyDistributionMessage::new" -> "uuid::Uuid" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyDistributionMessage::serialized" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyDistributionMessage::serialized" -> "alloc::boxed::Box" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyDistributionMessage::serialized" -> "libsignal_protocol::protocol::SenderKeyDistributionMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyDistributionMessage::serialized" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyDistributionMessage::signing_key" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyDistributionMessage::signing_key" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyDistributionMessage::signing_key" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyDistributionMessage::signing_key" -> "libsignal_protocol::protocol::SenderKeyDistributionMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyDistributionMessage::try_from" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyDistributionMessage::try_from" -> "alloc::boxed::Box" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyDistributionMessage::try_from" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyDistributionMessage::try_from" -> "bool" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyDistributionMessage::try_from" -> "core::convert::Infallible" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyDistributionMessage::try_from" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyDistributionMessage::try_from" -> "core::ops::range::RangeFrom" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyDistributionMessage::try_from" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyDistributionMessage::try_from" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyDistributionMessage::try_from" -> "i32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyDistributionMessage::try_from" -> "libsignal_core::curve::CurveError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyDistributionMessage::try_from" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyDistributionMessage::try_from" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyDistributionMessage::try_from" -> "libsignal_protocol::protocol::SenderKeyDistributionMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyDistributionMessage::try_from" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyDistributionMessage::try_from" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyDistributionMessage::try_from" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyDistributionMessage::try_from" -> "uuid::Uuid" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyDistributionMessage::try_from" -> "uuid::error::Error" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyMessage" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyMessage" -> "alloc::boxed::Box" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyMessage" -> "libsignal_protocol::protocol::SenderKeyMessage::Error" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::protocol::SenderKeyMessage" -> "libsignal_protocol::protocol::SenderKeyMessage::as_ref" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::protocol::SenderKeyMessage" -> "libsignal_protocol::protocol::SenderKeyMessage::chain_id" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::protocol::SenderKeyMessage" -> "libsignal_protocol::protocol::SenderKeyMessage::ciphertext" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::protocol::SenderKeyMessage" -> "libsignal_protocol::protocol::SenderKeyMessage::clone" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::protocol::SenderKeyMessage" -> "libsignal_protocol::protocol::SenderKeyMessage::distribution_id" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::protocol::SenderKeyMessage" -> "libsignal_protocol::protocol::SenderKeyMessage::fmt" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::protocol::SenderKeyMessage" -> "libsignal_protocol::protocol::SenderKeyMessage::iteration" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::protocol::SenderKeyMessage" -> "libsignal_protocol::protocol::SenderKeyMessage::message_version" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::protocol::SenderKeyMessage" -> "libsignal_protocol::protocol::SenderKeyMessage::new" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::protocol::SenderKeyMessage" -> "libsignal_protocol::protocol::SenderKeyMessage::serialized" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::protocol::SenderKeyMessage" -> "libsignal_protocol::protocol::SenderKeyMessage::try_from" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::protocol::SenderKeyMessage" -> "libsignal_protocol::protocol::SenderKeyMessage::verify_signature" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::protocol::SenderKeyMessage" -> "uuid::Uuid" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyMessage::Error" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyMessage::as_ref" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyMessage::as_ref" -> "alloc::boxed::Box" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyMessage::as_ref" -> "libsignal_protocol::protocol::SenderKeyMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyMessage::as_ref" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyMessage::chain_id" -> "libsignal_protocol::protocol::SenderKeyMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyMessage::chain_id" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyMessage::ciphertext" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyMessage::ciphertext" -> "alloc::boxed::Box" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyMessage::ciphertext" -> "libsignal_protocol::protocol::SenderKeyMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyMessage::ciphertext" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyMessage::clone" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyMessage::clone" -> "alloc::boxed::Box" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyMessage::clone" -> "libsignal_protocol::protocol::SenderKeyMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyMessage::clone" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyMessage::clone" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyMessage::clone" -> "uuid::Uuid" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyMessage::distribution_id" -> "libsignal_protocol::protocol::SenderKeyMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyMessage::distribution_id" -> "uuid::Uuid" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyMessage::fmt" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyMessage::fmt" -> "alloc::boxed::Box" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyMessage::fmt" -> "core::fmt::Error" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyMessage::fmt" -> "core::fmt::Formatter" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyMessage::fmt" -> "core::fmt::builders::DebugStruct" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyMessage::fmt" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyMessage::fmt" -> "libsignal_protocol::protocol::SenderKeyMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyMessage::fmt" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyMessage::fmt" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyMessage::fmt" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyMessage::fmt" -> "uuid::Uuid" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyMessage::iteration" -> "libsignal_protocol::protocol::SenderKeyMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyMessage::iteration" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyMessage::message_version" -> "libsignal_protocol::protocol::SenderKeyMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyMessage::message_version" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyMessage::new" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyMessage::new" -> "alloc::boxed::Box" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyMessage::new" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyMessage::new" -> "core::convert::Infallible" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyMessage::new" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyMessage::new" -> "core::ops::range::RangeFull" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyMessage::new" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyMessage::new" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyMessage::new" -> "i32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyMessage::new" -> "libsignal_core::curve::CurveError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyMessage::new" -> "libsignal_core::curve::PrivateKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyMessage::new" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyMessage::new" -> "libsignal_protocol::protocol::SenderKeyMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyMessage::new" -> "prost::error::EncodeError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyMessage::new" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyMessage::new" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyMessage::new" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyMessage::new" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyMessage::new" -> "uuid::Uuid" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyMessage::serialized" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyMessage::serialized" -> "alloc::boxed::Box" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyMessage::serialized" -> "libsignal_protocol::protocol::SenderKeyMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyMessage::serialized" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyMessage::try_from" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyMessage::try_from" -> "alloc::boxed::Box" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyMessage::try_from" -> "bool" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyMessage::try_from" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyMessage::try_from" -> "core::ops::range::Range" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyMessage::try_from" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyMessage::try_from" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyMessage::try_from" -> "i32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyMessage::try_from" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyMessage::try_from" -> "libsignal_protocol::protocol::SenderKeyMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyMessage::try_from" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyMessage::try_from" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyMessage::try_from" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyMessage::try_from" -> "uuid::Uuid" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyMessage::try_from" -> "uuid::error::Error" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyMessage::verify_signature" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyMessage::verify_signature" -> "alloc::boxed::Box" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyMessage::verify_signature" -> "bool" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyMessage::verify_signature" -> "core::ops::range::RangeFrom" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyMessage::verify_signature" -> "core::ops::range::RangeTo" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyMessage::verify_signature" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyMessage::verify_signature" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyMessage::verify_signature" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyMessage::verify_signature" -> "libsignal_protocol::protocol::SenderKeyMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyMessage::verify_signature" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SenderKeyMessage::verify_signature" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage" -> "alloc::boxed::Box" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage" -> "libsignal_protocol::protocol::SignalMessage::Error" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::protocol::SignalMessage" -> "libsignal_protocol::protocol::SignalMessage::as_ref" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::protocol::SignalMessage" -> "libsignal_protocol::protocol::SignalMessage::body" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::protocol::SignalMessage" -> "libsignal_protocol::protocol::SignalMessage::clone" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::protocol::SignalMessage" -> "libsignal_protocol::protocol::SignalMessage::compute_mac" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::protocol::SignalMessage" -> "libsignal_protocol::protocol::SignalMessage::counter" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::protocol::SignalMessage" -> "libsignal_protocol::protocol::SignalMessage::fmt" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::protocol::SignalMessage" -> "libsignal_protocol::protocol::SignalMessage::message_version" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::protocol::SignalMessage" -> "libsignal_protocol::protocol::SignalMessage::new" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::protocol::SignalMessage" -> "libsignal_protocol::protocol::SignalMessage::sender_ratchet_key" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::protocol::SignalMessage" -> "libsignal_protocol::protocol::SignalMessage::serialized" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::protocol::SignalMessage" -> "libsignal_protocol::protocol::SignalMessage::try_from" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::protocol::SignalMessage" -> "libsignal_protocol::protocol::SignalMessage::verify_mac" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::protocol::SignalMessage::Error" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::as_ref" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::as_ref" -> "alloc::boxed::Box" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::as_ref" -> "libsignal_protocol::protocol::SignalMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::as_ref" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::body" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::body" -> "alloc::boxed::Box" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::body" -> "libsignal_protocol::protocol::SignalMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::body" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::clone" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::clone" -> "alloc::boxed::Box" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::clone" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::clone" -> "libsignal_protocol::protocol::SignalMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::clone" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::clone" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::compute_mac" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::compute_mac" -> "alloc::boxed::Box" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::compute_mac" -> "bool" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::compute_mac" -> "core::ops::range::RangeTo" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::compute_mac" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::compute_mac" -> "crypto_common::InvalidLength" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::compute_mac" -> "digest::core_api::ct_variable::CtVariableCoreWrapper" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::compute_mac" -> "digest::core_api::wrapper::CoreWrapper" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::compute_mac" -> "digest::mac::CtOutput" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::compute_mac" -> "generic_array::GenericArray" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::compute_mac" -> "hmac::optim::HmacCore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::compute_mac" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::compute_mac" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::compute_mac" -> "libsignal_protocol::identity_key::IdentityKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::compute_mac" -> "sha2::OidSha256" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::compute_mac" -> "sha2::core_api::Sha256VarCore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::compute_mac" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::compute_mac" -> "typenum::bit::B0" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::compute_mac" -> "typenum::bit::B1" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::compute_mac" -> "typenum::uint::UInt" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::compute_mac" -> "typenum::uint::UTerm" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::compute_mac" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::compute_mac" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::counter" -> "libsignal_protocol::protocol::SignalMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::counter" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::fmt" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::fmt" -> "alloc::boxed::Box" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::fmt" -> "core::fmt::Error" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::fmt" -> "core::fmt::Formatter" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::fmt" -> "core::fmt::builders::DebugStruct" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::fmt" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::fmt" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::fmt" -> "libsignal_protocol::protocol::SignalMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::fmt" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::fmt" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::fmt" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::message_version" -> "libsignal_protocol::protocol::SignalMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::message_version" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::new" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::new" -> "alloc::boxed::Box" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::new" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::new" -> "core::convert::Infallible" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::new" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::new" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::new" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::new" -> "i32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::new" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::new" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::new" -> "libsignal_protocol::identity_key::IdentityKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::new" -> "libsignal_protocol::protocol::SignalMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::new" -> "prost::error::EncodeError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::new" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::new" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::new" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::new" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::sender_ratchet_key" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::sender_ratchet_key" -> "libsignal_protocol::protocol::SignalMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::serialized" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::serialized" -> "alloc::boxed::Box" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::serialized" -> "libsignal_protocol::protocol::SignalMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::serialized" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::try_from" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::try_from" -> "alloc::boxed::Box" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::try_from" -> "bool" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::try_from" -> "core::convert::Infallible" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::try_from" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::try_from" -> "core::ops::range::Range" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::try_from" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::try_from" -> "i32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::try_from" -> "libsignal_core::curve::CurveError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::try_from" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::try_from" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::try_from" -> "libsignal_protocol::protocol::SignalMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::try_from" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::try_from" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::try_from" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::verify_mac" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::verify_mac" -> "alloc::boxed::Box" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::verify_mac" -> "alloc::string::String" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::verify_mac" -> "bool" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::verify_mac" -> "char" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::verify_mac" -> "core::convert::Infallible" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::verify_mac" -> "core::fmt::Arguments" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::verify_mac" -> "core::fmt::rt::Alignment" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::verify_mac" -> "core::fmt::rt::Argument" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::verify_mac" -> "core::fmt::rt::Count" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::verify_mac" -> "core::fmt::rt::Placeholder" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::verify_mac" -> "core::fmt::rt::UnsafeArg" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::verify_mac" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::verify_mac" -> "core::ops::range::RangeFrom" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::verify_mac" -> "core::ops::range::RangeTo" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::verify_mac" -> "core::panic::location::Location" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::verify_mac" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::verify_mac" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::verify_mac" -> "libsignal_protocol::identity_key::IdentityKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::verify_mac" -> "libsignal_protocol::protocol::SignalMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::verify_mac" -> "log::Level" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::verify_mac" -> "log::LevelFilter" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::verify_mac" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::verify_mac" -> "subtle::Choice" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::verify_mac" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::verify_mac" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::SignalMessage::verify_mac" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::extract_decryption_error_message_from_serialized_content" -> "alloc::string::String" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::extract_decryption_error_message_from_serialized_content" -> "bool" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::extract_decryption_error_message_from_serialized_content" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::extract_decryption_error_message_from_serialized_content" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::extract_decryption_error_message_from_serialized_content" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::extract_decryption_error_message_from_serialized_content" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::extract_decryption_error_message_from_serialized_content" -> "libsignal_protocol::protocol::DecryptionErrorMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::extract_decryption_error_message_from_serialized_content" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::protocol::extract_decryption_error_message_from_serialized_content" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet" -> "libsignal_core::curve::KeyPair" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet" -> "libsignal_protocol::error::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet" -> "libsignal_protocol::ratchet::derive_keys" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::ratchet" -> "libsignal_protocol::ratchet::derive_keys_with_label" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::ratchet" -> "libsignal_protocol::ratchet::initialize_alice_session" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::ratchet" -> "libsignal_protocol::ratchet::initialize_alice_session_record" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::ratchet" -> "libsignal_protocol::ratchet::initialize_bob_session" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::ratchet" -> "libsignal_protocol::ratchet::initialize_bob_session_record" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::ratchet" -> "libsignal_protocol::ratchet::keys" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::ratchet" -> "libsignal_protocol::ratchet::keys::ChainKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet" -> "libsignal_protocol::ratchet::keys::MessageKeyGenerator" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet" -> "libsignal_protocol::ratchet::keys::RootKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet" -> "libsignal_protocol::ratchet::message_version" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::ratchet" -> "libsignal_protocol::ratchet::params" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::ratchet" -> "libsignal_protocol::ratchet::params::AliceSignalProtocolParameters" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet" -> "libsignal_protocol::ratchet::params::BobSignalProtocolParameters" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet" -> "libsignal_protocol::state::session::SessionRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet" -> "libsignal_protocol::state::session::SessionState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet" -> "rand::rng::Rng" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet" -> "rand_core::CryptoRng" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::derive_keys" -> "bool" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::derive_keys" -> "libsignal_protocol::ratchet::keys::ChainKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::derive_keys" -> "libsignal_protocol::ratchet::keys::RootKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::derive_keys" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::derive_keys" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::derive_keys_with_label" -> "core::array::TryFromSliceError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::derive_keys_with_label" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::derive_keys_with_label" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::derive_keys_with_label" -> "digest::core_api::ct_variable::CtVariableCoreWrapper" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::derive_keys_with_label" -> "digest::core_api::wrapper::CoreWrapper" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::derive_keys_with_label" -> "hkdf::Hkdf" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::derive_keys_with_label" -> "hkdf::errors::InvalidLength" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::derive_keys_with_label" -> "hmac::optim::HmacCore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::derive_keys_with_label" -> "libsignal_protocol::ratchet::keys::ChainKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::derive_keys_with_label" -> "libsignal_protocol::ratchet::keys::RootKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::derive_keys_with_label" -> "sha2::OidSha256" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::derive_keys_with_label" -> "sha2::core_api::Sha256VarCore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::derive_keys_with_label" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::derive_keys_with_label" -> "typenum::bit::B0" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::derive_keys_with_label" -> "typenum::bit::B1" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::derive_keys_with_label" -> "typenum::uint::UInt" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::derive_keys_with_label" -> "typenum::uint::UTerm" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::derive_keys_with_label" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::derive_keys_with_label" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::derive_keys_with_label" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::initialize_alice_session" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::initialize_alice_session" -> "alloc::boxed::Box" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::initialize_alice_session" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::initialize_alice_session" -> "bool" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::initialize_alice_session" -> "core::convert::Infallible" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::initialize_alice_session" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::initialize_alice_session" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::initialize_alice_session" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::initialize_alice_session" -> "libsignal_core::curve::CurveError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::initialize_alice_session" -> "libsignal_core::curve::KeyPair" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::initialize_alice_session" -> "libsignal_core::curve::PrivateKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::initialize_alice_session" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::initialize_alice_session" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::initialize_alice_session" -> "libsignal_protocol::identity_key::IdentityKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::initialize_alice_session" -> "libsignal_protocol::identity_key::IdentityKeyPair" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::initialize_alice_session" -> "libsignal_protocol::kem::Key" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::initialize_alice_session" -> "libsignal_protocol::kem::Public" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::initialize_alice_session" -> "libsignal_protocol::ratchet::keys::ChainKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::initialize_alice_session" -> "libsignal_protocol::ratchet::keys::RootKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::initialize_alice_session" -> "libsignal_protocol::ratchet::params::AliceSignalProtocolParameters" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::initialize_alice_session" -> "libsignal_protocol::state::session::SessionState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::initialize_alice_session" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::initialize_alice_session" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::initialize_alice_session_record" -> "core::convert::Infallible" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::initialize_alice_session_record" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::initialize_alice_session_record" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::initialize_alice_session_record" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::initialize_alice_session_record" -> "libsignal_protocol::ratchet::params::AliceSignalProtocolParameters" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::initialize_alice_session_record" -> "libsignal_protocol::state::session::SessionRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::initialize_alice_session_record" -> "libsignal_protocol::state::session::SessionState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::initialize_bob_session" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::initialize_bob_session" -> "alloc::boxed::Box" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::initialize_bob_session" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::initialize_bob_session" -> "bool" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::initialize_bob_session" -> "core::convert::Infallible" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::initialize_bob_session" -> "core::fmt::Arguments" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::initialize_bob_session" -> "core::fmt::rt::Argument" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::initialize_bob_session" -> "core::fmt::rt::Placeholder" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::initialize_bob_session" -> "core::fmt::rt::UnsafeArg" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::initialize_bob_session" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::initialize_bob_session" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::initialize_bob_session" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::initialize_bob_session" -> "libsignal_core::curve::CurveError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::initialize_bob_session" -> "libsignal_core::curve::KeyPair" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::initialize_bob_session" -> "libsignal_core::curve::PrivateKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::initialize_bob_session" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::initialize_bob_session" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::initialize_bob_session" -> "libsignal_protocol::identity_key::IdentityKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::initialize_bob_session" -> "libsignal_protocol::identity_key::IdentityKeyPair" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::initialize_bob_session" -> "libsignal_protocol::kem::Key" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::initialize_bob_session" -> "libsignal_protocol::kem::KeyPair" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::initialize_bob_session" -> "libsignal_protocol::kem::Secret" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::initialize_bob_session" -> "libsignal_protocol::ratchet::keys::ChainKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::initialize_bob_session" -> "libsignal_protocol::ratchet::keys::RootKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::initialize_bob_session" -> "libsignal_protocol::ratchet::params::BobSignalProtocolParameters" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::initialize_bob_session" -> "libsignal_protocol::state::session::SessionState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::initialize_bob_session" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::initialize_bob_session" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::initialize_bob_session" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::initialize_bob_session_record" -> "core::convert::Infallible" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::initialize_bob_session_record" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::initialize_bob_session_record" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::initialize_bob_session_record" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::initialize_bob_session_record" -> "libsignal_protocol::ratchet::params::BobSignalProtocolParameters" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::initialize_bob_session_record" -> "libsignal_protocol::state::session::SessionRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::initialize_bob_session_record" -> "libsignal_protocol::state::session::SessionState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys" -> "alloc::fmt" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys" -> "libsignal_core::curve::PrivateKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys" -> "libsignal_protocol::crypto" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys" -> "libsignal_protocol::error::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys" -> "libsignal_protocol::ratchet::keys::ChainKey" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::ratchet::keys" -> "libsignal_protocol::ratchet::keys::MessageKeyGenerator" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::ratchet::keys" -> "libsignal_protocol::ratchet::keys::MessageKeys" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::ratchet::keys" -> "libsignal_protocol::ratchet::keys::RootKey" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::ratchet::keys::ChainKey" -> "libsignal_protocol::ratchet::keys::ChainKey::calculate_base_material" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::ratchet::keys::ChainKey" -> "libsignal_protocol::ratchet::keys::ChainKey::clone" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::ratchet::keys::ChainKey" -> "libsignal_protocol::ratchet::keys::ChainKey::fmt" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::ratchet::keys::ChainKey" -> "libsignal_protocol::ratchet::keys::ChainKey::index" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::ratchet::keys::ChainKey" -> "libsignal_protocol::ratchet::keys::ChainKey::key" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::ratchet::keys::ChainKey" -> "libsignal_protocol::ratchet::keys::ChainKey::message_keys" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::ratchet::keys::ChainKey" -> "libsignal_protocol::ratchet::keys::ChainKey::new" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::ratchet::keys::ChainKey" -> "libsignal_protocol::ratchet::keys::ChainKey::next_chain_key" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::ratchet::keys::ChainKey::calculate_base_material" -> "libsignal_protocol::ratchet::keys::ChainKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::ChainKey::calculate_base_material" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::ChainKey::calculate_base_material" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::ChainKey::clone" -> "libsignal_protocol::ratchet::keys::ChainKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::ChainKey::clone" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::ChainKey::clone" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::ChainKey::clone" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::ChainKey::fmt" -> "core::fmt::Error" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::ChainKey::fmt" -> "core::fmt::Formatter" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::ChainKey::fmt" -> "core::fmt::builders::DebugStruct" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::ChainKey::fmt" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::ChainKey::fmt" -> "libsignal_protocol::ratchet::keys::ChainKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::ChainKey::fmt" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::ChainKey::fmt" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::ChainKey::fmt" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::ChainKey::fmt" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::ChainKey::index" -> "libsignal_protocol::ratchet::keys::ChainKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::ChainKey::index" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::ChainKey::key" -> "libsignal_protocol::ratchet::keys::ChainKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::ChainKey::key" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::ChainKey::key" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::ChainKey::message_keys" -> "libsignal_protocol::ratchet::keys::ChainKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::ChainKey::message_keys" -> "libsignal_protocol::ratchet::keys::MessageKeyGenerator" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::ChainKey::message_keys" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::ChainKey::message_keys" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::ChainKey::message_keys" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::ChainKey::new" -> "libsignal_protocol::ratchet::keys::ChainKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::ChainKey::new" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::ChainKey::new" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::ChainKey::new" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::ChainKey::next_chain_key" -> "libsignal_protocol::ratchet::keys::ChainKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::ChainKey::next_chain_key" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::ChainKey::next_chain_key" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::ChainKey::next_chain_key" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::MessageKeyGenerator" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::MessageKeyGenerator" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::MessageKeyGenerator" -> "libsignal_protocol::ratchet::keys::MessageKeyGenerator::from_pb" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::ratchet::keys::MessageKeyGenerator" -> "libsignal_protocol::ratchet::keys::MessageKeyGenerator::generate_keys" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::ratchet::keys::MessageKeyGenerator" -> "libsignal_protocol::ratchet::keys::MessageKeyGenerator::into_pb" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::ratchet::keys::MessageKeyGenerator" -> "libsignal_protocol::ratchet::keys::MessageKeyGenerator::new_from_seed" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::ratchet::keys::MessageKeyGenerator" -> "libsignal_protocol::ratchet::keys::MessageKeys" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::MessageKeyGenerator::from_pb" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::MessageKeyGenerator::from_pb" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::MessageKeyGenerator::from_pb" -> "bool" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::MessageKeyGenerator::from_pb" -> "core::convert::Infallible" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::MessageKeyGenerator::from_pb" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::MessageKeyGenerator::from_pb" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::MessageKeyGenerator::from_pb" -> "libsignal_protocol::ratchet::keys::MessageKeyGenerator" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::MessageKeyGenerator::from_pb" -> "libsignal_protocol::ratchet::keys::MessageKeys" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::MessageKeyGenerator::from_pb" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::MessageKeyGenerator::from_pb" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::MessageKeyGenerator::from_pb" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::MessageKeyGenerator::from_pb" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::MessageKeyGenerator::generate_keys" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::MessageKeyGenerator::generate_keys" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::MessageKeyGenerator::generate_keys" -> "libsignal_protocol::ratchet::keys::MessageKeyGenerator" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::MessageKeyGenerator::generate_keys" -> "libsignal_protocol::ratchet::keys::MessageKeys" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::MessageKeyGenerator::generate_keys" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::MessageKeyGenerator::generate_keys" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::MessageKeyGenerator::into_pb" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::MessageKeyGenerator::into_pb" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::MessageKeyGenerator::into_pb" -> "libsignal_protocol::ratchet::keys::MessageKeyGenerator" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::MessageKeyGenerator::into_pb" -> "libsignal_protocol::ratchet::keys::MessageKeys" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::MessageKeyGenerator::into_pb" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::MessageKeyGenerator::into_pb" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::MessageKeyGenerator::into_pb" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::MessageKeyGenerator::new_from_seed" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::MessageKeyGenerator::new_from_seed" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::MessageKeyGenerator::new_from_seed" -> "libsignal_protocol::ratchet::keys::MessageKeyGenerator" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::MessageKeyGenerator::new_from_seed" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::MessageKeyGenerator::new_from_seed" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::MessageKeys" -> "libsignal_protocol::ratchet::keys::MessageKeys::cipher_key" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::ratchet::keys::MessageKeys" -> "libsignal_protocol::ratchet::keys::MessageKeys::clone" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::ratchet::keys::MessageKeys" -> "libsignal_protocol::ratchet::keys::MessageKeys::counter" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::ratchet::keys::MessageKeys" -> "libsignal_protocol::ratchet::keys::MessageKeys::derive_keys" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::ratchet::keys::MessageKeys" -> "libsignal_protocol::ratchet::keys::MessageKeys::iv" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::ratchet::keys::MessageKeys" -> "libsignal_protocol::ratchet::keys::MessageKeys::mac_key" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::ratchet::keys::MessageKeys::cipher_key" -> "libsignal_protocol::ratchet::keys::MessageKeys" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::MessageKeys::cipher_key" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::MessageKeys::cipher_key" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::MessageKeys::clone" -> "libsignal_protocol::ratchet::keys::MessageKeys" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::MessageKeys::clone" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::MessageKeys::clone" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::MessageKeys::clone" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::MessageKeys::counter" -> "libsignal_protocol::ratchet::keys::MessageKeys" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::MessageKeys::counter" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::MessageKeys::derive_keys" -> "core::ops::range::Range" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::MessageKeys::derive_keys" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::MessageKeys::derive_keys" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::MessageKeys::derive_keys" -> "digest::core_api::ct_variable::CtVariableCoreWrapper" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::MessageKeys::derive_keys" -> "digest::core_api::wrapper::CoreWrapper" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::MessageKeys::derive_keys" -> "hkdf::Hkdf" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::MessageKeys::derive_keys" -> "hkdf::errors::InvalidLength" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::MessageKeys::derive_keys" -> "hmac::optim::HmacCore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::MessageKeys::derive_keys" -> "libsignal_protocol::ratchet::keys::MessageKeys" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::MessageKeys::derive_keys" -> "sha2::OidSha256" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::MessageKeys::derive_keys" -> "sha2::core_api::Sha256VarCore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::MessageKeys::derive_keys" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::MessageKeys::derive_keys" -> "typenum::bit::B0" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::MessageKeys::derive_keys" -> "typenum::bit::B1" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::MessageKeys::derive_keys" -> "typenum::uint::UInt" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::MessageKeys::derive_keys" -> "typenum::uint::UTerm" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::MessageKeys::derive_keys" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::MessageKeys::derive_keys" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::MessageKeys::derive_keys" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::MessageKeys::iv" -> "libsignal_protocol::ratchet::keys::MessageKeys" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::MessageKeys::iv" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::MessageKeys::iv" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::MessageKeys::mac_key" -> "libsignal_protocol::ratchet::keys::MessageKeys" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::MessageKeys::mac_key" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::MessageKeys::mac_key" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::RootKey" -> "libsignal_protocol::ratchet::keys::RootKey::clone" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::ratchet::keys::RootKey" -> "libsignal_protocol::ratchet::keys::RootKey::create_chain" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::ratchet::keys::RootKey" -> "libsignal_protocol::ratchet::keys::RootKey::fmt" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::ratchet::keys::RootKey" -> "libsignal_protocol::ratchet::keys::RootKey::fmt" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::ratchet::keys::RootKey" -> "libsignal_protocol::ratchet::keys::RootKey::key" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::ratchet::keys::RootKey" -> "libsignal_protocol::ratchet::keys::RootKey::new" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::ratchet::keys::RootKey::clone" -> "libsignal_protocol::ratchet::keys::RootKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::RootKey::clone" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::RootKey::clone" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::RootKey::create_chain" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::RootKey::create_chain" -> "alloc::boxed::Box" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::RootKey::create_chain" -> "core::convert::Infallible" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::RootKey::create_chain" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::RootKey::create_chain" -> "core::ops::range::Range" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::RootKey::create_chain" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::RootKey::create_chain" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::RootKey::create_chain" -> "digest::core_api::ct_variable::CtVariableCoreWrapper" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::RootKey::create_chain" -> "digest::core_api::wrapper::CoreWrapper" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::RootKey::create_chain" -> "hkdf::Hkdf" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::RootKey::create_chain" -> "hkdf::errors::InvalidLength" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::RootKey::create_chain" -> "hmac::optim::HmacCore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::RootKey::create_chain" -> "libsignal_core::curve::CurveError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::RootKey::create_chain" -> "libsignal_core::curve::PrivateKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::RootKey::create_chain" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::RootKey::create_chain" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::RootKey::create_chain" -> "libsignal_protocol::ratchet::keys::ChainKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::RootKey::create_chain" -> "libsignal_protocol::ratchet::keys::RootKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::RootKey::create_chain" -> "sha2::OidSha256" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::RootKey::create_chain" -> "sha2::core_api::Sha256VarCore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::RootKey::create_chain" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::RootKey::create_chain" -> "typenum::bit::B0" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::RootKey::create_chain" -> "typenum::bit::B1" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::RootKey::create_chain" -> "typenum::uint::UInt" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::RootKey::create_chain" -> "typenum::uint::UTerm" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::RootKey::create_chain" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::RootKey::create_chain" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::RootKey::create_chain" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::RootKey::fmt" -> "alloc::string::String" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::RootKey::fmt" -> "char" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::RootKey::fmt" -> "core::fmt::Arguments" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::RootKey::fmt" -> "core::fmt::Error" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::RootKey::fmt" -> "core::fmt::Error" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::RootKey::fmt" -> "core::fmt::Formatter" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::RootKey::fmt" -> "core::fmt::Formatter" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::RootKey::fmt" -> "core::fmt::builders::DebugStruct" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::RootKey::fmt" -> "core::fmt::rt::Alignment" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::RootKey::fmt" -> "core::fmt::rt::Argument" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::RootKey::fmt" -> "core::fmt::rt::Count" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::RootKey::fmt" -> "core::fmt::rt::Placeholder" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::RootKey::fmt" -> "core::fmt::rt::UnsafeArg" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::RootKey::fmt" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::RootKey::fmt" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::RootKey::fmt" -> "libsignal_protocol::ratchet::keys::RootKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::RootKey::fmt" -> "libsignal_protocol::ratchet::keys::RootKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::RootKey::fmt" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::RootKey::fmt" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::RootKey::fmt" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::RootKey::fmt" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::RootKey::fmt" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::RootKey::fmt" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::RootKey::fmt" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::RootKey::key" -> "libsignal_protocol::ratchet::keys::RootKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::RootKey::key" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::RootKey::key" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::RootKey::new" -> "libsignal_protocol::ratchet::keys::RootKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::RootKey::new" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::keys::RootKey::new" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::message_version" -> "bool" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::message_version" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::params" -> "libsignal_core::curve::KeyPair" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::params" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::params" -> "libsignal_protocol::identity_key::IdentityKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::params" -> "libsignal_protocol::identity_key::IdentityKeyPair" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::params" -> "libsignal_protocol::kem" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::params" -> "libsignal_protocol::ratchet::params::AliceSignalProtocolParameters" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::ratchet::params" -> "libsignal_protocol::ratchet::params::BobSignalProtocolParameters" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::ratchet::params::AliceSignalProtocolParameters" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::params::AliceSignalProtocolParameters" -> "libsignal_core::curve::KeyPair" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::params::AliceSignalProtocolParameters" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::params::AliceSignalProtocolParameters" -> "libsignal_protocol::identity_key::IdentityKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::params::AliceSignalProtocolParameters" -> "libsignal_protocol::identity_key::IdentityKeyPair" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::params::AliceSignalProtocolParameters" -> "libsignal_protocol::kem::Key" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::params::AliceSignalProtocolParameters" -> "libsignal_protocol::kem::Public" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::params::AliceSignalProtocolParameters" -> "libsignal_protocol::ratchet::params::AliceSignalProtocolParameters::new" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::ratchet::params::AliceSignalProtocolParameters" -> "libsignal_protocol::ratchet::params::AliceSignalProtocolParameters::our_base_key_pair" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::ratchet::params::AliceSignalProtocolParameters" -> "libsignal_protocol::ratchet::params::AliceSignalProtocolParameters::our_identity_key_pair" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::ratchet::params::AliceSignalProtocolParameters" -> "libsignal_protocol::ratchet::params::AliceSignalProtocolParameters::set_their_kyber_pre_key" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::ratchet::params::AliceSignalProtocolParameters" -> "libsignal_protocol::ratchet::params::AliceSignalProtocolParameters::set_their_one_time_pre_key" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::ratchet::params::AliceSignalProtocolParameters" -> "libsignal_protocol::ratchet::params::AliceSignalProtocolParameters::their_identity_key" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::ratchet::params::AliceSignalProtocolParameters" -> "libsignal_protocol::ratchet::params::AliceSignalProtocolParameters::their_kyber_pre_key" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::ratchet::params::AliceSignalProtocolParameters" -> "libsignal_protocol::ratchet::params::AliceSignalProtocolParameters::their_one_time_pre_key" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::ratchet::params::AliceSignalProtocolParameters" -> "libsignal_protocol::ratchet::params::AliceSignalProtocolParameters::their_ratchet_key" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::ratchet::params::AliceSignalProtocolParameters" -> "libsignal_protocol::ratchet::params::AliceSignalProtocolParameters::their_signed_pre_key" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::ratchet::params::AliceSignalProtocolParameters" -> "libsignal_protocol::ratchet::params::AliceSignalProtocolParameters::with_their_kyber_pre_key" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::ratchet::params::AliceSignalProtocolParameters" -> "libsignal_protocol::ratchet::params::AliceSignalProtocolParameters::with_their_one_time_pre_key" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::ratchet::params::AliceSignalProtocolParameters::new" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::params::AliceSignalProtocolParameters::new" -> "libsignal_core::curve::KeyPair" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::params::AliceSignalProtocolParameters::new" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::params::AliceSignalProtocolParameters::new" -> "libsignal_protocol::identity_key::IdentityKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::params::AliceSignalProtocolParameters::new" -> "libsignal_protocol::identity_key::IdentityKeyPair" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::params::AliceSignalProtocolParameters::new" -> "libsignal_protocol::kem::Key" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::params::AliceSignalProtocolParameters::new" -> "libsignal_protocol::kem::Public" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::params::AliceSignalProtocolParameters::new" -> "libsignal_protocol::ratchet::params::AliceSignalProtocolParameters" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::params::AliceSignalProtocolParameters::our_base_key_pair" -> "libsignal_core::curve::KeyPair" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::params::AliceSignalProtocolParameters::our_base_key_pair" -> "libsignal_protocol::ratchet::params::AliceSignalProtocolParameters" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::params::AliceSignalProtocolParameters::our_identity_key_pair" -> "libsignal_protocol::identity_key::IdentityKeyPair" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::params::AliceSignalProtocolParameters::our_identity_key_pair" -> "libsignal_protocol::ratchet::params::AliceSignalProtocolParameters" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::params::AliceSignalProtocolParameters::set_their_kyber_pre_key" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::params::AliceSignalProtocolParameters::set_their_kyber_pre_key" -> "libsignal_protocol::kem::Key" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::params::AliceSignalProtocolParameters::set_their_kyber_pre_key" -> "libsignal_protocol::kem::Public" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::params::AliceSignalProtocolParameters::set_their_kyber_pre_key" -> "libsignal_protocol::ratchet::params::AliceSignalProtocolParameters" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::params::AliceSignalProtocolParameters::set_their_one_time_pre_key" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::params::AliceSignalProtocolParameters::set_their_one_time_pre_key" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::params::AliceSignalProtocolParameters::set_their_one_time_pre_key" -> "libsignal_protocol::ratchet::params::AliceSignalProtocolParameters" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::params::AliceSignalProtocolParameters::their_identity_key" -> "libsignal_protocol::identity_key::IdentityKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::params::AliceSignalProtocolParameters::their_identity_key" -> "libsignal_protocol::ratchet::params::AliceSignalProtocolParameters" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::params::AliceSignalProtocolParameters::their_kyber_pre_key" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::params::AliceSignalProtocolParameters::their_kyber_pre_key" -> "libsignal_protocol::kem::Key" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::params::AliceSignalProtocolParameters::their_kyber_pre_key" -> "libsignal_protocol::kem::Public" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::params::AliceSignalProtocolParameters::their_kyber_pre_key" -> "libsignal_protocol::ratchet::params::AliceSignalProtocolParameters" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::params::AliceSignalProtocolParameters::their_one_time_pre_key" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::params::AliceSignalProtocolParameters::their_one_time_pre_key" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::params::AliceSignalProtocolParameters::their_one_time_pre_key" -> "libsignal_protocol::ratchet::params::AliceSignalProtocolParameters" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::params::AliceSignalProtocolParameters::their_ratchet_key" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::params::AliceSignalProtocolParameters::their_ratchet_key" -> "libsignal_protocol::ratchet::params::AliceSignalProtocolParameters" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::params::AliceSignalProtocolParameters::their_signed_pre_key" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::params::AliceSignalProtocolParameters::their_signed_pre_key" -> "libsignal_protocol::ratchet::params::AliceSignalProtocolParameters" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::params::AliceSignalProtocolParameters::with_their_kyber_pre_key" -> "libsignal_protocol::kem::Key" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::params::AliceSignalProtocolParameters::with_their_kyber_pre_key" -> "libsignal_protocol::kem::Public" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::params::AliceSignalProtocolParameters::with_their_kyber_pre_key" -> "libsignal_protocol::ratchet::params::AliceSignalProtocolParameters" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::params::AliceSignalProtocolParameters::with_their_one_time_pre_key" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::params::AliceSignalProtocolParameters::with_their_one_time_pre_key" -> "libsignal_protocol::ratchet::params::AliceSignalProtocolParameters" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::params::BobSignalProtocolParameters" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::params::BobSignalProtocolParameters" -> "alloc::boxed::Box" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::params::BobSignalProtocolParameters" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::params::BobSignalProtocolParameters" -> "libsignal_core::curve::KeyPair" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::params::BobSignalProtocolParameters" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::params::BobSignalProtocolParameters" -> "libsignal_protocol::identity_key::IdentityKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::params::BobSignalProtocolParameters" -> "libsignal_protocol::identity_key::IdentityKeyPair" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::params::BobSignalProtocolParameters" -> "libsignal_protocol::kem::KeyPair" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::params::BobSignalProtocolParameters" -> "libsignal_protocol::ratchet::params::BobSignalProtocolParameters::new" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::ratchet::params::BobSignalProtocolParameters" -> "libsignal_protocol::ratchet::params::BobSignalProtocolParameters::our_identity_key_pair" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::ratchet::params::BobSignalProtocolParameters" -> "libsignal_protocol::ratchet::params::BobSignalProtocolParameters::our_kyber_pre_key_pair" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::ratchet::params::BobSignalProtocolParameters" -> "libsignal_protocol::ratchet::params::BobSignalProtocolParameters::our_one_time_pre_key_pair" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::ratchet::params::BobSignalProtocolParameters" -> "libsignal_protocol::ratchet::params::BobSignalProtocolParameters::our_ratchet_key_pair" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::ratchet::params::BobSignalProtocolParameters" -> "libsignal_protocol::ratchet::params::BobSignalProtocolParameters::our_signed_pre_key_pair" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::ratchet::params::BobSignalProtocolParameters" -> "libsignal_protocol::ratchet::params::BobSignalProtocolParameters::their_base_key" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::ratchet::params::BobSignalProtocolParameters" -> "libsignal_protocol::ratchet::params::BobSignalProtocolParameters::their_identity_key" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::ratchet::params::BobSignalProtocolParameters" -> "libsignal_protocol::ratchet::params::BobSignalProtocolParameters::their_kyber_ciphertext" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::ratchet::params::BobSignalProtocolParameters::new" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::params::BobSignalProtocolParameters::new" -> "alloc::boxed::Box" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::params::BobSignalProtocolParameters::new" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::params::BobSignalProtocolParameters::new" -> "libsignal_core::curve::KeyPair" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::params::BobSignalProtocolParameters::new" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::params::BobSignalProtocolParameters::new" -> "libsignal_protocol::identity_key::IdentityKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::params::BobSignalProtocolParameters::new" -> "libsignal_protocol::identity_key::IdentityKeyPair" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::params::BobSignalProtocolParameters::new" -> "libsignal_protocol::kem::KeyPair" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::params::BobSignalProtocolParameters::new" -> "libsignal_protocol::ratchet::params::BobSignalProtocolParameters" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::params::BobSignalProtocolParameters::new" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::params::BobSignalProtocolParameters::our_identity_key_pair" -> "libsignal_protocol::identity_key::IdentityKeyPair" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::params::BobSignalProtocolParameters::our_identity_key_pair" -> "libsignal_protocol::ratchet::params::BobSignalProtocolParameters" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::params::BobSignalProtocolParameters::our_kyber_pre_key_pair" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::params::BobSignalProtocolParameters::our_kyber_pre_key_pair" -> "libsignal_protocol::kem::KeyPair" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::params::BobSignalProtocolParameters::our_kyber_pre_key_pair" -> "libsignal_protocol::ratchet::params::BobSignalProtocolParameters" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::params::BobSignalProtocolParameters::our_one_time_pre_key_pair" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::params::BobSignalProtocolParameters::our_one_time_pre_key_pair" -> "libsignal_core::curve::KeyPair" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::params::BobSignalProtocolParameters::our_one_time_pre_key_pair" -> "libsignal_protocol::ratchet::params::BobSignalProtocolParameters" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::params::BobSignalProtocolParameters::our_ratchet_key_pair" -> "libsignal_core::curve::KeyPair" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::params::BobSignalProtocolParameters::our_ratchet_key_pair" -> "libsignal_protocol::ratchet::params::BobSignalProtocolParameters" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::params::BobSignalProtocolParameters::our_signed_pre_key_pair" -> "libsignal_core::curve::KeyPair" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::params::BobSignalProtocolParameters::our_signed_pre_key_pair" -> "libsignal_protocol::ratchet::params::BobSignalProtocolParameters" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::params::BobSignalProtocolParameters::their_base_key" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::params::BobSignalProtocolParameters::their_base_key" -> "libsignal_protocol::ratchet::params::BobSignalProtocolParameters" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::params::BobSignalProtocolParameters::their_identity_key" -> "libsignal_protocol::identity_key::IdentityKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::params::BobSignalProtocolParameters::their_identity_key" -> "libsignal_protocol::ratchet::params::BobSignalProtocolParameters" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::params::BobSignalProtocolParameters::their_kyber_ciphertext" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::params::BobSignalProtocolParameters::their_kyber_ciphertext" -> "alloc::boxed::Box" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::params::BobSignalProtocolParameters::their_kyber_ciphertext" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::params::BobSignalProtocolParameters::their_kyber_ciphertext" -> "libsignal_protocol::ratchet::params::BobSignalProtocolParameters" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::ratchet::params::BobSignalProtocolParameters::their_kyber_ciphertext" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender" -> "aead::AeadInPlace" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender" -> "aes_gcm_siv::Aes256GcmSiv" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender" -> "core::ops::range::Range" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender" -> "crypto_common::KeyInit" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender" -> "indexmap::map::IndexMap" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender" -> "itertools::Itertools" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender" -> "libsignal_core::address::Aci" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender" -> "libsignal_core::address::DeviceId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender" -> "libsignal_core::address::ProtocolAddress" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender" -> "libsignal_core::address::ServiceId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender" -> "libsignal_core::address::ServiceIdFixedWidthBinaryBytes" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender" -> "libsignal_core::curve::KeyPair" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender" -> "libsignal_core::curve::PrivateKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender" -> "libsignal_protocol::crypto" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender" -> "libsignal_protocol::error::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender" -> "libsignal_protocol::identity_key::IdentityKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender" -> "libsignal_protocol::identity_key::IdentityKeyPair" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender" -> "libsignal_protocol::proto" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender" -> "libsignal_protocol::protocol::CiphertextMessageType" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender" -> "libsignal_protocol::protocol::PreKeySignalMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender" -> "libsignal_protocol::protocol::SignalMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender" -> "libsignal_protocol::sealed_sender::ContentHint" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sealed_sender" -> "libsignal_protocol::sealed_sender::SealedSenderDecryptionResult" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sealed_sender" -> "libsignal_protocol::sealed_sender::SealedSenderV2SentMessage" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sealed_sender" -> "libsignal_protocol::sealed_sender::SealedSenderV2SentMessageRecipient" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sealed_sender" -> "libsignal_protocol::sealed_sender::SenderCertificate" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sealed_sender" -> "libsignal_protocol::sealed_sender::ServerCertificate" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sealed_sender" -> "libsignal_protocol::sealed_sender::UnidentifiedSenderMessage" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sealed_sender" -> "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sealed_sender" -> "libsignal_protocol::sealed_sender::sealed_sender_decrypt" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sealed_sender" -> "libsignal_protocol::sealed_sender::sealed_sender_decrypt_to_usmc" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sealed_sender" -> "libsignal_protocol::sealed_sender::sealed_sender_encrypt" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sealed_sender" -> "libsignal_protocol::sealed_sender::sealed_sender_encrypt_from_usmc" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sealed_sender" -> "libsignal_protocol::sealed_sender::sealed_sender_multi_recipient_encrypt" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sealed_sender" -> "libsignal_protocol::sealed_sender::sealed_sender_multi_recipient_encrypt_impl" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sealed_sender" -> "libsignal_protocol::sealed_sender::sealed_sender_v1" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sealed_sender" -> "libsignal_protocol::sealed_sender::sealed_sender_v2" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sealed_sender" -> "libsignal_protocol::session_cipher" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender" -> "libsignal_protocol::session_cipher::message_encrypt" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender" -> "libsignal_protocol::state::session::SessionRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender" -> "libsignal_protocol::storage::traits::Direction" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender" -> "libsignal_protocol::storage::traits::IdentityKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender" -> "libsignal_protocol::storage::traits::KyberPreKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender" -> "libsignal_protocol::storage::traits::PreKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender" -> "libsignal_protocol::storage::traits::SessionStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender" -> "libsignal_protocol::storage::traits::SignedPreKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender" -> "libsignal_protocol::timestamp::Timestamp" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender" -> "prost::message::Message" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender" -> "rand::rng::Rng" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender" -> "rand_core::CryptoRng" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender" -> "std::time::SystemTime" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender" -> "subtle::ConstantTimeEq" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender" -> "typenum::marker_traits::Unsigned" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender" -> "zerocopy::FromBytes" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender" -> "zerocopy::FromZeroes" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ContentHint" -> "libsignal_protocol::sealed_sender::ContentHint::clone" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sealed_sender::ContentHint" -> "libsignal_protocol::sealed_sender::ContentHint::eq" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sealed_sender::ContentHint" -> "libsignal_protocol::sealed_sender::ContentHint::fmt" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sealed_sender::ContentHint" -> "libsignal_protocol::sealed_sender::ContentHint::from" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sealed_sender::ContentHint" -> "libsignal_protocol::sealed_sender::ContentHint::to_proto" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sealed_sender::ContentHint" -> "libsignal_protocol::sealed_sender::ContentHint::to_u32" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sealed_sender::ContentHint::clone" -> "libsignal_protocol::sealed_sender::ContentHint" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ContentHint::clone" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ContentHint::eq" -> "bool" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ContentHint::eq" -> "libsignal_protocol::sealed_sender::ContentHint" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ContentHint::eq" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ContentHint::fmt" -> "core::fmt::Error" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ContentHint::fmt" -> "core::fmt::Formatter" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ContentHint::fmt" -> "core::fmt::builders::DebugTuple" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ContentHint::fmt" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ContentHint::fmt" -> "libsignal_protocol::sealed_sender::ContentHint" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ContentHint::fmt" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ContentHint::fmt" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ContentHint::from" -> "bool" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ContentHint::from" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ContentHint::from" -> "i32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ContentHint::from" -> "libsignal_protocol::sealed_sender::ContentHint" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ContentHint::from" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ContentHint::to_proto" -> "bool" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ContentHint::to_proto" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ContentHint::to_proto" -> "i32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ContentHint::to_proto" -> "libsignal_protocol::sealed_sender::ContentHint" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ContentHint::to_proto" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ContentHint::to_u32" -> "libsignal_protocol::sealed_sender::ContentHint" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ContentHint::to_u32" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SealedSenderDecryptionResult" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SealedSenderDecryptionResult" -> "alloc::string::String" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SealedSenderDecryptionResult" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SealedSenderDecryptionResult" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SealedSenderDecryptionResult" -> "libsignal_core::address::DeviceId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SealedSenderDecryptionResult" -> "libsignal_protocol::sealed_sender::SealedSenderDecryptionResult::device_id" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sealed_sender::SealedSenderDecryptionResult" -> "libsignal_protocol::sealed_sender::SealedSenderDecryptionResult::fmt" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sealed_sender::SealedSenderDecryptionResult" -> "libsignal_protocol::sealed_sender::SealedSenderDecryptionResult::message" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sealed_sender::SealedSenderDecryptionResult" -> "libsignal_protocol::sealed_sender::SealedSenderDecryptionResult::sender_e164" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sealed_sender::SealedSenderDecryptionResult" -> "libsignal_protocol::sealed_sender::SealedSenderDecryptionResult::sender_uuid" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sealed_sender::SealedSenderDecryptionResult::device_id" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SealedSenderDecryptionResult::device_id" -> "libsignal_core::address::DeviceId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SealedSenderDecryptionResult::device_id" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SealedSenderDecryptionResult::device_id" -> "libsignal_protocol::sealed_sender::SealedSenderDecryptionResult" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SealedSenderDecryptionResult::fmt" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SealedSenderDecryptionResult::fmt" -> "alloc::string::String" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SealedSenderDecryptionResult::fmt" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SealedSenderDecryptionResult::fmt" -> "core::fmt::Error" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SealedSenderDecryptionResult::fmt" -> "core::fmt::Formatter" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SealedSenderDecryptionResult::fmt" -> "core::fmt::builders::DebugStruct" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SealedSenderDecryptionResult::fmt" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SealedSenderDecryptionResult::fmt" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SealedSenderDecryptionResult::fmt" -> "libsignal_core::address::DeviceId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SealedSenderDecryptionResult::fmt" -> "libsignal_protocol::sealed_sender::SealedSenderDecryptionResult" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SealedSenderDecryptionResult::fmt" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SealedSenderDecryptionResult::fmt" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SealedSenderDecryptionResult::message" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SealedSenderDecryptionResult::message" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SealedSenderDecryptionResult::message" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SealedSenderDecryptionResult::message" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SealedSenderDecryptionResult::message" -> "libsignal_protocol::sealed_sender::SealedSenderDecryptionResult" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SealedSenderDecryptionResult::message" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SealedSenderDecryptionResult::sender_e164" -> "alloc::string::String" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SealedSenderDecryptionResult::sender_e164" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SealedSenderDecryptionResult::sender_e164" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SealedSenderDecryptionResult::sender_e164" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SealedSenderDecryptionResult::sender_e164" -> "libsignal_protocol::sealed_sender::SealedSenderDecryptionResult" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SealedSenderDecryptionResult::sender_e164" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SealedSenderDecryptionResult::sender_uuid" -> "alloc::string::String" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SealedSenderDecryptionResult::sender_uuid" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SealedSenderDecryptionResult::sender_uuid" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SealedSenderDecryptionResult::sender_uuid" -> "libsignal_protocol::sealed_sender::SealedSenderDecryptionResult" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SealedSenderDecryptionResult::sender_uuid" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SealedSenderV2SentMessage" -> "indexmap::map::IndexMap" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SealedSenderV2SentMessage" -> "libsignal_core::address::ServiceId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SealedSenderV2SentMessage" -> "libsignal_protocol::sealed_sender::SealedSenderV2SentMessage::offset_of_shared_bytes" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sealed_sender::SealedSenderV2SentMessage" -> "libsignal_protocol::sealed_sender::SealedSenderV2SentMessage::offset_within_full_message" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sealed_sender::SealedSenderV2SentMessage" -> "libsignal_protocol::sealed_sender::SealedSenderV2SentMessage::parse" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sealed_sender::SealedSenderV2SentMessage" -> "libsignal_protocol::sealed_sender::SealedSenderV2SentMessage::range_for_recipient_key_material" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sealed_sender::SealedSenderV2SentMessage" -> "libsignal_protocol::sealed_sender::SealedSenderV2SentMessage::received_message_parts_for_recipient" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sealed_sender::SealedSenderV2SentMessage" -> "libsignal_protocol::sealed_sender::SealedSenderV2SentMessageRecipient" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SealedSenderV2SentMessage" -> "std::hash::random::RandomState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SealedSenderV2SentMessage::offset_of_shared_bytes" -> "bool" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SealedSenderV2SentMessage::offset_of_shared_bytes" -> "core::fmt::Arguments" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SealedSenderV2SentMessage::offset_of_shared_bytes" -> "core::fmt::rt::Argument" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SealedSenderV2SentMessage::offset_of_shared_bytes" -> "core::fmt::rt::Placeholder" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SealedSenderV2SentMessage::offset_of_shared_bytes" -> "core::fmt::rt::UnsafeArg" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SealedSenderV2SentMessage::offset_of_shared_bytes" -> "core::ops::range::Range" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SealedSenderV2SentMessage::offset_of_shared_bytes" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SealedSenderV2SentMessage::offset_of_shared_bytes" -> "core::panicking::AssertKind" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SealedSenderV2SentMessage::offset_of_shared_bytes" -> "libsignal_protocol::sealed_sender::SealedSenderV2SentMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SealedSenderV2SentMessage::offset_of_shared_bytes" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SealedSenderV2SentMessage::offset_of_shared_bytes" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SealedSenderV2SentMessage::offset_of_shared_bytes" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SealedSenderV2SentMessage::offset_within_full_message" -> "bool" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SealedSenderV2SentMessage::offset_within_full_message" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SealedSenderV2SentMessage::offset_within_full_message" -> "libsignal_protocol::sealed_sender::SealedSenderV2SentMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SealedSenderV2SentMessage::offset_within_full_message" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SealedSenderV2SentMessage::offset_within_full_message" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SealedSenderV2SentMessage::parse" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SealedSenderV2SentMessage::parse" -> "alloc::string::String" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SealedSenderV2SentMessage::parse" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SealedSenderV2SentMessage::parse" -> "bool" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SealedSenderV2SentMessage::parse" -> "core::convert::Infallible" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SealedSenderV2SentMessage::parse" -> "core::num::error::TryFromIntError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SealedSenderV2SentMessage::parse" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SealedSenderV2SentMessage::parse" -> "core::ops::range::Range" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SealedSenderV2SentMessage::parse" -> "core::ops::range::RangeFrom" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SealedSenderV2SentMessage::parse" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SealedSenderV2SentMessage::parse" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SealedSenderV2SentMessage::parse" -> "indexmap::map::IndexMap" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SealedSenderV2SentMessage::parse" -> "indexmap::map::core::entry::Entry" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SealedSenderV2SentMessage::parse" -> "indexmap::map::core::entry::OccupiedEntry" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SealedSenderV2SentMessage::parse" -> "indexmap::map::core::entry::VacantEntry" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SealedSenderV2SentMessage::parse" -> "libsignal_core::address::DeviceId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SealedSenderV2SentMessage::parse" -> "libsignal_core::address::ServiceId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SealedSenderV2SentMessage::parse" -> "libsignal_core::address::SpecificServiceId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SealedSenderV2SentMessage::parse" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SealedSenderV2SentMessage::parse" -> "libsignal_protocol::sealed_sender::SealedSenderV2SentMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SealedSenderV2SentMessage::parse" -> "libsignal_protocol::sealed_sender::SealedSenderV2SentMessageRecipient" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SealedSenderV2SentMessage::parse" -> "std::hash::random::RandomState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SealedSenderV2SentMessage::parse" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SealedSenderV2SentMessage::parse" -> "u16" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SealedSenderV2SentMessage::parse" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SealedSenderV2SentMessage::parse" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SealedSenderV2SentMessage::parse" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SealedSenderV2SentMessage::range_for_recipient_key_material" -> "bool" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SealedSenderV2SentMessage::range_for_recipient_key_material" -> "core::fmt::Arguments" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SealedSenderV2SentMessage::range_for_recipient_key_material" -> "core::fmt::rt::Argument" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SealedSenderV2SentMessage::range_for_recipient_key_material" -> "core::fmt::rt::Placeholder" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SealedSenderV2SentMessage::range_for_recipient_key_material" -> "core::fmt::rt::UnsafeArg" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SealedSenderV2SentMessage::range_for_recipient_key_material" -> "core::ops::range::Range" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SealedSenderV2SentMessage::range_for_recipient_key_material" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SealedSenderV2SentMessage::range_for_recipient_key_material" -> "libsignal_protocol::sealed_sender::SealedSenderV2SentMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SealedSenderV2SentMessage::range_for_recipient_key_material" -> "libsignal_protocol::sealed_sender::SealedSenderV2SentMessageRecipient" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SealedSenderV2SentMessage::range_for_recipient_key_material" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SealedSenderV2SentMessage::range_for_recipient_key_material" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SealedSenderV2SentMessage::range_for_recipient_key_material" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SealedSenderV2SentMessage::received_message_parts_for_recipient" -> "core::convert::AsRef" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SealedSenderV2SentMessage::received_message_parts_for_recipient" -> "core::marker::Sized" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SealedSenderV2SentMessage::received_message_parts_for_recipient" -> "libsignal_protocol::sealed_sender::SealedSenderV2SentMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SealedSenderV2SentMessage::received_message_parts_for_recipient" -> "libsignal_protocol::sealed_sender::SealedSenderV2SentMessageRecipient" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SealedSenderV2SentMessage::received_message_parts_for_recipient" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SealedSenderV2SentMessage::received_message_parts_for_recipient" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SealedSenderV2SentMessageRecipient" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SealedSenderV2SentMessageRecipient" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SealedSenderV2SentMessageRecipient" -> "libsignal_core::address::DeviceId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate" -> "alloc::string::String" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate" -> "libsignal_core::address::DeviceId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate" -> "libsignal_protocol::sealed_sender::SenderCertificate::certificate" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sealed_sender::SenderCertificate" -> "libsignal_protocol::sealed_sender::SenderCertificate::clone" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sealed_sender::SenderCertificate" -> "libsignal_protocol::sealed_sender::SenderCertificate::deserialize" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sealed_sender::SenderCertificate" -> "libsignal_protocol::sealed_sender::SenderCertificate::expiration" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sealed_sender::SenderCertificate" -> "libsignal_protocol::sealed_sender::SenderCertificate::fmt" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sealed_sender::SenderCertificate" -> "libsignal_protocol::sealed_sender::SenderCertificate::key" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sealed_sender::SenderCertificate" -> "libsignal_protocol::sealed_sender::SenderCertificate::new" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sealed_sender::SenderCertificate" -> "libsignal_protocol::sealed_sender::SenderCertificate::sender_device_id" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sealed_sender::SenderCertificate" -> "libsignal_protocol::sealed_sender::SenderCertificate::sender_e164" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sealed_sender::SenderCertificate" -> "libsignal_protocol::sealed_sender::SenderCertificate::sender_uuid" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sealed_sender::SenderCertificate" -> "libsignal_protocol::sealed_sender::SenderCertificate::serialized" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sealed_sender::SenderCertificate" -> "libsignal_protocol::sealed_sender::SenderCertificate::signature" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sealed_sender::SenderCertificate" -> "libsignal_protocol::sealed_sender::SenderCertificate::signer" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sealed_sender::SenderCertificate" -> "libsignal_protocol::sealed_sender::SenderCertificate::validate" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sealed_sender::SenderCertificate" -> "libsignal_protocol::sealed_sender::ServerCertificate" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate" -> "libsignal_protocol::timestamp::Timestamp" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::certificate" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::certificate" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::certificate" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::certificate" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::certificate" -> "libsignal_protocol::sealed_sender::SenderCertificate" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::certificate" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::clone" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::clone" -> "alloc::string::String" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::clone" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::clone" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::clone" -> "libsignal_core::address::DeviceId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::clone" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::clone" -> "libsignal_protocol::sealed_sender::SenderCertificate" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::clone" -> "libsignal_protocol::sealed_sender::ServerCertificate" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::clone" -> "libsignal_protocol::timestamp::Timestamp" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::clone" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::deserialize" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::deserialize" -> "alloc::string::String" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::deserialize" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::deserialize" -> "core::convert::Infallible" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::deserialize" -> "core::iter::adapters::map::Map" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::deserialize" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::deserialize" -> "core::ops::range::RangeFull" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::deserialize" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::deserialize" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::deserialize" -> "libsignal_core::address::DeviceId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::deserialize" -> "libsignal_core::curve::CurveError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::deserialize" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::deserialize" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::deserialize" -> "libsignal_protocol::sealed_sender::SenderCertificate" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::deserialize" -> "libsignal_protocol::sealed_sender::ServerCertificate" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::deserialize" -> "libsignal_protocol::timestamp::Timestamp" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::deserialize" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::expiration" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::expiration" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::expiration" -> "libsignal_protocol::sealed_sender::SenderCertificate" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::expiration" -> "libsignal_protocol::timestamp::Timestamp" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::fmt" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::fmt" -> "alloc::string::String" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::fmt" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::fmt" -> "core::fmt::Error" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::fmt" -> "core::fmt::Formatter" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::fmt" -> "core::fmt::builders::DebugStruct" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::fmt" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::fmt" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::fmt" -> "libsignal_core::address::DeviceId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::fmt" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::fmt" -> "libsignal_protocol::sealed_sender::SenderCertificate" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::fmt" -> "libsignal_protocol::sealed_sender::ServerCertificate" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::fmt" -> "libsignal_protocol::timestamp::Timestamp" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::fmt" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::fmt" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::key" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::key" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::key" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::key" -> "libsignal_protocol::sealed_sender::SenderCertificate" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::new" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::new" -> "alloc::boxed::Box" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::new" -> "alloc::string::String" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::new" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::new" -> "core::convert::Infallible" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::new" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::new" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::new" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::new" -> "libsignal_core::address::DeviceId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::new" -> "libsignal_core::curve::CurveError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::new" -> "libsignal_core::curve::PrivateKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::new" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::new" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::new" -> "libsignal_protocol::sealed_sender::SenderCertificate" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::new" -> "libsignal_protocol::sealed_sender::ServerCertificate" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::new" -> "libsignal_protocol::timestamp::Timestamp" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::new" -> "u64" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::new" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::sender_device_id" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::sender_device_id" -> "libsignal_core::address::DeviceId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::sender_device_id" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::sender_device_id" -> "libsignal_protocol::sealed_sender::SenderCertificate" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::sender_e164" -> "alloc::string::String" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::sender_e164" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::sender_e164" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::sender_e164" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::sender_e164" -> "libsignal_protocol::sealed_sender::SenderCertificate" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::sender_e164" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::sender_uuid" -> "alloc::string::String" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::sender_uuid" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::sender_uuid" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::sender_uuid" -> "libsignal_protocol::sealed_sender::SenderCertificate" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::sender_uuid" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::serialized" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::serialized" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::serialized" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::serialized" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::serialized" -> "libsignal_protocol::sealed_sender::SenderCertificate" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::serialized" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::signature" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::signature" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::signature" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::signature" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::signature" -> "libsignal_protocol::sealed_sender::SenderCertificate" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::signature" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::signer" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::signer" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::signer" -> "libsignal_protocol::sealed_sender::SenderCertificate" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::signer" -> "libsignal_protocol::sealed_sender::ServerCertificate" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::validate" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::validate" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::validate" -> "bool" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::validate" -> "char" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::validate" -> "core::convert::Infallible" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::validate" -> "core::fmt::Arguments" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::validate" -> "core::fmt::rt::Alignment" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::validate" -> "core::fmt::rt::Argument" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::validate" -> "core::fmt::rt::Count" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::validate" -> "core::fmt::rt::Placeholder" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::validate" -> "core::fmt::rt::UnsafeArg" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::validate" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::validate" -> "core::panic::location::Location" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::validate" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::validate" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::validate" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::validate" -> "libsignal_protocol::sealed_sender::SenderCertificate" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::validate" -> "libsignal_protocol::sealed_sender::ServerCertificate" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::validate" -> "libsignal_protocol::timestamp::Timestamp" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::validate" -> "log::Level" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::validate" -> "log::LevelFilter" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::validate" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::validate" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::validate" -> "u64" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::validate" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::SenderCertificate::validate" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ServerCertificate" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ServerCertificate" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ServerCertificate" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ServerCertificate" -> "libsignal_protocol::sealed_sender::ServerCertificate::certificate" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sealed_sender::ServerCertificate" -> "libsignal_protocol::sealed_sender::ServerCertificate::clone" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sealed_sender::ServerCertificate" -> "libsignal_protocol::sealed_sender::ServerCertificate::deserialize" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sealed_sender::ServerCertificate" -> "libsignal_protocol::sealed_sender::ServerCertificate::fmt" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sealed_sender::ServerCertificate" -> "libsignal_protocol::sealed_sender::ServerCertificate::key_id" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sealed_sender::ServerCertificate" -> "libsignal_protocol::sealed_sender::ServerCertificate::new" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sealed_sender::ServerCertificate" -> "libsignal_protocol::sealed_sender::ServerCertificate::public_key" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sealed_sender::ServerCertificate" -> "libsignal_protocol::sealed_sender::ServerCertificate::serialized" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sealed_sender::ServerCertificate" -> "libsignal_protocol::sealed_sender::ServerCertificate::signature" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sealed_sender::ServerCertificate" -> "libsignal_protocol::sealed_sender::ServerCertificate::to_protobuf" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sealed_sender::ServerCertificate" -> "libsignal_protocol::sealed_sender::ServerCertificate::validate" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sealed_sender::ServerCertificate::certificate" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ServerCertificate::certificate" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ServerCertificate::certificate" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ServerCertificate::certificate" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ServerCertificate::certificate" -> "libsignal_protocol::sealed_sender::ServerCertificate" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ServerCertificate::certificate" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ServerCertificate::clone" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ServerCertificate::clone" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ServerCertificate::clone" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ServerCertificate::clone" -> "libsignal_protocol::sealed_sender::ServerCertificate" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ServerCertificate::clone" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ServerCertificate::clone" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ServerCertificate::deserialize" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ServerCertificate::deserialize" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ServerCertificate::deserialize" -> "bool" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ServerCertificate::deserialize" -> "core::convert::Infallible" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ServerCertificate::deserialize" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ServerCertificate::deserialize" -> "core::ops::range::RangeFull" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ServerCertificate::deserialize" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ServerCertificate::deserialize" -> "libsignal_core::curve::CurveError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ServerCertificate::deserialize" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ServerCertificate::deserialize" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ServerCertificate::deserialize" -> "libsignal_protocol::sealed_sender::ServerCertificate" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ServerCertificate::deserialize" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ServerCertificate::deserialize" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ServerCertificate::fmt" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ServerCertificate::fmt" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ServerCertificate::fmt" -> "core::fmt::Error" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ServerCertificate::fmt" -> "core::fmt::Formatter" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ServerCertificate::fmt" -> "core::fmt::builders::DebugStruct" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ServerCertificate::fmt" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ServerCertificate::fmt" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ServerCertificate::fmt" -> "libsignal_protocol::sealed_sender::ServerCertificate" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ServerCertificate::fmt" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ServerCertificate::fmt" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ServerCertificate::fmt" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ServerCertificate::key_id" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ServerCertificate::key_id" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ServerCertificate::key_id" -> "libsignal_protocol::sealed_sender::ServerCertificate" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ServerCertificate::key_id" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ServerCertificate::new" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ServerCertificate::new" -> "alloc::boxed::Box" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ServerCertificate::new" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ServerCertificate::new" -> "core::convert::Infallible" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ServerCertificate::new" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ServerCertificate::new" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ServerCertificate::new" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ServerCertificate::new" -> "libsignal_core::curve::CurveError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ServerCertificate::new" -> "libsignal_core::curve::PrivateKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ServerCertificate::new" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ServerCertificate::new" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ServerCertificate::new" -> "libsignal_protocol::sealed_sender::ServerCertificate" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ServerCertificate::new" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ServerCertificate::new" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ServerCertificate::public_key" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ServerCertificate::public_key" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ServerCertificate::public_key" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ServerCertificate::public_key" -> "libsignal_protocol::sealed_sender::ServerCertificate" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ServerCertificate::serialized" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ServerCertificate::serialized" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ServerCertificate::serialized" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ServerCertificate::serialized" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ServerCertificate::serialized" -> "libsignal_protocol::sealed_sender::ServerCertificate" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ServerCertificate::serialized" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ServerCertificate::signature" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ServerCertificate::signature" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ServerCertificate::signature" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ServerCertificate::signature" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ServerCertificate::signature" -> "libsignal_protocol::sealed_sender::ServerCertificate" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ServerCertificate::signature" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ServerCertificate::to_protobuf" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ServerCertificate::to_protobuf" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ServerCertificate::to_protobuf" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ServerCertificate::to_protobuf" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ServerCertificate::to_protobuf" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ServerCertificate::to_protobuf" -> "libsignal_protocol::sealed_sender::ServerCertificate" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ServerCertificate::to_protobuf" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ServerCertificate::validate" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ServerCertificate::validate" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ServerCertificate::validate" -> "bool" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ServerCertificate::validate" -> "char" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ServerCertificate::validate" -> "core::convert::Infallible" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ServerCertificate::validate" -> "core::fmt::Arguments" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ServerCertificate::validate" -> "core::fmt::rt::Alignment" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ServerCertificate::validate" -> "core::fmt::rt::Argument" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ServerCertificate::validate" -> "core::fmt::rt::Count" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ServerCertificate::validate" -> "core::fmt::rt::Placeholder" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ServerCertificate::validate" -> "core::fmt::rt::UnsafeArg" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ServerCertificate::validate" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ServerCertificate::validate" -> "core::panic::location::Location" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ServerCertificate::validate" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ServerCertificate::validate" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ServerCertificate::validate" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ServerCertificate::validate" -> "libsignal_protocol::sealed_sender::ServerCertificate" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ServerCertificate::validate" -> "log::Level" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ServerCertificate::validate" -> "log::LevelFilter" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ServerCertificate::validate" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ServerCertificate::validate" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ServerCertificate::validate" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::ServerCertificate::validate" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessage" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessage" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessage" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessage" -> "libsignal_protocol::sealed_sender::UnidentifiedSenderMessage::deserialize" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessage::deserialize" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessage::deserialize" -> "alloc::string::String" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessage::deserialize" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessage::deserialize" -> "bool" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessage::deserialize" -> "char" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessage::deserialize" -> "core::convert::Infallible" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessage::deserialize" -> "core::fmt::Arguments" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessage::deserialize" -> "core::fmt::rt::Alignment" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessage::deserialize" -> "core::fmt::rt::Argument" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessage::deserialize" -> "core::fmt::rt::Count" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessage::deserialize" -> "core::fmt::rt::Placeholder" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessage::deserialize" -> "core::fmt::rt::UnsafeArg" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessage::deserialize" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessage::deserialize" -> "core::ops::range::RangeFull" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessage::deserialize" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessage::deserialize" -> "core::panic::location::Location" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessage::deserialize" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessage::deserialize" -> "i32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessage::deserialize" -> "libsignal_core::curve::CurveError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessage::deserialize" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessage::deserialize" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessage::deserialize" -> "libsignal_protocol::sealed_sender::PrefixRepr" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessage::deserialize" -> "libsignal_protocol::sealed_sender::UnidentifiedSenderMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessage::deserialize" -> "log::Level" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessage::deserialize" -> "log::LevelFilter" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessage::deserialize" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessage::deserialize" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessage::deserialize" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessage::deserialize" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessage::deserialize" -> "zerocopy::Ref" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent" -> "libsignal_protocol::protocol::CiphertextMessageType" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent" -> "libsignal_protocol::sealed_sender::ContentHint" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent" -> "libsignal_protocol::sealed_sender::SenderCertificate" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent" -> "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent::content_hint" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent" -> "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent::contents" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent" -> "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent::deserialize" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent" -> "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent::group_id" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent" -> "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent::msg_type" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent" -> "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent::new" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent" -> "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent::sender" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent" -> "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent::serialized" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent::content_hint" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent::content_hint" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent::content_hint" -> "libsignal_protocol::sealed_sender::ContentHint" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent::content_hint" -> "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent::contents" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent::contents" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent::contents" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent::contents" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent::contents" -> "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent::contents" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent::deserialize" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent::deserialize" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent::deserialize" -> "bool" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent::deserialize" -> "char" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent::deserialize" -> "core::convert::Infallible" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent::deserialize" -> "core::fmt::Arguments" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent::deserialize" -> "core::fmt::rt::Alignment" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent::deserialize" -> "core::fmt::rt::Argument" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent::deserialize" -> "core::fmt::rt::Count" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent::deserialize" -> "core::fmt::rt::Placeholder" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent::deserialize" -> "core::fmt::rt::UnsafeArg" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent::deserialize" -> "core::iter::adapters::map::Map" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent::deserialize" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent::deserialize" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent::deserialize" -> "core::panic::location::Location" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent::deserialize" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent::deserialize" -> "libsignal_core::address::DeviceId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent::deserialize" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent::deserialize" -> "libsignal_protocol::protocol::CiphertextMessageType" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent::deserialize" -> "libsignal_protocol::sealed_sender::ContentHint" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent::deserialize" -> "libsignal_protocol::sealed_sender::SenderCertificate" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent::deserialize" -> "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent::deserialize" -> "log::Level" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent::deserialize" -> "log::LevelFilter" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent::deserialize" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent::deserialize" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent::deserialize" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent::deserialize" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent::group_id" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent::group_id" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent::group_id" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent::group_id" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent::group_id" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent::group_id" -> "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent::group_id" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent::msg_type" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent::msg_type" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent::msg_type" -> "libsignal_protocol::protocol::CiphertextMessageType" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent::msg_type" -> "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent::new" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent::new" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent::new" -> "bool" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent::new" -> "core::convert::Infallible" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent::new" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent::new" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent::new" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent::new" -> "i32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent::new" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent::new" -> "libsignal_protocol::protocol::CiphertextMessageType" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent::new" -> "libsignal_protocol::sealed_sender::ContentHint" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent::new" -> "libsignal_protocol::sealed_sender::SenderCertificate" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent::new" -> "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent::new" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent::sender" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent::sender" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent::sender" -> "libsignal_protocol::sealed_sender::SenderCertificate" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent::sender" -> "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent::serialized" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent::serialized" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent::serialized" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent::serialized" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent::serialized" -> "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent::serialized" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_decrypt" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_decrypt" -> "alloc::string::String" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_decrypt" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_decrypt" -> "bool" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_decrypt" -> "core::convert::Infallible" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_decrypt" -> "core::future::future::Future" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_decrypt" -> "core::marker::Sized" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_decrypt" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_decrypt" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_decrypt" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_decrypt" -> "libsignal_core::address::DeviceId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_decrypt" -> "libsignal_core::address::ProtocolAddress" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_decrypt" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_decrypt" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_decrypt" -> "libsignal_protocol::protocol::CiphertextMessageType" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_decrypt" -> "libsignal_protocol::protocol::PreKeySignalMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_decrypt" -> "libsignal_protocol::protocol::SignalMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_decrypt" -> "libsignal_protocol::sealed_sender::SealedSenderDecryptionResult" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_decrypt" -> "libsignal_protocol::sealed_sender::SenderCertificate" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_decrypt" -> "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_decrypt" -> "libsignal_protocol::storage::traits::IdentityKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_decrypt" -> "libsignal_protocol::storage::traits::KyberPreKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_decrypt" -> "libsignal_protocol::storage::traits::PreKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_decrypt" -> "libsignal_protocol::storage::traits::SessionStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_decrypt" -> "libsignal_protocol::storage::traits::SignedPreKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_decrypt" -> "libsignal_protocol::timestamp::Timestamp" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_decrypt" -> "rand_core::os::OsRng" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_decrypt" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_decrypt" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_decrypt_to_usmc" -> "aead::Error" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_decrypt_to_usmc" -> "aes::autodetect::Aes256" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_decrypt_to_usmc" -> "aes_gcm_siv::AesGcmSiv" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_decrypt_to_usmc" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_decrypt_to_usmc" -> "alloc::boxed::Box" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_decrypt_to_usmc" -> "alloc::string::String" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_decrypt_to_usmc" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_decrypt_to_usmc" -> "bool" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_decrypt_to_usmc" -> "char" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_decrypt_to_usmc" -> "core::convert::Infallible" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_decrypt_to_usmc" -> "core::fmt::Arguments" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_decrypt_to_usmc" -> "core::fmt::rt::Alignment" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_decrypt_to_usmc" -> "core::fmt::rt::Argument" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_decrypt_to_usmc" -> "core::fmt::rt::Count" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_decrypt_to_usmc" -> "core::fmt::rt::Placeholder" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_decrypt_to_usmc" -> "core::fmt::rt::UnsafeArg" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_decrypt_to_usmc" -> "core::future::future::Future" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_decrypt_to_usmc" -> "core::marker::Sized" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_decrypt_to_usmc" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_decrypt_to_usmc" -> "core::ops::range::RangeFull" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_decrypt_to_usmc" -> "core::panic::location::Location" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_decrypt_to_usmc" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_decrypt_to_usmc" -> "generic_array::GenericArray" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_decrypt_to_usmc" -> "libsignal_core::curve::CurveError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_decrypt_to_usmc" -> "libsignal_core::curve::KeyPair" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_decrypt_to_usmc" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_decrypt_to_usmc" -> "libsignal_protocol::crypto::DecryptionError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_decrypt_to_usmc" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_decrypt_to_usmc" -> "libsignal_protocol::identity_key::IdentityKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_decrypt_to_usmc" -> "libsignal_protocol::identity_key::IdentityKeyPair" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_decrypt_to_usmc" -> "libsignal_protocol::sealed_sender::SenderCertificate" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_decrypt_to_usmc" -> "libsignal_protocol::sealed_sender::UnidentifiedSenderMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_decrypt_to_usmc" -> "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_decrypt_to_usmc" -> "libsignal_protocol::sealed_sender::sealed_sender_v1::EphemeralKeys" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_decrypt_to_usmc" -> "libsignal_protocol::sealed_sender::sealed_sender_v1::StaticKeys" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_decrypt_to_usmc" -> "libsignal_protocol::sealed_sender::sealed_sender_v2::DerivedKeys" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_decrypt_to_usmc" -> "libsignal_protocol::storage::traits::Direction" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_decrypt_to_usmc" -> "libsignal_protocol::storage::traits::IdentityKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_decrypt_to_usmc" -> "log::Level" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_decrypt_to_usmc" -> "log::LevelFilter" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_decrypt_to_usmc" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_decrypt_to_usmc" -> "subtle::Choice" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_decrypt_to_usmc" -> "typenum::bit::B0" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_decrypt_to_usmc" -> "typenum::bit::B1" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_decrypt_to_usmc" -> "typenum::uint::UInt" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_decrypt_to_usmc" -> "typenum::uint::UTerm" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_decrypt_to_usmc" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_decrypt_to_usmc" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_decrypt_to_usmc" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_encrypt" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_encrypt" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_encrypt" -> "core::convert::Infallible" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_encrypt" -> "core::future::future::Future" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_encrypt" -> "core::marker::Sized" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_encrypt" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_encrypt" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_encrypt" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_encrypt" -> "libsignal_core::address::ProtocolAddress" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_encrypt" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_encrypt" -> "libsignal_protocol::protocol::CiphertextMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_encrypt" -> "libsignal_protocol::protocol::CiphertextMessageType" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_encrypt" -> "libsignal_protocol::sealed_sender::ContentHint" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_encrypt" -> "libsignal_protocol::sealed_sender::SenderCertificate" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_encrypt" -> "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_encrypt" -> "libsignal_protocol::storage::traits::IdentityKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_encrypt" -> "libsignal_protocol::storage::traits::SessionStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_encrypt" -> "std::time::SystemTime" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_encrypt" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_encrypt_from_usmc" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_encrypt_from_usmc" -> "alloc::boxed::Box" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_encrypt_from_usmc" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_encrypt_from_usmc" -> "core::convert::Infallible" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_encrypt_from_usmc" -> "core::future::future::Future" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_encrypt_from_usmc" -> "core::marker::Sized" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_encrypt_from_usmc" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_encrypt_from_usmc" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_encrypt_from_usmc" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_encrypt_from_usmc" -> "libsignal_core::address::ProtocolAddress" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_encrypt_from_usmc" -> "libsignal_core::curve::KeyPair" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_encrypt_from_usmc" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_encrypt_from_usmc" -> "libsignal_protocol::crypto::EncryptionError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_encrypt_from_usmc" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_encrypt_from_usmc" -> "libsignal_protocol::identity_key::IdentityKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_encrypt_from_usmc" -> "libsignal_protocol::identity_key::IdentityKeyPair" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_encrypt_from_usmc" -> "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_encrypt_from_usmc" -> "libsignal_protocol::sealed_sender::sealed_sender_v1::EphemeralKeys" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_encrypt_from_usmc" -> "libsignal_protocol::sealed_sender::sealed_sender_v1::StaticKeys" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_encrypt_from_usmc" -> "libsignal_protocol::storage::traits::Direction" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_encrypt_from_usmc" -> "libsignal_protocol::storage::traits::IdentityKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_encrypt_from_usmc" -> "prost::error::EncodeError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_encrypt_from_usmc" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_encrypt_from_usmc" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_encrypt_from_usmc" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_multi_recipient_encrypt" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_multi_recipient_encrypt" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_multi_recipient_encrypt" -> "core::future::future::Future" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_multi_recipient_encrypt" -> "core::marker::Sized" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_multi_recipient_encrypt" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_multi_recipient_encrypt" -> "libsignal_core::address::ProtocolAddress" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_multi_recipient_encrypt" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_multi_recipient_encrypt" -> "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_multi_recipient_encrypt" -> "libsignal_protocol::state::session::SessionRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_multi_recipient_encrypt" -> "libsignal_protocol::storage::traits::IdentityKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_multi_recipient_encrypt" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_multi_recipient_encrypt_impl" -> "aead::Error" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_multi_recipient_encrypt_impl" -> "aes::autodetect::Aes256" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_multi_recipient_encrypt_impl" -> "aes_gcm_siv::AesGcmSiv" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_multi_recipient_encrypt_impl" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_multi_recipient_encrypt_impl" -> "alloc::boxed::Box" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_multi_recipient_encrypt_impl" -> "alloc::string::String" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_multi_recipient_encrypt_impl" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_multi_recipient_encrypt_impl" -> "alloc::vec::into_iter::IntoIter" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_multi_recipient_encrypt_impl" -> "bool" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_multi_recipient_encrypt_impl" -> "char" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_multi_recipient_encrypt_impl" -> "core::convert::Infallible" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_multi_recipient_encrypt_impl" -> "core::fmt::Arguments" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_multi_recipient_encrypt_impl" -> "core::fmt::rt::Alignment" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_multi_recipient_encrypt_impl" -> "core::fmt::rt::Argument" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_multi_recipient_encrypt_impl" -> "core::fmt::rt::Count" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_multi_recipient_encrypt_impl" -> "core::fmt::rt::Placeholder" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_multi_recipient_encrypt_impl" -> "core::fmt::rt::UnsafeArg" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_multi_recipient_encrypt_impl" -> "core::future::future::Future" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_multi_recipient_encrypt_impl" -> "core::iter::adapters::enumerate::Enumerate" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_multi_recipient_encrypt_impl" -> "core::iter::adapters::zip::Zip" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_multi_recipient_encrypt_impl" -> "core::marker::Sized" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_multi_recipient_encrypt_impl" -> "core::num::error::TryFromIntError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_multi_recipient_encrypt_impl" -> "core::num::nonzero::NonZero" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_multi_recipient_encrypt_impl" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_multi_recipient_encrypt_impl" -> "core::ops::range::Range" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_multi_recipient_encrypt_impl" -> "core::ops::range::RangeFull" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_multi_recipient_encrypt_impl" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_multi_recipient_encrypt_impl" -> "core::panic::location::Location" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_multi_recipient_encrypt_impl" -> "core::panicking::AssertKind" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_multi_recipient_encrypt_impl" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_multi_recipient_encrypt_impl" -> "core::slice::iter::Chunks" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_multi_recipient_encrypt_impl" -> "core::slice::iter::Iter" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_multi_recipient_encrypt_impl" -> "generic_array::GenericArray" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_multi_recipient_encrypt_impl" -> "itertools::groupbylazy::ChunkBy" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_multi_recipient_encrypt_impl" -> "itertools::groupbylazy::Group" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_multi_recipient_encrypt_impl" -> "itertools::groupbylazy::Groups" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_multi_recipient_encrypt_impl" -> "libsignal_core::address::DeviceId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_multi_recipient_encrypt_impl" -> "libsignal_core::address::ProtocolAddress" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_multi_recipient_encrypt_impl" -> "libsignal_core::address::ServiceId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_multi_recipient_encrypt_impl" -> "libsignal_core::curve::KeyPair" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_multi_recipient_encrypt_impl" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_multi_recipient_encrypt_impl" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_multi_recipient_encrypt_impl" -> "libsignal_protocol::identity_key::IdentityKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_multi_recipient_encrypt_impl" -> "libsignal_protocol::identity_key::IdentityKeyPair" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_multi_recipient_encrypt_impl" -> "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_multi_recipient_encrypt_impl" -> "libsignal_protocol::sealed_sender::sealed_sender_v2::DerivedKeys" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_multi_recipient_encrypt_impl" -> "libsignal_protocol::state::session::SessionRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_multi_recipient_encrypt_impl" -> "libsignal_protocol::storage::traits::Direction" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_multi_recipient_encrypt_impl" -> "libsignal_protocol::storage::traits::IdentityKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_multi_recipient_encrypt_impl" -> "log::Level" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_multi_recipient_encrypt_impl" -> "log::LevelFilter" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_multi_recipient_encrypt_impl" -> "prost::error::EncodeError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_multi_recipient_encrypt_impl" -> "rayon_core::scope::Scope" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_multi_recipient_encrypt_impl" -> "std::io::error::Error" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_multi_recipient_encrypt_impl" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_multi_recipient_encrypt_impl" -> "typenum::bit::B0" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_multi_recipient_encrypt_impl" -> "typenum::bit::B1" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_multi_recipient_encrypt_impl" -> "typenum::uint::UInt" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_multi_recipient_encrypt_impl" -> "typenum::uint::UTerm" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_multi_recipient_encrypt_impl" -> "u16" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_multi_recipient_encrypt_impl" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_multi_recipient_encrypt_impl" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_multi_recipient_encrypt_impl" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1" -> "aead::AeadInPlace" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1" -> "aes_gcm_siv::Aes256GcmSiv" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1" -> "core::ops::range::Range" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1" -> "crypto_common::KeyInit" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1" -> "indexmap::map::IndexMap" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1" -> "itertools::Itertools" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1" -> "libsignal_core::address::Aci" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1" -> "libsignal_core::address::DeviceId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1" -> "libsignal_core::address::ProtocolAddress" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1" -> "libsignal_core::address::ServiceId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1" -> "libsignal_core::address::ServiceIdFixedWidthBinaryBytes" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1" -> "libsignal_core::curve::KeyPair" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1" -> "libsignal_core::curve::PrivateKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1" -> "libsignal_protocol::crypto" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1" -> "libsignal_protocol::error::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1" -> "libsignal_protocol::identity_key::IdentityKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1" -> "libsignal_protocol::identity_key::IdentityKeyPair" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1" -> "libsignal_protocol::proto" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1" -> "libsignal_protocol::protocol::CiphertextMessageType" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1" -> "libsignal_protocol::protocol::PreKeySignalMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1" -> "libsignal_protocol::protocol::SignalMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1" -> "libsignal_protocol::sealed_sender::ContentHint" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1" -> "libsignal_protocol::sealed_sender::SealedSenderDecryptionResult" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1" -> "libsignal_protocol::sealed_sender::SealedSenderV2SentMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1" -> "libsignal_protocol::sealed_sender::SealedSenderV2SentMessageRecipient" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1" -> "libsignal_protocol::sealed_sender::SenderCertificate" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1" -> "libsignal_protocol::sealed_sender::ServerCertificate" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1" -> "libsignal_protocol::sealed_sender::UnidentifiedSenderMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1" -> "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1" -> "libsignal_protocol::sealed_sender::sealed_sender_decrypt" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1" -> "libsignal_protocol::sealed_sender::sealed_sender_decrypt_to_usmc" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1" -> "libsignal_protocol::sealed_sender::sealed_sender_encrypt" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1" -> "libsignal_protocol::sealed_sender::sealed_sender_encrypt_from_usmc" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1" -> "libsignal_protocol::sealed_sender::sealed_sender_multi_recipient_encrypt" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1" -> "libsignal_protocol::sealed_sender::sealed_sender_multi_recipient_encrypt_impl" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1" -> "libsignal_protocol::sealed_sender::sealed_sender_v1::EphemeralKeys" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1" -> "libsignal_protocol::sealed_sender::sealed_sender_v1::StaticKeys" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1" -> "libsignal_protocol::sealed_sender::sealed_sender_v2" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1" -> "libsignal_protocol::session_cipher" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1" -> "libsignal_protocol::session_cipher::message_encrypt" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1" -> "libsignal_protocol::state::session::SessionRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1" -> "libsignal_protocol::storage::traits::Direction" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1" -> "libsignal_protocol::storage::traits::IdentityKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1" -> "libsignal_protocol::storage::traits::KyberPreKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1" -> "libsignal_protocol::storage::traits::PreKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1" -> "libsignal_protocol::storage::traits::SessionStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1" -> "libsignal_protocol::storage::traits::SignedPreKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1" -> "libsignal_protocol::timestamp::Timestamp" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1" -> "prost::message::Message" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1" -> "rand::rng::Rng" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1" -> "rand_core::CryptoRng" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1" -> "std::time::SystemTime" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1" -> "subtle::ConstantTimeEq" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1" -> "typenum::marker_traits::Unsigned" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1" -> "zerocopy::FromBytes" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1" -> "zerocopy::FromZeroes" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1::EphemeralKeys" -> "libsignal_protocol::sealed_sender::sealed_sender_v1::EphemeralKeys::calculate" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1::EphemeralKeys::calculate" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1::EphemeralKeys::calculate" -> "alloc::boxed::Box" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1::EphemeralKeys::calculate" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1::EphemeralKeys::calculate" -> "core::convert::Infallible" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1::EphemeralKeys::calculate" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1::EphemeralKeys::calculate" -> "core::ops::range::Range" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1::EphemeralKeys::calculate" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1::EphemeralKeys::calculate" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1::EphemeralKeys::calculate" -> "digest::core_api::ct_variable::CtVariableCoreWrapper" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1::EphemeralKeys::calculate" -> "digest::core_api::wrapper::CoreWrapper" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1::EphemeralKeys::calculate" -> "hkdf::Hkdf" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1::EphemeralKeys::calculate" -> "hkdf::errors::InvalidLength" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1::EphemeralKeys::calculate" -> "hmac::optim::HmacCore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1::EphemeralKeys::calculate" -> "libsignal_core::curve::CurveError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1::EphemeralKeys::calculate" -> "libsignal_core::curve::KeyPair" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1::EphemeralKeys::calculate" -> "libsignal_core::curve::PrivateKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1::EphemeralKeys::calculate" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1::EphemeralKeys::calculate" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1::EphemeralKeys::calculate" -> "libsignal_protocol::sealed_sender::sealed_sender_v1::EphemeralKeys" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1::EphemeralKeys::calculate" -> "libsignal_protocol::storage::traits::Direction" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1::EphemeralKeys::calculate" -> "sha2::OidSha256" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1::EphemeralKeys::calculate" -> "sha2::core_api::Sha256VarCore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1::EphemeralKeys::calculate" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1::EphemeralKeys::calculate" -> "typenum::bit::B0" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1::EphemeralKeys::calculate" -> "typenum::bit::B1" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1::EphemeralKeys::calculate" -> "typenum::uint::UInt" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1::EphemeralKeys::calculate" -> "typenum::uint::UTerm" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1::EphemeralKeys::calculate" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1::EphemeralKeys::calculate" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1::StaticKeys" -> "libsignal_protocol::sealed_sender::sealed_sender_v1::StaticKeys::calculate" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1::StaticKeys::calculate" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1::StaticKeys::calculate" -> "alloc::boxed::Box" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1::StaticKeys::calculate" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1::StaticKeys::calculate" -> "core::convert::Infallible" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1::StaticKeys::calculate" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1::StaticKeys::calculate" -> "core::ops::range::Range" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1::StaticKeys::calculate" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1::StaticKeys::calculate" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1::StaticKeys::calculate" -> "digest::core_api::ct_variable::CtVariableCoreWrapper" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1::StaticKeys::calculate" -> "digest::core_api::wrapper::CoreWrapper" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1::StaticKeys::calculate" -> "hkdf::Hkdf" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1::StaticKeys::calculate" -> "hkdf::errors::InvalidLength" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1::StaticKeys::calculate" -> "hmac::optim::HmacCore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1::StaticKeys::calculate" -> "libsignal_core::curve::CurveError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1::StaticKeys::calculate" -> "libsignal_core::curve::PrivateKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1::StaticKeys::calculate" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1::StaticKeys::calculate" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1::StaticKeys::calculate" -> "libsignal_protocol::identity_key::IdentityKeyPair" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1::StaticKeys::calculate" -> "libsignal_protocol::sealed_sender::sealed_sender_v1::StaticKeys" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1::StaticKeys::calculate" -> "sha2::OidSha256" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1::StaticKeys::calculate" -> "sha2::core_api::Sha256VarCore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1::StaticKeys::calculate" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1::StaticKeys::calculate" -> "typenum::bit::B0" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1::StaticKeys::calculate" -> "typenum::bit::B1" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1::StaticKeys::calculate" -> "typenum::uint::UInt" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1::StaticKeys::calculate" -> "typenum::uint::UTerm" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1::StaticKeys::calculate" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v1::StaticKeys::calculate" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2" -> "aead::AeadInPlace" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2" -> "aes_gcm_siv::Aes256GcmSiv" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2" -> "core::ops::range::Range" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2" -> "crypto_common::KeyInit" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2" -> "indexmap::map::IndexMap" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2" -> "itertools::Itertools" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2" -> "libsignal_core::address::Aci" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2" -> "libsignal_core::address::DeviceId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2" -> "libsignal_core::address::ProtocolAddress" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2" -> "libsignal_core::address::ServiceId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2" -> "libsignal_core::address::ServiceIdFixedWidthBinaryBytes" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2" -> "libsignal_core::curve::KeyPair" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2" -> "libsignal_core::curve::PrivateKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2" -> "libsignal_protocol::crypto" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2" -> "libsignal_protocol::error::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2" -> "libsignal_protocol::identity_key::IdentityKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2" -> "libsignal_protocol::identity_key::IdentityKeyPair" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2" -> "libsignal_protocol::proto" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2" -> "libsignal_protocol::protocol::CiphertextMessageType" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2" -> "libsignal_protocol::protocol::PreKeySignalMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2" -> "libsignal_protocol::protocol::SignalMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2" -> "libsignal_protocol::sealed_sender::ContentHint" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2" -> "libsignal_protocol::sealed_sender::SealedSenderDecryptionResult" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2" -> "libsignal_protocol::sealed_sender::SealedSenderV2SentMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2" -> "libsignal_protocol::sealed_sender::SealedSenderV2SentMessageRecipient" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2" -> "libsignal_protocol::sealed_sender::SenderCertificate" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2" -> "libsignal_protocol::sealed_sender::ServerCertificate" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2" -> "libsignal_protocol::sealed_sender::UnidentifiedSenderMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2" -> "libsignal_protocol::sealed_sender::UnidentifiedSenderMessageContent" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2" -> "libsignal_protocol::sealed_sender::sealed_sender_decrypt" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2" -> "libsignal_protocol::sealed_sender::sealed_sender_decrypt_to_usmc" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2" -> "libsignal_protocol::sealed_sender::sealed_sender_encrypt" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2" -> "libsignal_protocol::sealed_sender::sealed_sender_encrypt_from_usmc" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2" -> "libsignal_protocol::sealed_sender::sealed_sender_multi_recipient_encrypt" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2" -> "libsignal_protocol::sealed_sender::sealed_sender_multi_recipient_encrypt_impl" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2" -> "libsignal_protocol::sealed_sender::sealed_sender_v1" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2" -> "libsignal_protocol::sealed_sender::sealed_sender_v2::DerivedKeys" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2" -> "libsignal_protocol::sealed_sender::sealed_sender_v2::apply_agreement_xor" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2" -> "libsignal_protocol::sealed_sender::sealed_sender_v2::compute_authentication_tag" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2" -> "libsignal_protocol::session_cipher" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2" -> "libsignal_protocol::session_cipher::message_encrypt" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2" -> "libsignal_protocol::state::session::SessionRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2" -> "libsignal_protocol::storage::traits::Direction" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2" -> "libsignal_protocol::storage::traits::IdentityKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2" -> "libsignal_protocol::storage::traits::KyberPreKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2" -> "libsignal_protocol::storage::traits::PreKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2" -> "libsignal_protocol::storage::traits::SessionStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2" -> "libsignal_protocol::storage::traits::SignedPreKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2" -> "libsignal_protocol::timestamp::Timestamp" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2" -> "prost::message::Message" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2" -> "rand::rng::Rng" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2" -> "rand_core::CryptoRng" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2" -> "std::time::SystemTime" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2" -> "subtle::ConstantTimeEq" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2" -> "typenum::marker_traits::Unsigned" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2" -> "zerocopy::FromBytes" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2" -> "zerocopy::FromZeroes" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::DerivedKeys" -> "digest::core_api::ct_variable::CtVariableCoreWrapper" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::DerivedKeys" -> "digest::core_api::wrapper::CoreWrapper" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::DerivedKeys" -> "hkdf::Hkdf" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::DerivedKeys" -> "hmac::optim::HmacCore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::DerivedKeys" -> "libsignal_protocol::sealed_sender::sealed_sender_v2::DerivedKeys::derive_e" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::DerivedKeys" -> "libsignal_protocol::sealed_sender::sealed_sender_v2::DerivedKeys::derive_k" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::DerivedKeys" -> "libsignal_protocol::sealed_sender::sealed_sender_v2::DerivedKeys::new" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::DerivedKeys" -> "sha2::OidSha256" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::DerivedKeys" -> "sha2::core_api::Sha256VarCore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::DerivedKeys" -> "typenum::bit::B0" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::DerivedKeys" -> "typenum::bit::B1" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::DerivedKeys" -> "typenum::uint::UInt" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::DerivedKeys" -> "typenum::uint::UTerm" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::DerivedKeys::derive_e" -> "core::ops::range::RangeFull" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::DerivedKeys::derive_e" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::DerivedKeys::derive_e" -> "digest::core_api::ct_variable::CtVariableCoreWrapper" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::DerivedKeys::derive_e" -> "digest::core_api::wrapper::CoreWrapper" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::DerivedKeys::derive_e" -> "hkdf::Hkdf" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::DerivedKeys::derive_e" -> "hkdf::errors::InvalidLength" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::DerivedKeys::derive_e" -> "hmac::optim::HmacCore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::DerivedKeys::derive_e" -> "libsignal_core::curve::CurveError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::DerivedKeys::derive_e" -> "libsignal_core::curve::KeyPair" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::DerivedKeys::derive_e" -> "libsignal_core::curve::PrivateKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::DerivedKeys::derive_e" -> "libsignal_protocol::sealed_sender::sealed_sender_v2::DerivedKeys" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::DerivedKeys::derive_e" -> "sha2::OidSha256" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::DerivedKeys::derive_e" -> "sha2::core_api::Sha256VarCore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::DerivedKeys::derive_e" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::DerivedKeys::derive_e" -> "typenum::bit::B0" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::DerivedKeys::derive_e" -> "typenum::bit::B1" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::DerivedKeys::derive_e" -> "typenum::uint::UInt" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::DerivedKeys::derive_e" -> "typenum::uint::UTerm" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::DerivedKeys::derive_e" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::DerivedKeys::derive_e" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::DerivedKeys::derive_k" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::DerivedKeys::derive_k" -> "digest::core_api::ct_variable::CtVariableCoreWrapper" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::DerivedKeys::derive_k" -> "digest::core_api::wrapper::CoreWrapper" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::DerivedKeys::derive_k" -> "hkdf::Hkdf" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::DerivedKeys::derive_k" -> "hkdf::errors::InvalidLength" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::DerivedKeys::derive_k" -> "hmac::optim::HmacCore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::DerivedKeys::derive_k" -> "libsignal_protocol::sealed_sender::sealed_sender_v2::DerivedKeys" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::DerivedKeys::derive_k" -> "sha2::OidSha256" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::DerivedKeys::derive_k" -> "sha2::core_api::Sha256VarCore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::DerivedKeys::derive_k" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::DerivedKeys::derive_k" -> "typenum::bit::B0" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::DerivedKeys::derive_k" -> "typenum::bit::B1" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::DerivedKeys::derive_k" -> "typenum::uint::UInt" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::DerivedKeys::derive_k" -> "typenum::uint::UTerm" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::DerivedKeys::derive_k" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::DerivedKeys::derive_k" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::DerivedKeys::new" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::DerivedKeys::new" -> "digest::core_api::ct_variable::CtVariableCoreWrapper" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::DerivedKeys::new" -> "digest::core_api::wrapper::CoreWrapper" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::DerivedKeys::new" -> "hkdf::Hkdf" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::DerivedKeys::new" -> "hmac::optim::HmacCore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::DerivedKeys::new" -> "libsignal_protocol::sealed_sender::sealed_sender_v2::DerivedKeys" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::DerivedKeys::new" -> "sha2::OidSha256" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::DerivedKeys::new" -> "sha2::core_api::Sha256VarCore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::DerivedKeys::new" -> "typenum::bit::B0" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::DerivedKeys::new" -> "typenum::bit::B1" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::DerivedKeys::new" -> "typenum::uint::UInt" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::DerivedKeys::new" -> "typenum::uint::UTerm" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::DerivedKeys::new" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::apply_agreement_xor" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::apply_agreement_xor" -> "alloc::boxed::Box" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::apply_agreement_xor" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::apply_agreement_xor" -> "core::convert::Infallible" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::apply_agreement_xor" -> "core::iter::adapters::zip::Zip" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::apply_agreement_xor" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::apply_agreement_xor" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::apply_agreement_xor" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::apply_agreement_xor" -> "core::slice::iter::Iter" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::apply_agreement_xor" -> "core::slice::iter::IterMut" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::apply_agreement_xor" -> "digest::core_api::ct_variable::CtVariableCoreWrapper" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::apply_agreement_xor" -> "digest::core_api::wrapper::CoreWrapper" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::apply_agreement_xor" -> "hkdf::Hkdf" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::apply_agreement_xor" -> "hkdf::errors::InvalidLength" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::apply_agreement_xor" -> "hmac::optim::HmacCore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::apply_agreement_xor" -> "libsignal_core::curve::CurveError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::apply_agreement_xor" -> "libsignal_core::curve::KeyPair" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::apply_agreement_xor" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::apply_agreement_xor" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::apply_agreement_xor" -> "libsignal_protocol::storage::traits::Direction" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::apply_agreement_xor" -> "sha2::OidSha256" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::apply_agreement_xor" -> "sha2::core_api::Sha256VarCore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::apply_agreement_xor" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::apply_agreement_xor" -> "typenum::bit::B0" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::apply_agreement_xor" -> "typenum::bit::B1" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::apply_agreement_xor" -> "typenum::uint::UInt" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::apply_agreement_xor" -> "typenum::uint::UTerm" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::apply_agreement_xor" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::apply_agreement_xor" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::compute_authentication_tag" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::compute_authentication_tag" -> "alloc::boxed::Box" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::compute_authentication_tag" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::compute_authentication_tag" -> "core::convert::Infallible" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::compute_authentication_tag" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::compute_authentication_tag" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::compute_authentication_tag" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::compute_authentication_tag" -> "digest::core_api::ct_variable::CtVariableCoreWrapper" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::compute_authentication_tag" -> "digest::core_api::wrapper::CoreWrapper" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::compute_authentication_tag" -> "hkdf::Hkdf" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::compute_authentication_tag" -> "hkdf::errors::InvalidLength" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::compute_authentication_tag" -> "hmac::optim::HmacCore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::compute_authentication_tag" -> "libsignal_core::curve::CurveError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::compute_authentication_tag" -> "libsignal_core::curve::PrivateKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::compute_authentication_tag" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::compute_authentication_tag" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::compute_authentication_tag" -> "libsignal_protocol::identity_key::IdentityKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::compute_authentication_tag" -> "libsignal_protocol::identity_key::IdentityKeyPair" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::compute_authentication_tag" -> "libsignal_protocol::storage::traits::Direction" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::compute_authentication_tag" -> "sha2::OidSha256" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::compute_authentication_tag" -> "sha2::core_api::Sha256VarCore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::compute_authentication_tag" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::compute_authentication_tag" -> "typenum::bit::B0" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::compute_authentication_tag" -> "typenum::bit::B1" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::compute_authentication_tag" -> "typenum::uint::UInt" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::compute_authentication_tag" -> "typenum::uint::UTerm" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::compute_authentication_tag" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sealed_sender::sealed_sender_v2::compute_authentication_tag" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys" -> "alloc::collections::vec_deque::VecDeque" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys" -> "itertools::Itertools" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys" -> "libsignal_core::curve::PrivateKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys" -> "libsignal_protocol::consts" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys" -> "libsignal_protocol::crypto::hmac_sha256" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys" -> "libsignal_protocol::proto::storage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys" -> "libsignal_protocol::sender_keys::InvalidSessionError" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sender_keys" -> "libsignal_protocol::sender_keys::SenderChainKey" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sender_keys" -> "libsignal_protocol::sender_keys::SenderKeyRecord" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sender_keys" -> "libsignal_protocol::sender_keys::SenderKeyState" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sender_keys" -> "libsignal_protocol::sender_keys::SenderMessageKey" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sender_keys" -> "prost::message::Message" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::InvalidSessionError" -> "libsignal_protocol::sender_keys::InvalidSessionError::fmt" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sender_keys::InvalidSessionError" -> "libsignal_protocol::sender_keys::InvalidSessionError::fmt" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sender_keys::InvalidSessionError::fmt" -> "core::fmt::Error" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::InvalidSessionError::fmt" -> "core::fmt::Error" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::InvalidSessionError::fmt" -> "core::fmt::Formatter" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::InvalidSessionError::fmt" -> "core::fmt::Formatter" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::InvalidSessionError::fmt" -> "core::fmt::builders::DebugTuple" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::InvalidSessionError::fmt" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::InvalidSessionError::fmt" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::InvalidSessionError::fmt" -> "libsignal_protocol::sender_keys::InvalidSessionError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::InvalidSessionError::fmt" -> "libsignal_protocol::sender_keys::InvalidSessionError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::InvalidSessionError::fmt" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::InvalidSessionError::fmt" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderChainKey" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderChainKey" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderChainKey" -> "libsignal_protocol::sender_keys::SenderChainKey::as_protobuf" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sender_keys::SenderChainKey" -> "libsignal_protocol::sender_keys::SenderChainKey::clone" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sender_keys::SenderChainKey" -> "libsignal_protocol::sender_keys::SenderChainKey::fmt" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sender_keys::SenderChainKey" -> "libsignal_protocol::sender_keys::SenderChainKey::get_derivative" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sender_keys::SenderChainKey" -> "libsignal_protocol::sender_keys::SenderChainKey::iteration" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sender_keys::SenderChainKey" -> "libsignal_protocol::sender_keys::SenderChainKey::new" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sender_keys::SenderChainKey" -> "libsignal_protocol::sender_keys::SenderChainKey::next" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sender_keys::SenderChainKey" -> "libsignal_protocol::sender_keys::SenderChainKey::seed" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sender_keys::SenderChainKey" -> "libsignal_protocol::sender_keys::SenderChainKey::sender_message_key" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sender_keys::SenderChainKey::as_protobuf" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderChainKey::as_protobuf" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderChainKey::as_protobuf" -> "libsignal_protocol::sender_keys::SenderChainKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderChainKey::as_protobuf" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderChainKey::as_protobuf" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderChainKey::clone" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderChainKey::clone" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderChainKey::clone" -> "libsignal_protocol::sender_keys::SenderChainKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderChainKey::clone" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderChainKey::clone" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderChainKey::fmt" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderChainKey::fmt" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderChainKey::fmt" -> "core::fmt::Error" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderChainKey::fmt" -> "core::fmt::Formatter" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderChainKey::fmt" -> "core::fmt::builders::DebugStruct" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderChainKey::fmt" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderChainKey::fmt" -> "libsignal_protocol::sender_keys::SenderChainKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderChainKey::fmt" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderChainKey::fmt" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderChainKey::fmt" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderChainKey::get_derivative" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderChainKey::get_derivative" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderChainKey::get_derivative" -> "libsignal_protocol::sender_keys::SenderChainKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderChainKey::get_derivative" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderChainKey::get_derivative" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderChainKey::iteration" -> "libsignal_protocol::sender_keys::SenderChainKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderChainKey::iteration" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderChainKey::new" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderChainKey::new" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderChainKey::new" -> "libsignal_protocol::sender_keys::SenderChainKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderChainKey::new" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderChainKey::new" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderChainKey::next" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderChainKey::next" -> "alloc::string::String" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderChainKey::next" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderChainKey::next" -> "core::convert::Infallible" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderChainKey::next" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderChainKey::next" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderChainKey::next" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderChainKey::next" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderChainKey::next" -> "libsignal_protocol::sender_keys::SenderChainKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderChainKey::next" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderChainKey::next" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderChainKey::next" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderChainKey::seed" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderChainKey::seed" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderChainKey::seed" -> "libsignal_protocol::sender_keys::SenderChainKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderChainKey::seed" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderChainKey::sender_message_key" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderChainKey::sender_message_key" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderChainKey::sender_message_key" -> "libsignal_protocol::sender_keys::SenderChainKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderChainKey::sender_message_key" -> "libsignal_protocol::sender_keys::SenderMessageKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderChainKey::sender_message_key" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderChainKey::sender_message_key" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord" -> "alloc::collections::vec_deque::VecDeque" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord" -> "libsignal_protocol::sender_keys::SenderKeyRecord::add_sender_key_state" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord" -> "libsignal_protocol::sender_keys::SenderKeyRecord::as_protobuf" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord" -> "libsignal_protocol::sender_keys::SenderKeyRecord::chain_ids_for_logging" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord" -> "libsignal_protocol::sender_keys::SenderKeyRecord::clone" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord" -> "libsignal_protocol::sender_keys::SenderKeyRecord::deserialize" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord" -> "libsignal_protocol::sender_keys::SenderKeyRecord::fmt" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord" -> "libsignal_protocol::sender_keys::SenderKeyRecord::new_empty" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord" -> "libsignal_protocol::sender_keys::SenderKeyRecord::remove_state" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord" -> "libsignal_protocol::sender_keys::SenderKeyRecord::remove_states_with_chain_id" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord" -> "libsignal_protocol::sender_keys::SenderKeyRecord::sender_key_state" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord" -> "libsignal_protocol::sender_keys::SenderKeyRecord::sender_key_state_for_chain_id" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord" -> "libsignal_protocol::sender_keys::SenderKeyRecord::sender_key_state_mut" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord" -> "libsignal_protocol::sender_keys::SenderKeyRecord::serialize" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord" -> "libsignal_protocol::sender_keys::SenderKeyState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::add_sender_key_state" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::add_sender_key_state" -> "alloc::collections::vec_deque::VecDeque" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::add_sender_key_state" -> "bool" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::add_sender_key_state" -> "char" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::add_sender_key_state" -> "core::fmt::Arguments" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::add_sender_key_state" -> "core::fmt::rt::Alignment" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::add_sender_key_state" -> "core::fmt::rt::Argument" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::add_sender_key_state" -> "core::fmt::rt::Count" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::add_sender_key_state" -> "core::fmt::rt::Placeholder" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::add_sender_key_state" -> "core::fmt::rt::UnsafeArg" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::add_sender_key_state" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::add_sender_key_state" -> "core::panic::location::Location" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::add_sender_key_state" -> "libsignal_core::curve::PrivateKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::add_sender_key_state" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::add_sender_key_state" -> "libsignal_protocol::sender_keys::SenderKeyRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::add_sender_key_state" -> "libsignal_protocol::sender_keys::SenderKeyState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::add_sender_key_state" -> "log::Level" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::add_sender_key_state" -> "log::LevelFilter" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::add_sender_key_state" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::add_sender_key_state" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::add_sender_key_state" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::add_sender_key_state" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::as_protobuf" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::as_protobuf" -> "alloc::collections::vec_deque::VecDeque" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::as_protobuf" -> "alloc::collections::vec_deque::iter::Iter" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::as_protobuf" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::as_protobuf" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::as_protobuf" -> "libsignal_protocol::sender_keys::SenderKeyRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::as_protobuf" -> "libsignal_protocol::sender_keys::SenderKeyState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::as_protobuf" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::chain_ids_for_logging" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::chain_ids_for_logging" -> "alloc::collections::vec_deque::VecDeque" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::chain_ids_for_logging" -> "alloc::collections::vec_deque::iter::Iter" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::chain_ids_for_logging" -> "core::iter::adapters::map::Map" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::chain_ids_for_logging" -> "core::iter::traits::exact_size::ExactSizeIterator" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::chain_ids_for_logging" -> "core::marker::Sized" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::chain_ids_for_logging" -> "libsignal_protocol::sender_keys::SenderKeyRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::chain_ids_for_logging" -> "libsignal_protocol::sender_keys::SenderKeyState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::chain_ids_for_logging" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::clone" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::clone" -> "alloc::collections::vec_deque::VecDeque" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::clone" -> "libsignal_protocol::sender_keys::SenderKeyRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::clone" -> "libsignal_protocol::sender_keys::SenderKeyState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::deserialize" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::deserialize" -> "alloc::collections::vec_deque::VecDeque" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::deserialize" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::deserialize" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::deserialize" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::deserialize" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::deserialize" -> "libsignal_protocol::sender_keys::SenderKeyRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::deserialize" -> "libsignal_protocol::sender_keys::SenderKeyState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::deserialize" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::deserialize" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::fmt" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::fmt" -> "alloc::collections::vec_deque::VecDeque" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::fmt" -> "core::fmt::Error" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::fmt" -> "core::fmt::Formatter" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::fmt" -> "core::fmt::builders::DebugStruct" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::fmt" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::fmt" -> "libsignal_protocol::sender_keys::SenderKeyRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::fmt" -> "libsignal_protocol::sender_keys::SenderKeyState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::fmt" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::new_empty" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::new_empty" -> "alloc::collections::vec_deque::VecDeque" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::new_empty" -> "libsignal_protocol::sender_keys::SenderKeyRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::new_empty" -> "libsignal_protocol::sender_keys::SenderKeyState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::new_empty" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::remove_state" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::remove_state" -> "alloc::collections::vec_deque::VecDeque" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::remove_state" -> "alloc::collections::vec_deque::iter::Iter" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::remove_state" -> "bool" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::remove_state" -> "core::convert::Infallible" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::remove_state" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::remove_state" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::remove_state" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::remove_state" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::remove_state" -> "libsignal_protocol::sender_keys::InvalidSessionError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::remove_state" -> "libsignal_protocol::sender_keys::SenderKeyRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::remove_state" -> "libsignal_protocol::sender_keys::SenderKeyState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::remove_state" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::remove_state" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::remove_states_with_chain_id" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::remove_states_with_chain_id" -> "alloc::collections::vec_deque::VecDeque" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::remove_states_with_chain_id" -> "bool" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::remove_states_with_chain_id" -> "libsignal_protocol::sender_keys::SenderKeyRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::remove_states_with_chain_id" -> "libsignal_protocol::sender_keys::SenderKeyState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::remove_states_with_chain_id" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::remove_states_with_chain_id" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::sender_key_state" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::sender_key_state" -> "alloc::collections::vec_deque::VecDeque" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::sender_key_state" -> "bool" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::sender_key_state" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::sender_key_state" -> "libsignal_protocol::sender_keys::InvalidSessionError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::sender_key_state" -> "libsignal_protocol::sender_keys::SenderKeyRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::sender_key_state" -> "libsignal_protocol::sender_keys::SenderKeyState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::sender_key_state" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::sender_key_state" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::sender_key_state_for_chain_id" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::sender_key_state_for_chain_id" -> "alloc::collections::vec_deque::VecDeque" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::sender_key_state_for_chain_id" -> "bool" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::sender_key_state_for_chain_id" -> "core::ops::range::Range" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::sender_key_state_for_chain_id" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::sender_key_state_for_chain_id" -> "libsignal_protocol::sender_keys::SenderKeyRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::sender_key_state_for_chain_id" -> "libsignal_protocol::sender_keys::SenderKeyState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::sender_key_state_for_chain_id" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::sender_key_state_for_chain_id" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::sender_key_state_mut" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::sender_key_state_mut" -> "alloc::collections::vec_deque::VecDeque" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::sender_key_state_mut" -> "bool" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::sender_key_state_mut" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::sender_key_state_mut" -> "libsignal_protocol::sender_keys::InvalidSessionError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::sender_key_state_mut" -> "libsignal_protocol::sender_keys::SenderKeyRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::sender_key_state_mut" -> "libsignal_protocol::sender_keys::SenderKeyState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::sender_key_state_mut" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::sender_key_state_mut" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::serialize" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::serialize" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::serialize" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::serialize" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::serialize" -> "libsignal_protocol::sender_keys::SenderKeyRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyRecord::serialize" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyState" -> "libsignal_protocol::sender_keys::SenderKeyState::add_sender_message_key" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sender_keys::SenderKeyState" -> "libsignal_protocol::sender_keys::SenderKeyState::as_protobuf" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sender_keys::SenderKeyState" -> "libsignal_protocol::sender_keys::SenderKeyState::chain_id" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sender_keys::SenderKeyState" -> "libsignal_protocol::sender_keys::SenderKeyState::clone" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sender_keys::SenderKeyState" -> "libsignal_protocol::sender_keys::SenderKeyState::fmt" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sender_keys::SenderKeyState" -> "libsignal_protocol::sender_keys::SenderKeyState::from_protobuf" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sender_keys::SenderKeyState" -> "libsignal_protocol::sender_keys::SenderKeyState::message_version" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sender_keys::SenderKeyState" -> "libsignal_protocol::sender_keys::SenderKeyState::new" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sender_keys::SenderKeyState" -> "libsignal_protocol::sender_keys::SenderKeyState::remove_sender_message_key" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sender_keys::SenderKeyState" -> "libsignal_protocol::sender_keys::SenderKeyState::sender_chain_key" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sender_keys::SenderKeyState" -> "libsignal_protocol::sender_keys::SenderKeyState::set_sender_chain_key" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sender_keys::SenderKeyState" -> "libsignal_protocol::sender_keys::SenderKeyState::signing_key_private" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sender_keys::SenderKeyState" -> "libsignal_protocol::sender_keys::SenderKeyState::signing_key_public" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sender_keys::SenderKeyState::add_sender_message_key" -> "bool" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyState::add_sender_message_key" -> "i32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyState::add_sender_message_key" -> "libsignal_protocol::sender_keys::SenderKeyState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyState::add_sender_message_key" -> "libsignal_protocol::sender_keys::SenderMessageKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyState::add_sender_message_key" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyState::as_protobuf" -> "libsignal_protocol::sender_keys::SenderKeyState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyState::chain_id" -> "libsignal_protocol::sender_keys::SenderKeyState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyState::chain_id" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyState::clone" -> "libsignal_protocol::sender_keys::SenderKeyState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyState::fmt" -> "core::fmt::Error" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyState::fmt" -> "core::fmt::Formatter" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyState::fmt" -> "core::fmt::builders::DebugStruct" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyState::fmt" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyState::fmt" -> "libsignal_protocol::sender_keys::SenderKeyState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyState::fmt" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyState::from_protobuf" -> "libsignal_protocol::sender_keys::SenderKeyState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyState::message_version" -> "libsignal_protocol::sender_keys::SenderKeyState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyState::message_version" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyState::new" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyState::new" -> "alloc::boxed::Box" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyState::new" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyState::new" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyState::new" -> "libsignal_core::curve::PrivateKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyState::new" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyState::new" -> "libsignal_protocol::sender_keys::SenderChainKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyState::new" -> "libsignal_protocol::sender_keys::SenderKeyState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyState::new" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyState::new" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyState::remove_sender_message_key" -> "bool" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyState::remove_sender_message_key" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyState::remove_sender_message_key" -> "libsignal_protocol::sender_keys::SenderKeyState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyState::remove_sender_message_key" -> "libsignal_protocol::sender_keys::SenderMessageKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyState::remove_sender_message_key" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyState::remove_sender_message_key" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyState::sender_chain_key" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyState::sender_chain_key" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyState::sender_chain_key" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyState::sender_chain_key" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyState::sender_chain_key" -> "libsignal_protocol::sender_keys::SenderChainKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyState::sender_chain_key" -> "libsignal_protocol::sender_keys::SenderKeyState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyState::sender_chain_key" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyState::sender_chain_key" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyState::set_sender_chain_key" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyState::set_sender_chain_key" -> "libsignal_protocol::sender_keys::SenderChainKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyState::set_sender_chain_key" -> "libsignal_protocol::sender_keys::SenderKeyState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyState::signing_key_private" -> "bool" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyState::signing_key_private" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyState::signing_key_private" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyState::signing_key_private" -> "libsignal_core::curve::CurveError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyState::signing_key_private" -> "libsignal_core::curve::PrivateKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyState::signing_key_private" -> "libsignal_protocol::sender_keys::InvalidSessionError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyState::signing_key_private" -> "libsignal_protocol::sender_keys::SenderKeyState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyState::signing_key_private" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyState::signing_key_private" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyState::signing_key_public" -> "bool" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyState::signing_key_public" -> "core::ops::range::RangeFull" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyState::signing_key_public" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyState::signing_key_public" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyState::signing_key_public" -> "libsignal_core::curve::CurveError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyState::signing_key_public" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyState::signing_key_public" -> "libsignal_protocol::sender_keys::InvalidSessionError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyState::signing_key_public" -> "libsignal_protocol::sender_keys::SenderKeyState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyState::signing_key_public" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderKeyState::signing_key_public" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderMessageKey" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderMessageKey" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderMessageKey" -> "libsignal_protocol::sender_keys::SenderMessageKey::as_protobuf" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sender_keys::SenderMessageKey" -> "libsignal_protocol::sender_keys::SenderMessageKey::cipher_key" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sender_keys::SenderMessageKey" -> "libsignal_protocol::sender_keys::SenderMessageKey::clone" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sender_keys::SenderMessageKey" -> "libsignal_protocol::sender_keys::SenderMessageKey::fmt" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sender_keys::SenderMessageKey" -> "libsignal_protocol::sender_keys::SenderMessageKey::from_protobuf" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sender_keys::SenderMessageKey" -> "libsignal_protocol::sender_keys::SenderMessageKey::iteration" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sender_keys::SenderMessageKey" -> "libsignal_protocol::sender_keys::SenderMessageKey::iv" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sender_keys::SenderMessageKey" -> "libsignal_protocol::sender_keys::SenderMessageKey::new" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::sender_keys::SenderMessageKey::as_protobuf" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderMessageKey::as_protobuf" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderMessageKey::as_protobuf" -> "libsignal_protocol::sender_keys::SenderMessageKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderMessageKey::as_protobuf" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderMessageKey::as_protobuf" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderMessageKey::cipher_key" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderMessageKey::cipher_key" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderMessageKey::cipher_key" -> "libsignal_protocol::sender_keys::SenderMessageKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderMessageKey::cipher_key" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderMessageKey::clone" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderMessageKey::clone" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderMessageKey::clone" -> "libsignal_protocol::sender_keys::SenderMessageKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderMessageKey::clone" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderMessageKey::clone" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderMessageKey::fmt" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderMessageKey::fmt" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderMessageKey::fmt" -> "core::fmt::Error" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderMessageKey::fmt" -> "core::fmt::Formatter" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderMessageKey::fmt" -> "core::fmt::builders::DebugStruct" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderMessageKey::fmt" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderMessageKey::fmt" -> "libsignal_protocol::sender_keys::SenderMessageKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderMessageKey::fmt" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderMessageKey::fmt" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderMessageKey::fmt" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderMessageKey::from_protobuf" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderMessageKey::from_protobuf" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderMessageKey::from_protobuf" -> "libsignal_protocol::sender_keys::SenderMessageKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderMessageKey::from_protobuf" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderMessageKey::from_protobuf" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderMessageKey::iteration" -> "libsignal_protocol::sender_keys::SenderMessageKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderMessageKey::iteration" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderMessageKey::iv" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderMessageKey::iv" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderMessageKey::iv" -> "libsignal_protocol::sender_keys::SenderMessageKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderMessageKey::iv" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderMessageKey::new" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderMessageKey::new" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderMessageKey::new" -> "core::ops::range::Range" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderMessageKey::new" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderMessageKey::new" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderMessageKey::new" -> "digest::core_api::ct_variable::CtVariableCoreWrapper" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderMessageKey::new" -> "digest::core_api::wrapper::CoreWrapper" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderMessageKey::new" -> "hkdf::Hkdf" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderMessageKey::new" -> "hkdf::errors::InvalidLength" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderMessageKey::new" -> "hmac::optim::HmacCore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderMessageKey::new" -> "libsignal_protocol::sender_keys::SenderMessageKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderMessageKey::new" -> "sha2::OidSha256" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderMessageKey::new" -> "sha2::core_api::Sha256VarCore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderMessageKey::new" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderMessageKey::new" -> "typenum::bit::B0" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderMessageKey::new" -> "typenum::bit::B1" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderMessageKey::new" -> "typenum::uint::UInt" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderMessageKey::new" -> "typenum::uint::UTerm" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderMessageKey::new" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderMessageKey::new" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::sender_keys::SenderMessageKey::new" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session" -> "libsignal_core::address::ProtocolAddress" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session" -> "libsignal_core::curve::KeyPair" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session" -> "libsignal_protocol::error::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session" -> "libsignal_protocol::kem" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session" -> "libsignal_protocol::protocol::PreKeySignalMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session" -> "libsignal_protocol::ratchet" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session" -> "libsignal_protocol::ratchet::params::AliceSignalProtocolParameters" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session" -> "libsignal_protocol::ratchet::params::BobSignalProtocolParameters" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session" -> "libsignal_protocol::session::PreKeysUsed" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::session" -> "libsignal_protocol::session::process_prekey" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::session" -> "libsignal_protocol::session::process_prekey_bundle" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::session" -> "libsignal_protocol::session::process_prekey_impl" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::session" -> "libsignal_protocol::state::bundle::PreKeyBundle" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session" -> "libsignal_protocol::state::kyber_prekey::KyberPreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session" -> "libsignal_protocol::state::prekey::PreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session" -> "libsignal_protocol::state::session::SessionRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session" -> "libsignal_protocol::state::signed_prekey::GenericSignedPreKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session" -> "libsignal_protocol::storage::traits::Direction" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session" -> "libsignal_protocol::storage::traits::IdentityKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session" -> "libsignal_protocol::storage::traits::KyberPreKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session" -> "libsignal_protocol::storage::traits::PreKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session" -> "libsignal_protocol::storage::traits::SessionStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session" -> "libsignal_protocol::storage::traits::SignedPreKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session" -> "rand::rng::Rng" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session" -> "rand_core::CryptoRng" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session" -> "std::time::SystemTime" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::PreKeysUsed" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::PreKeysUsed" -> "libsignal_protocol::session::PreKeysUsed::default" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::session::PreKeysUsed" -> "libsignal_protocol::state::kyber_prekey::KyberPreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::PreKeysUsed" -> "libsignal_protocol::state::prekey::PreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::PreKeysUsed::default" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::PreKeysUsed::default" -> "libsignal_protocol::session::PreKeysUsed" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::PreKeysUsed::default" -> "libsignal_protocol::state::kyber_prekey::KyberPreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::PreKeysUsed::default" -> "libsignal_protocol::state::prekey::PreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::process_prekey" -> "bool" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::process_prekey" -> "core::convert::Infallible" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::process_prekey" -> "core::future::future::Future" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::process_prekey" -> "core::marker::Sized" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::process_prekey" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::process_prekey" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::process_prekey" -> "libsignal_core::address::ProtocolAddress" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::process_prekey" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::process_prekey" -> "libsignal_protocol::identity_key::IdentityKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::process_prekey" -> "libsignal_protocol::protocol::PreKeySignalMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::process_prekey" -> "libsignal_protocol::session::PreKeysUsed" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::process_prekey" -> "libsignal_protocol::state::session::SessionRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::process_prekey" -> "libsignal_protocol::storage::traits::Direction" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::process_prekey" -> "libsignal_protocol::storage::traits::IdentityKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::process_prekey" -> "libsignal_protocol::storage::traits::KyberPreKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::process_prekey" -> "libsignal_protocol::storage::traits::PreKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::process_prekey" -> "libsignal_protocol::storage::traits::SignedPreKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::process_prekey_bundle" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::process_prekey_bundle" -> "alloc::boxed::Box" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::process_prekey_bundle" -> "alloc::string::String" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::process_prekey_bundle" -> "bool" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::process_prekey_bundle" -> "char" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::process_prekey_bundle" -> "core::convert::Infallible" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::process_prekey_bundle" -> "core::fmt::Arguments" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::process_prekey_bundle" -> "core::fmt::rt::Alignment" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::process_prekey_bundle" -> "core::fmt::rt::Argument" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::process_prekey_bundle" -> "core::fmt::rt::Count" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::process_prekey_bundle" -> "core::fmt::rt::Placeholder" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::process_prekey_bundle" -> "core::fmt::rt::UnsafeArg" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::process_prekey_bundle" -> "core::future::future::Future" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::process_prekey_bundle" -> "core::marker::Sized" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::process_prekey_bundle" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::process_prekey_bundle" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::process_prekey_bundle" -> "core::panic::location::Location" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::process_prekey_bundle" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::process_prekey_bundle" -> "libsignal_core::address::ProtocolAddress" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::process_prekey_bundle" -> "libsignal_core::curve::KeyPair" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::process_prekey_bundle" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::process_prekey_bundle" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::process_prekey_bundle" -> "libsignal_protocol::identity_key::IdentityKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::process_prekey_bundle" -> "libsignal_protocol::identity_key::IdentityKeyPair" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::process_prekey_bundle" -> "libsignal_protocol::kem::Key" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::process_prekey_bundle" -> "libsignal_protocol::kem::Public" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::process_prekey_bundle" -> "libsignal_protocol::ratchet::params::AliceSignalProtocolParameters" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::process_prekey_bundle" -> "libsignal_protocol::state::bundle::PreKeyBundle" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::process_prekey_bundle" -> "libsignal_protocol::state::kyber_prekey::KyberPreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::process_prekey_bundle" -> "libsignal_protocol::state::prekey::PreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::process_prekey_bundle" -> "libsignal_protocol::state::session::SessionRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::process_prekey_bundle" -> "libsignal_protocol::state::session::SessionState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::process_prekey_bundle" -> "libsignal_protocol::state::signed_prekey::SignedPreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::process_prekey_bundle" -> "libsignal_protocol::storage::traits::Direction" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::process_prekey_bundle" -> "libsignal_protocol::storage::traits::IdentityKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::process_prekey_bundle" -> "libsignal_protocol::storage::traits::SessionStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::process_prekey_bundle" -> "log::Level" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::process_prekey_bundle" -> "log::LevelFilter" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::process_prekey_bundle" -> "std::time::SystemTime" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::process_prekey_bundle" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::process_prekey_bundle" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::process_prekey_bundle" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::process_prekey_bundle" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::process_prekey_impl" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::process_prekey_impl" -> "alloc::boxed::Box" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::process_prekey_impl" -> "bool" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::process_prekey_impl" -> "char" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::process_prekey_impl" -> "core::convert::Infallible" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::process_prekey_impl" -> "core::fmt::Arguments" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::process_prekey_impl" -> "core::fmt::rt::Alignment" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::process_prekey_impl" -> "core::fmt::rt::Argument" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::process_prekey_impl" -> "core::fmt::rt::Count" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::process_prekey_impl" -> "core::fmt::rt::Placeholder" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::process_prekey_impl" -> "core::fmt::rt::UnsafeArg" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::process_prekey_impl" -> "core::future::future::Future" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::process_prekey_impl" -> "core::marker::Sized" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::process_prekey_impl" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::process_prekey_impl" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::process_prekey_impl" -> "core::panic::location::Location" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::process_prekey_impl" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::process_prekey_impl" -> "libsignal_core::address::ProtocolAddress" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::process_prekey_impl" -> "libsignal_core::curve::KeyPair" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::process_prekey_impl" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::process_prekey_impl" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::process_prekey_impl" -> "libsignal_protocol::identity_key::IdentityKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::process_prekey_impl" -> "libsignal_protocol::identity_key::IdentityKeyPair" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::process_prekey_impl" -> "libsignal_protocol::kem::KeyPair" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::process_prekey_impl" -> "libsignal_protocol::protocol::PreKeySignalMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::process_prekey_impl" -> "libsignal_protocol::ratchet::params::BobSignalProtocolParameters" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::process_prekey_impl" -> "libsignal_protocol::session::PreKeysUsed" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::process_prekey_impl" -> "libsignal_protocol::state::kyber_prekey::KyberPreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::process_prekey_impl" -> "libsignal_protocol::state::kyber_prekey::KyberPreKeyRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::process_prekey_impl" -> "libsignal_protocol::state::prekey::PreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::process_prekey_impl" -> "libsignal_protocol::state::prekey::PreKeyRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::process_prekey_impl" -> "libsignal_protocol::state::session::InvalidSessionError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::process_prekey_impl" -> "libsignal_protocol::state::session::SessionRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::process_prekey_impl" -> "libsignal_protocol::state::session::SessionState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::process_prekey_impl" -> "libsignal_protocol::state::signed_prekey::SignedPreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::process_prekey_impl" -> "libsignal_protocol::state::signed_prekey::SignedPreKeyRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::process_prekey_impl" -> "libsignal_protocol::storage::traits::IdentityKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::process_prekey_impl" -> "libsignal_protocol::storage::traits::KyberPreKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::process_prekey_impl" -> "libsignal_protocol::storage::traits::PreKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::process_prekey_impl" -> "libsignal_protocol::storage::traits::SignedPreKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::process_prekey_impl" -> "log::Level" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::process_prekey_impl" -> "log::LevelFilter" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::process_prekey_impl" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::process_prekey_impl" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::process_prekey_impl" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session::process_prekey_impl" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher" -> "libsignal_core::address::ProtocolAddress" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher" -> "libsignal_core::curve::KeyPair" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher" -> "libsignal_protocol::error::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher" -> "libsignal_protocol::protocol::CiphertextMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher" -> "libsignal_protocol::protocol::CiphertextMessageType" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher" -> "libsignal_protocol::protocol::KyberPayload" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher" -> "libsignal_protocol::protocol::PreKeySignalMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher" -> "libsignal_protocol::protocol::SignalMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher" -> "libsignal_protocol::ratchet::keys::ChainKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher" -> "libsignal_protocol::ratchet::keys::MessageKeyGenerator" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher" -> "libsignal_protocol::session" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher" -> "libsignal_protocol::session_cipher::CurrentOrPrevious" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::session_cipher" -> "libsignal_protocol::session_cipher::create_decryption_failure_log" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::session_cipher" -> "libsignal_protocol::session_cipher::decrypt_message_with_record" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::session_cipher" -> "libsignal_protocol::session_cipher::decrypt_message_with_state" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::session_cipher" -> "libsignal_protocol::session_cipher::get_or_create_chain_key" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::session_cipher" -> "libsignal_protocol::session_cipher::get_or_create_message_key" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::session_cipher" -> "libsignal_protocol::session_cipher::message_decrypt" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::session_cipher" -> "libsignal_protocol::session_cipher::message_decrypt_prekey" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::session_cipher" -> "libsignal_protocol::session_cipher::message_decrypt_signal" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::session_cipher" -> "libsignal_protocol::session_cipher::message_encrypt" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::session_cipher" -> "libsignal_protocol::state::session::InvalidSessionError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher" -> "libsignal_protocol::state::session::SessionRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher" -> "libsignal_protocol::state::session::SessionState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher" -> "libsignal_protocol::storage::traits::Direction" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher" -> "libsignal_protocol::storage::traits::IdentityKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher" -> "libsignal_protocol::storage::traits::KyberPreKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher" -> "libsignal_protocol::storage::traits::PreKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher" -> "libsignal_protocol::storage::traits::SessionStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher" -> "libsignal_protocol::storage::traits::SignedPreKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher" -> "rand::rng::Rng" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher" -> "rand_core::CryptoRng" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher" -> "std::time::SystemTime" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::CurrentOrPrevious" -> "libsignal_protocol::session_cipher::CurrentOrPrevious::clone" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::session_cipher::CurrentOrPrevious" -> "libsignal_protocol::session_cipher::CurrentOrPrevious::fmt" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::session_cipher::CurrentOrPrevious::clone" -> "libsignal_protocol::session_cipher::CurrentOrPrevious" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::CurrentOrPrevious::fmt" -> "core::fmt::Arguments" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::CurrentOrPrevious::fmt" -> "core::fmt::Error" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::CurrentOrPrevious::fmt" -> "core::fmt::Formatter" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::CurrentOrPrevious::fmt" -> "core::fmt::rt::Argument" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::CurrentOrPrevious::fmt" -> "core::fmt::rt::Placeholder" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::CurrentOrPrevious::fmt" -> "core::fmt::rt::UnsafeArg" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::CurrentOrPrevious::fmt" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::CurrentOrPrevious::fmt" -> "libsignal_protocol::session_cipher::CurrentOrPrevious" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::CurrentOrPrevious::fmt" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::CurrentOrPrevious::fmt" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::create_decryption_failure_log" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::create_decryption_failure_log" -> "alloc::string::String" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::create_decryption_failure_log" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::create_decryption_failure_log" -> "bool" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::create_decryption_failure_log" -> "char" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::create_decryption_failure_log" -> "core::fmt::Arguments" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::create_decryption_failure_log" -> "core::fmt::rt::Alignment" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::create_decryption_failure_log" -> "core::fmt::rt::Argument" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::create_decryption_failure_log" -> "core::fmt::rt::Count" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::create_decryption_failure_log" -> "core::fmt::rt::Placeholder" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::create_decryption_failure_log" -> "core::fmt::rt::UnsafeArg" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::create_decryption_failure_log" -> "core::iter::adapters::chain::Chain" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::create_decryption_failure_log" -> "core::iter::adapters::enumerate::Enumerate" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::create_decryption_failure_log" -> "core::iter::adapters::map::Map" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::create_decryption_failure_log" -> "core::iter::adapters::zip::Zip" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::create_decryption_failure_log" -> "core::iter::sources::repeat::Repeat" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::create_decryption_failure_log" -> "core::ops::range::RangeFrom" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::create_decryption_failure_log" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::create_decryption_failure_log" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::create_decryption_failure_log" -> "core::slice::iter::Iter" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::create_decryption_failure_log" -> "libsignal_core::address::ProtocolAddress" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::create_decryption_failure_log" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::create_decryption_failure_log" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::create_decryption_failure_log" -> "libsignal_protocol::protocol::SignalMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::create_decryption_failure_log" -> "libsignal_protocol::state::session::InvalidSessionError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::create_decryption_failure_log" -> "libsignal_protocol::state::session::SessionRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::create_decryption_failure_log" -> "libsignal_protocol::state::session::SessionState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::create_decryption_failure_log" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::create_decryption_failure_log" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::create_decryption_failure_log" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::create_decryption_failure_log" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::decrypt_message_with_record" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::decrypt_message_with_record" -> "alloc::string::String" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::decrypt_message_with_record" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::decrypt_message_with_record" -> "bool" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::decrypt_message_with_record" -> "char" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::decrypt_message_with_record" -> "core::convert::Infallible" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::decrypt_message_with_record" -> "core::fmt::Arguments" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::decrypt_message_with_record" -> "core::fmt::rt::Alignment" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::decrypt_message_with_record" -> "core::fmt::rt::Argument" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::decrypt_message_with_record" -> "core::fmt::rt::Count" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::decrypt_message_with_record" -> "core::fmt::rt::Placeholder" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::decrypt_message_with_record" -> "core::fmt::rt::UnsafeArg" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::decrypt_message_with_record" -> "core::iter::adapters::enumerate::Enumerate" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::decrypt_message_with_record" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::decrypt_message_with_record" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::decrypt_message_with_record" -> "core::panic::location::Location" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::decrypt_message_with_record" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::decrypt_message_with_record" -> "libsignal_core::address::ProtocolAddress" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::decrypt_message_with_record" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::decrypt_message_with_record" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::decrypt_message_with_record" -> "libsignal_protocol::protocol::CiphertextMessageType" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::decrypt_message_with_record" -> "libsignal_protocol::protocol::SignalMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::decrypt_message_with_record" -> "libsignal_protocol::session_cipher::CurrentOrPrevious" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::decrypt_message_with_record" -> "libsignal_protocol::state::session::InvalidSessionError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::decrypt_message_with_record" -> "libsignal_protocol::state::session::SessionRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::decrypt_message_with_record" -> "libsignal_protocol::state::session::SessionState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::decrypt_message_with_record" -> "log::Level" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::decrypt_message_with_record" -> "log::LevelFilter" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::decrypt_message_with_record" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::decrypt_message_with_record" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::decrypt_message_with_record" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::decrypt_message_with_record" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::decrypt_message_with_state" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::decrypt_message_with_state" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::decrypt_message_with_state" -> "bool" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::decrypt_message_with_state" -> "char" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::decrypt_message_with_state" -> "core::convert::Infallible" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::decrypt_message_with_state" -> "core::fmt::Arguments" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::decrypt_message_with_state" -> "core::fmt::rt::Alignment" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::decrypt_message_with_state" -> "core::fmt::rt::Argument" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::decrypt_message_with_state" -> "core::fmt::rt::Count" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::decrypt_message_with_state" -> "core::fmt::rt::Placeholder" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::decrypt_message_with_state" -> "core::fmt::rt::UnsafeArg" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::decrypt_message_with_state" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::decrypt_message_with_state" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::decrypt_message_with_state" -> "core::panic::location::Location" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::decrypt_message_with_state" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::decrypt_message_with_state" -> "libsignal_core::address::ProtocolAddress" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::decrypt_message_with_state" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::decrypt_message_with_state" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::decrypt_message_with_state" -> "libsignal_protocol::identity_key::IdentityKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::decrypt_message_with_state" -> "libsignal_protocol::protocol::CiphertextMessageType" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::decrypt_message_with_state" -> "libsignal_protocol::protocol::SignalMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::decrypt_message_with_state" -> "libsignal_protocol::ratchet::keys::ChainKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::decrypt_message_with_state" -> "libsignal_protocol::ratchet::keys::MessageKeyGenerator" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::decrypt_message_with_state" -> "libsignal_protocol::ratchet::keys::MessageKeys" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::decrypt_message_with_state" -> "libsignal_protocol::ratchet::keys::RootKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::decrypt_message_with_state" -> "libsignal_protocol::session_cipher::CurrentOrPrevious" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::decrypt_message_with_state" -> "libsignal_protocol::state::session::InvalidSessionError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::decrypt_message_with_state" -> "libsignal_protocol::state::session::SessionState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::decrypt_message_with_state" -> "log::Level" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::decrypt_message_with_state" -> "log::LevelFilter" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::decrypt_message_with_state" -> "signal_crypto::aes_cbc::DecryptionError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::decrypt_message_with_state" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::decrypt_message_with_state" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::decrypt_message_with_state" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::decrypt_message_with_state" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::get_or_create_chain_key" -> "bool" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::get_or_create_chain_key" -> "char" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::get_or_create_chain_key" -> "core::convert::Infallible" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::get_or_create_chain_key" -> "core::fmt::Arguments" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::get_or_create_chain_key" -> "core::fmt::rt::Alignment" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::get_or_create_chain_key" -> "core::fmt::rt::Argument" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::get_or_create_chain_key" -> "core::fmt::rt::Count" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::get_or_create_chain_key" -> "core::fmt::rt::Placeholder" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::get_or_create_chain_key" -> "core::fmt::rt::UnsafeArg" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::get_or_create_chain_key" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::get_or_create_chain_key" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::get_or_create_chain_key" -> "core::panic::location::Location" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::get_or_create_chain_key" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::get_or_create_chain_key" -> "libsignal_core::address::ProtocolAddress" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::get_or_create_chain_key" -> "libsignal_core::curve::KeyPair" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::get_or_create_chain_key" -> "libsignal_core::curve::PrivateKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::get_or_create_chain_key" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::get_or_create_chain_key" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::get_or_create_chain_key" -> "libsignal_protocol::ratchet::keys::ChainKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::get_or_create_chain_key" -> "libsignal_protocol::ratchet::keys::RootKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::get_or_create_chain_key" -> "libsignal_protocol::state::session::InvalidSessionError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::get_or_create_chain_key" -> "libsignal_protocol::state::session::SessionState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::get_or_create_chain_key" -> "log::Level" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::get_or_create_chain_key" -> "log::LevelFilter" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::get_or_create_chain_key" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::get_or_create_chain_key" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::get_or_create_chain_key" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::get_or_create_message_key" -> "bool" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::get_or_create_message_key" -> "char" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::get_or_create_message_key" -> "core::convert::Infallible" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::get_or_create_message_key" -> "core::fmt::Arguments" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::get_or_create_message_key" -> "core::fmt::rt::Alignment" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::get_or_create_message_key" -> "core::fmt::rt::Argument" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::get_or_create_message_key" -> "core::fmt::rt::Count" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::get_or_create_message_key" -> "core::fmt::rt::Placeholder" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::get_or_create_message_key" -> "core::fmt::rt::UnsafeArg" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::get_or_create_message_key" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::get_or_create_message_key" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::get_or_create_message_key" -> "core::panic::location::Location" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::get_or_create_message_key" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::get_or_create_message_key" -> "libsignal_core::address::ProtocolAddress" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::get_or_create_message_key" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::get_or_create_message_key" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::get_or_create_message_key" -> "libsignal_protocol::protocol::CiphertextMessageType" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::get_or_create_message_key" -> "libsignal_protocol::ratchet::keys::ChainKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::get_or_create_message_key" -> "libsignal_protocol::ratchet::keys::MessageKeyGenerator" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::get_or_create_message_key" -> "libsignal_protocol::state::session::InvalidSessionError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::get_or_create_message_key" -> "libsignal_protocol::state::session::SessionState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::get_or_create_message_key" -> "log::Level" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::get_or_create_message_key" -> "log::LevelFilter" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::get_or_create_message_key" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::get_or_create_message_key" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::get_or_create_message_key" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_decrypt" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_decrypt" -> "alloc::string::String" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_decrypt" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_decrypt" -> "char" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_decrypt" -> "core::fmt::Arguments" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_decrypt" -> "core::fmt::rt::Alignment" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_decrypt" -> "core::fmt::rt::Argument" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_decrypt" -> "core::fmt::rt::Count" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_decrypt" -> "core::fmt::rt::Placeholder" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_decrypt" -> "core::fmt::rt::UnsafeArg" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_decrypt" -> "core::future::future::Future" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_decrypt" -> "core::marker::Sized" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_decrypt" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_decrypt" -> "libsignal_core::address::ProtocolAddress" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_decrypt" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_decrypt" -> "libsignal_protocol::protocol::CiphertextMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_decrypt" -> "libsignal_protocol::protocol::CiphertextMessageType" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_decrypt" -> "libsignal_protocol::protocol::PreKeySignalMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_decrypt" -> "libsignal_protocol::protocol::SignalMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_decrypt" -> "libsignal_protocol::storage::traits::IdentityKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_decrypt" -> "libsignal_protocol::storage::traits::KyberPreKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_decrypt" -> "libsignal_protocol::storage::traits::PreKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_decrypt" -> "libsignal_protocol::storage::traits::SessionStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_decrypt" -> "libsignal_protocol::storage::traits::SignedPreKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_decrypt" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_decrypt" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_decrypt" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_decrypt" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_decrypt_prekey" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_decrypt_prekey" -> "alloc::string::String" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_decrypt_prekey" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_decrypt_prekey" -> "bool" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_decrypt_prekey" -> "char" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_decrypt_prekey" -> "core::convert::Infallible" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_decrypt_prekey" -> "core::fmt::Arguments" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_decrypt_prekey" -> "core::fmt::rt::Alignment" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_decrypt_prekey" -> "core::fmt::rt::Argument" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_decrypt_prekey" -> "core::fmt::rt::Count" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_decrypt_prekey" -> "core::fmt::rt::Placeholder" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_decrypt_prekey" -> "core::fmt::rt::UnsafeArg" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_decrypt_prekey" -> "core::future::future::Future" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_decrypt_prekey" -> "core::marker::Sized" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_decrypt_prekey" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_decrypt_prekey" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_decrypt_prekey" -> "core::panic::location::Location" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_decrypt_prekey" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_decrypt_prekey" -> "libsignal_core::address::ProtocolAddress" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_decrypt_prekey" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_decrypt_prekey" -> "libsignal_protocol::protocol::CiphertextMessageType" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_decrypt_prekey" -> "libsignal_protocol::protocol::PreKeySignalMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_decrypt_prekey" -> "libsignal_protocol::protocol::SignalMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_decrypt_prekey" -> "libsignal_protocol::session::PreKeysUsed" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_decrypt_prekey" -> "libsignal_protocol::state::kyber_prekey::KyberPreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_decrypt_prekey" -> "libsignal_protocol::state::prekey::PreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_decrypt_prekey" -> "libsignal_protocol::state::session::SessionRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_decrypt_prekey" -> "libsignal_protocol::storage::traits::IdentityKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_decrypt_prekey" -> "libsignal_protocol::storage::traits::KyberPreKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_decrypt_prekey" -> "libsignal_protocol::storage::traits::PreKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_decrypt_prekey" -> "libsignal_protocol::storage::traits::SessionStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_decrypt_prekey" -> "libsignal_protocol::storage::traits::SignedPreKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_decrypt_prekey" -> "log::Level" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_decrypt_prekey" -> "log::LevelFilter" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_decrypt_prekey" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_decrypt_prekey" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_decrypt_prekey" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_decrypt_prekey" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_decrypt_signal" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_decrypt_signal" -> "alloc::string::String" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_decrypt_signal" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_decrypt_signal" -> "bool" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_decrypt_signal" -> "char" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_decrypt_signal" -> "core::convert::Infallible" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_decrypt_signal" -> "core::fmt::Arguments" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_decrypt_signal" -> "core::fmt::rt::Alignment" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_decrypt_signal" -> "core::fmt::rt::Argument" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_decrypt_signal" -> "core::fmt::rt::Count" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_decrypt_signal" -> "core::fmt::rt::Placeholder" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_decrypt_signal" -> "core::fmt::rt::UnsafeArg" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_decrypt_signal" -> "core::future::future::Future" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_decrypt_signal" -> "core::marker::Sized" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_decrypt_signal" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_decrypt_signal" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_decrypt_signal" -> "core::panic::location::Location" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_decrypt_signal" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_decrypt_signal" -> "libsignal_core::address::ProtocolAddress" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_decrypt_signal" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_decrypt_signal" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_decrypt_signal" -> "libsignal_protocol::identity_key::IdentityKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_decrypt_signal" -> "libsignal_protocol::protocol::CiphertextMessageType" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_decrypt_signal" -> "libsignal_protocol::protocol::SignalMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_decrypt_signal" -> "libsignal_protocol::state::session::InvalidSessionError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_decrypt_signal" -> "libsignal_protocol::state::session::SessionRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_decrypt_signal" -> "libsignal_protocol::state::session::SessionState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_decrypt_signal" -> "libsignal_protocol::storage::traits::Direction" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_decrypt_signal" -> "libsignal_protocol::storage::traits::IdentityKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_decrypt_signal" -> "libsignal_protocol::storage::traits::SessionStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_decrypt_signal" -> "log::Level" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_decrypt_signal" -> "log::LevelFilter" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_decrypt_signal" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_decrypt_signal" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_decrypt_signal" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_decrypt_signal" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_encrypt" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_encrypt" -> "alloc::boxed::Box" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_encrypt" -> "alloc::string::String" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_encrypt" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_encrypt" -> "bool" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_encrypt" -> "char" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_encrypt" -> "core::convert::Infallible" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_encrypt" -> "core::fmt::Arguments" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_encrypt" -> "core::fmt::rt::Alignment" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_encrypt" -> "core::fmt::rt::Argument" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_encrypt" -> "core::fmt::rt::Count" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_encrypt" -> "core::fmt::rt::Placeholder" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_encrypt" -> "core::fmt::rt::UnsafeArg" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_encrypt" -> "core::future::future::Future" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_encrypt" -> "core::marker::Sized" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_encrypt" -> "core::num::error::TryFromIntError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_encrypt" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_encrypt" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_encrypt" -> "core::panic::location::Location" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_encrypt" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_encrypt" -> "core::time::Duration" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_encrypt" -> "libsignal_core::address::ProtocolAddress" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_encrypt" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_encrypt" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_encrypt" -> "libsignal_protocol::identity_key::IdentityKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_encrypt" -> "libsignal_protocol::protocol::CiphertextMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_encrypt" -> "libsignal_protocol::protocol::KyberPayload" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_encrypt" -> "libsignal_protocol::protocol::PreKeySignalMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_encrypt" -> "libsignal_protocol::protocol::SignalMessage" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_encrypt" -> "libsignal_protocol::ratchet::keys::ChainKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_encrypt" -> "libsignal_protocol::ratchet::keys::MessageKeyGenerator" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_encrypt" -> "libsignal_protocol::ratchet::keys::MessageKeys" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_encrypt" -> "libsignal_protocol::state::kyber_prekey::KyberPreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_encrypt" -> "libsignal_protocol::state::prekey::PreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_encrypt" -> "libsignal_protocol::state::session::InvalidSessionError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_encrypt" -> "libsignal_protocol::state::session::SessionRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_encrypt" -> "libsignal_protocol::state::session::SessionState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_encrypt" -> "libsignal_protocol::state::session::UnacknowledgedPreKeyMessageItems" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_encrypt" -> "libsignal_protocol::state::signed_prekey::SignedPreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_encrypt" -> "libsignal_protocol::storage::traits::Direction" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_encrypt" -> "libsignal_protocol::storage::traits::IdentityKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_encrypt" -> "libsignal_protocol::storage::traits::SessionStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_encrypt" -> "log::Level" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_encrypt" -> "log::LevelFilter" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_encrypt" -> "signal_crypto::aes_cbc::EncryptionError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_encrypt" -> "std::time::SystemTime" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_encrypt" -> "std::time::SystemTimeError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_encrypt" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_encrypt" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_encrypt" -> "u64" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_encrypt" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::session_cipher::message_encrypt" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state" -> "libsignal_protocol::state::bundle" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state" -> "libsignal_protocol::state::bundle::PreKeyBundle" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state" -> "libsignal_protocol::state::bundle::PreKeyBundleContent" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state" -> "libsignal_protocol::state::kyber_prekey" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state" -> "libsignal_protocol::state::kyber_prekey::KyberPreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state" -> "libsignal_protocol::state::kyber_prekey::KyberPreKeyRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state" -> "libsignal_protocol::state::prekey" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state" -> "libsignal_protocol::state::prekey::PreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state" -> "libsignal_protocol::state::prekey::PreKeyRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state" -> "libsignal_protocol::state::session" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state" -> "libsignal_protocol::state::session::InvalidSessionError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state" -> "libsignal_protocol::state::session::SessionRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state" -> "libsignal_protocol::state::session::SessionState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state" -> "libsignal_protocol::state::signed_prekey" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state" -> "libsignal_protocol::state::signed_prekey::GenericSignedPreKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state" -> "libsignal_protocol::state::signed_prekey::SignedPreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state" -> "libsignal_protocol::state::signed_prekey::SignedPreKeyRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle" -> "core::clone::Clone" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle" -> "libsignal_core::address::DeviceId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle" -> "libsignal_protocol::error::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle" -> "libsignal_protocol::identity_key::IdentityKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle" -> "libsignal_protocol::kem" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle" -> "libsignal_protocol::state::bundle::KyberPreKey" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::bundle" -> "libsignal_protocol::state::bundle::PreKeyBundle" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::bundle" -> "libsignal_protocol::state::bundle::PreKeyBundleContent" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::bundle" -> "libsignal_protocol::state::bundle::SignedPreKey" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::bundle" -> "libsignal_protocol::state::kyber_prekey::KyberPreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle" -> "libsignal_protocol::state::prekey::PreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle" -> "libsignal_protocol::state::signed_prekey::SignedPreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::KyberPreKey" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::KyberPreKey" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::KyberPreKey" -> "libsignal_protocol::kem::Key" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::KyberPreKey" -> "libsignal_protocol::kem::Public" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::KyberPreKey" -> "libsignal_protocol::state::bundle::KyberPreKey::clone" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::bundle::KyberPreKey" -> "libsignal_protocol::state::bundle::KyberPreKey::new" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::bundle::KyberPreKey" -> "libsignal_protocol::state::kyber_prekey::KyberPreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::KyberPreKey::clone" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::KyberPreKey::clone" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::KyberPreKey::clone" -> "libsignal_protocol::kem::Key" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::KyberPreKey::clone" -> "libsignal_protocol::kem::Public" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::KyberPreKey::clone" -> "libsignal_protocol::state::bundle::KyberPreKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::KyberPreKey::clone" -> "libsignal_protocol::state::kyber_prekey::KyberPreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::KyberPreKey::clone" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::KyberPreKey::new" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::KyberPreKey::new" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::KyberPreKey::new" -> "libsignal_protocol::kem::Key" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::KyberPreKey::new" -> "libsignal_protocol::kem::Public" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::KyberPreKey::new" -> "libsignal_protocol::state::bundle::KyberPreKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::KyberPreKey::new" -> "libsignal_protocol::state::kyber_prekey::KyberPreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::KyberPreKey::new" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle" -> "libsignal_core::address::DeviceId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle" -> "libsignal_protocol::identity_key::IdentityKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle" -> "libsignal_protocol::state::bundle::KyberPreKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle" -> "libsignal_protocol::state::bundle::PreKeyBundle::Error" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::bundle::PreKeyBundle" -> "libsignal_protocol::state::bundle::PreKeyBundle::clone" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::bundle::PreKeyBundle" -> "libsignal_protocol::state::bundle::PreKeyBundle::device_id" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::bundle::PreKeyBundle" -> "libsignal_protocol::state::bundle::PreKeyBundle::has_kyber_pre_key" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::bundle::PreKeyBundle" -> "libsignal_protocol::state::bundle::PreKeyBundle::identity_key" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::bundle::PreKeyBundle" -> "libsignal_protocol::state::bundle::PreKeyBundle::kyber_pre_key_id" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::bundle::PreKeyBundle" -> "libsignal_protocol::state::bundle::PreKeyBundle::kyber_pre_key_public" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::bundle::PreKeyBundle" -> "libsignal_protocol::state::bundle::PreKeyBundle::kyber_pre_key_signature" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::bundle::PreKeyBundle" -> "libsignal_protocol::state::bundle::PreKeyBundle::modify" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::bundle::PreKeyBundle" -> "libsignal_protocol::state::bundle::PreKeyBundle::new" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::bundle::PreKeyBundle" -> "libsignal_protocol::state::bundle::PreKeyBundle::pre_key_id" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::bundle::PreKeyBundle" -> "libsignal_protocol::state::bundle::PreKeyBundle::pre_key_public" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::bundle::PreKeyBundle" -> "libsignal_protocol::state::bundle::PreKeyBundle::registration_id" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::bundle::PreKeyBundle" -> "libsignal_protocol::state::bundle::PreKeyBundle::signed_pre_key_id" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::bundle::PreKeyBundle" -> "libsignal_protocol::state::bundle::PreKeyBundle::signed_pre_key_public" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::bundle::PreKeyBundle" -> "libsignal_protocol::state::bundle::PreKeyBundle::signed_pre_key_signature" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::bundle::PreKeyBundle" -> "libsignal_protocol::state::bundle::PreKeyBundle::try_from" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::bundle::PreKeyBundle" -> "libsignal_protocol::state::bundle::PreKeyBundle::with_kyber_pre_key" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::bundle::PreKeyBundle" -> "libsignal_protocol::state::bundle::SignedPreKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle" -> "libsignal_protocol::state::prekey::PreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::Error" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::clone" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::clone" -> "libsignal_core::address::DeviceId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::clone" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::clone" -> "libsignal_protocol::identity_key::IdentityKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::clone" -> "libsignal_protocol::state::bundle::KyberPreKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::clone" -> "libsignal_protocol::state::bundle::PreKeyBundle" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::clone" -> "libsignal_protocol::state::bundle::SignedPreKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::clone" -> "libsignal_protocol::state::prekey::PreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::clone" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::device_id" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::device_id" -> "libsignal_core::address::DeviceId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::device_id" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::device_id" -> "libsignal_protocol::state::bundle::PreKeyBundle" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::has_kyber_pre_key" -> "bool" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::has_kyber_pre_key" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::has_kyber_pre_key" -> "libsignal_protocol::state::bundle::KyberPreKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::has_kyber_pre_key" -> "libsignal_protocol::state::bundle::PreKeyBundle" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::identity_key" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::identity_key" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::identity_key" -> "libsignal_protocol::identity_key::IdentityKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::identity_key" -> "libsignal_protocol::state::bundle::PreKeyBundle" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::kyber_pre_key_id" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::kyber_pre_key_id" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::kyber_pre_key_id" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::kyber_pre_key_id" -> "libsignal_protocol::state::bundle::KyberPreKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::kyber_pre_key_id" -> "libsignal_protocol::state::bundle::PreKeyBundle" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::kyber_pre_key_id" -> "libsignal_protocol::state::kyber_prekey::KyberPreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::kyber_pre_key_public" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::kyber_pre_key_public" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::kyber_pre_key_public" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::kyber_pre_key_public" -> "libsignal_protocol::kem::Key" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::kyber_pre_key_public" -> "libsignal_protocol::kem::Public" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::kyber_pre_key_public" -> "libsignal_protocol::state::bundle::KyberPreKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::kyber_pre_key_public" -> "libsignal_protocol::state::bundle::PreKeyBundle" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::kyber_pre_key_signature" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::kyber_pre_key_signature" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::kyber_pre_key_signature" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::kyber_pre_key_signature" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::kyber_pre_key_signature" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::kyber_pre_key_signature" -> "libsignal_protocol::state::bundle::KyberPreKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::kyber_pre_key_signature" -> "libsignal_protocol::state::bundle::PreKeyBundle" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::kyber_pre_key_signature" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::modify" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::modify" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::modify" -> "libsignal_protocol::state::bundle::PreKeyBundle" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::new" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::new" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::new" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::new" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::new" -> "libsignal_core::address::DeviceId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::new" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::new" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::new" -> "libsignal_protocol::identity_key::IdentityKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::new" -> "libsignal_protocol::state::bundle::KyberPreKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::new" -> "libsignal_protocol::state::bundle::PreKeyBundle" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::new" -> "libsignal_protocol::state::bundle::SignedPreKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::new" -> "libsignal_protocol::state::prekey::PreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::new" -> "libsignal_protocol::state::signed_prekey::SignedPreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::new" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::new" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::pre_key_id" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::pre_key_id" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::pre_key_id" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::pre_key_id" -> "libsignal_protocol::state::bundle::PreKeyBundle" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::pre_key_id" -> "libsignal_protocol::state::prekey::PreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::pre_key_public" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::pre_key_public" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::pre_key_public" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::pre_key_public" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::pre_key_public" -> "libsignal_protocol::state::bundle::PreKeyBundle" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::registration_id" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::registration_id" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::registration_id" -> "libsignal_protocol::state::bundle::PreKeyBundle" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::registration_id" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::signed_pre_key_id" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::signed_pre_key_id" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::signed_pre_key_id" -> "libsignal_protocol::state::bundle::PreKeyBundle" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::signed_pre_key_id" -> "libsignal_protocol::state::bundle::SignedPreKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::signed_pre_key_id" -> "libsignal_protocol::state::signed_prekey::SignedPreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::signed_pre_key_public" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::signed_pre_key_public" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::signed_pre_key_public" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::signed_pre_key_public" -> "libsignal_protocol::state::bundle::PreKeyBundle" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::signed_pre_key_public" -> "libsignal_protocol::state::bundle::SignedPreKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::signed_pre_key_signature" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::signed_pre_key_signature" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::signed_pre_key_signature" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::signed_pre_key_signature" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::signed_pre_key_signature" -> "libsignal_protocol::state::bundle::PreKeyBundle" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::signed_pre_key_signature" -> "libsignal_protocol::state::bundle::SignedPreKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::signed_pre_key_signature" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::try_from" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::try_from" -> "alloc::string::String" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::try_from" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::try_from" -> "bool" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::try_from" -> "core::convert::Infallible" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::try_from" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::try_from" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::try_from" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::try_from" -> "libsignal_core::address::DeviceId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::try_from" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::try_from" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::try_from" -> "libsignal_protocol::identity_key::IdentityKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::try_from" -> "libsignal_protocol::kem::Key" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::try_from" -> "libsignal_protocol::kem::Public" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::try_from" -> "libsignal_protocol::state::bundle::PreKeyBundle" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::try_from" -> "libsignal_protocol::state::bundle::PreKeyBundleContent" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::try_from" -> "libsignal_protocol::state::kyber_prekey::KyberPreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::try_from" -> "libsignal_protocol::state::prekey::PreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::try_from" -> "libsignal_protocol::state::signed_prekey::SignedPreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::try_from" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::try_from" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::try_from" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::with_kyber_pre_key" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::with_kyber_pre_key" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::with_kyber_pre_key" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::with_kyber_pre_key" -> "libsignal_protocol::kem::Key" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::with_kyber_pre_key" -> "libsignal_protocol::kem::Public" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::with_kyber_pre_key" -> "libsignal_protocol::state::bundle::KyberPreKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::with_kyber_pre_key" -> "libsignal_protocol::state::bundle::PreKeyBundle" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::with_kyber_pre_key" -> "libsignal_protocol::state::kyber_prekey::KyberPreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundle::with_kyber_pre_key" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundleContent" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundleContent" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundleContent" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundleContent" -> "libsignal_core::address::DeviceId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundleContent" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundleContent" -> "libsignal_protocol::identity_key::IdentityKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundleContent" -> "libsignal_protocol::kem::Key" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundleContent" -> "libsignal_protocol::kem::Public" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundleContent" -> "libsignal_protocol::state::bundle::PreKeyBundleContent::from" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::bundle::PreKeyBundleContent" -> "libsignal_protocol::state::kyber_prekey::KyberPreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundleContent" -> "libsignal_protocol::state::prekey::PreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundleContent" -> "libsignal_protocol::state::signed_prekey::SignedPreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundleContent::from" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundleContent::from" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundleContent::from" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundleContent::from" -> "libsignal_core::address::DeviceId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundleContent::from" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundleContent::from" -> "libsignal_protocol::identity_key::IdentityKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundleContent::from" -> "libsignal_protocol::kem::Key" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundleContent::from" -> "libsignal_protocol::kem::Public" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundleContent::from" -> "libsignal_protocol::state::bundle::KyberPreKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundleContent::from" -> "libsignal_protocol::state::bundle::PreKeyBundle" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundleContent::from" -> "libsignal_protocol::state::bundle::PreKeyBundleContent" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundleContent::from" -> "libsignal_protocol::state::bundle::SignedPreKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundleContent::from" -> "libsignal_protocol::state::kyber_prekey::KyberPreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundleContent::from" -> "libsignal_protocol::state::prekey::PreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundleContent::from" -> "libsignal_protocol::state::signed_prekey::SignedPreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundleContent::from" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::PreKeyBundleContent::from" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::SignedPreKey" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::SignedPreKey" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::SignedPreKey" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::SignedPreKey" -> "libsignal_protocol::state::bundle::SignedPreKey::clone" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::bundle::SignedPreKey" -> "libsignal_protocol::state::bundle::SignedPreKey::new" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::bundle::SignedPreKey" -> "libsignal_protocol::state::signed_prekey::SignedPreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::SignedPreKey::clone" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::SignedPreKey::clone" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::SignedPreKey::clone" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::SignedPreKey::clone" -> "libsignal_protocol::state::bundle::SignedPreKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::SignedPreKey::clone" -> "libsignal_protocol::state::signed_prekey::SignedPreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::SignedPreKey::clone" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::SignedPreKey::new" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::SignedPreKey::new" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::SignedPreKey::new" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::SignedPreKey::new" -> "libsignal_protocol::state::bundle::SignedPreKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::SignedPreKey::new" -> "libsignal_protocol::state::signed_prekey::SignedPreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::bundle::SignedPreKey::new" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::kyber_prekey" -> "alloc::fmt" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::kyber_prekey" -> "libsignal_core::curve::PrivateKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::kyber_prekey" -> "libsignal_protocol::error::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::kyber_prekey" -> "libsignal_protocol::kem" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::kyber_prekey" -> "libsignal_protocol::state::kyber_prekey::KyberPreKeyId" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::kyber_prekey" -> "libsignal_protocol::state::kyber_prekey::KyberPreKeyRecord" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::kyber_prekey" -> "libsignal_protocol::state::signed_prekey::GenericSignedPreKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::kyber_prekey" -> "libsignal_protocol::timestamp::Timestamp" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyId" -> "libsignal_protocol::state::kyber_prekey::KyberPreKeyId::clone" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyId" -> "libsignal_protocol::state::kyber_prekey::KyberPreKeyId::cmp" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyId" -> "libsignal_protocol::state::kyber_prekey::KyberPreKeyId::eq" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyId" -> "libsignal_protocol::state::kyber_prekey::KyberPreKeyId::fmt" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyId" -> "libsignal_protocol::state::kyber_prekey::KyberPreKeyId::fmt" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyId" -> "libsignal_protocol::state::kyber_prekey::KyberPreKeyId::hash" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyId" -> "libsignal_protocol::state::kyber_prekey::KyberPreKeyId::partial_cmp" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyId::clone" -> "libsignal_protocol::state::kyber_prekey::KyberPreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyId::clone" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyId::cmp" -> "core::cmp::Ordering" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyId::cmp" -> "libsignal_protocol::state::kyber_prekey::KyberPreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyId::cmp" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyId::eq" -> "bool" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyId::eq" -> "libsignal_protocol::state::kyber_prekey::KyberPreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyId::eq" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyId::fmt" -> "char" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyId::fmt" -> "core::fmt::Arguments" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyId::fmt" -> "core::fmt::Error" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyId::fmt" -> "core::fmt::Error" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyId::fmt" -> "core::fmt::Formatter" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyId::fmt" -> "core::fmt::Formatter" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyId::fmt" -> "core::fmt::builders::DebugTuple" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyId::fmt" -> "core::fmt::rt::Alignment" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyId::fmt" -> "core::fmt::rt::Argument" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyId::fmt" -> "core::fmt::rt::Count" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyId::fmt" -> "core::fmt::rt::Placeholder" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyId::fmt" -> "core::fmt::rt::UnsafeArg" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyId::fmt" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyId::fmt" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyId::fmt" -> "libsignal_protocol::state::kyber_prekey::KyberPreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyId::fmt" -> "libsignal_protocol::state::kyber_prekey::KyberPreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyId::fmt" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyId::fmt" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyId::fmt" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyId::fmt" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyId::fmt" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyId::hash" -> "libsignal_protocol::state::kyber_prekey::KyberPreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyId::hash" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyId::partial_cmp" -> "core::cmp::Ordering" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyId::partial_cmp" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyId::partial_cmp" -> "libsignal_protocol::state::kyber_prekey::KyberPreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyId::partial_cmp" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyId::partial_cmp" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyRecord" -> "libsignal_protocol::state::kyber_prekey::KyberPreKeyRecord::Id" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyRecord" -> "libsignal_protocol::state::kyber_prekey::KyberPreKeyRecord::KeyPair" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyRecord" -> "libsignal_protocol::state::kyber_prekey::KyberPreKeyRecord::clone" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyRecord" -> "libsignal_protocol::state::kyber_prekey::KyberPreKeyRecord::fmt" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyRecord" -> "libsignal_protocol::state::kyber_prekey::KyberPreKeyRecord::from_storage" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyRecord" -> "libsignal_protocol::state::kyber_prekey::KyberPreKeyRecord::generate" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyRecord" -> "libsignal_protocol::state::kyber_prekey::KyberPreKeyRecord::get_storage" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyRecord" -> "libsignal_protocol::state::kyber_prekey::KyberPreKeyRecord::secret_key" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyRecord::Id" -> "libsignal_protocol::state::kyber_prekey::KyberPreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyRecord::KeyPair" -> "libsignal_protocol::kem::KeyPair" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyRecord::clone" -> "libsignal_protocol::state::kyber_prekey::KyberPreKeyRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyRecord::fmt" -> "core::fmt::Error" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyRecord::fmt" -> "core::fmt::Formatter" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyRecord::fmt" -> "core::fmt::builders::DebugStruct" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyRecord::fmt" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyRecord::fmt" -> "libsignal_protocol::state::kyber_prekey::KyberPreKeyRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyRecord::fmt" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyRecord::from_storage" -> "libsignal_protocol::state::kyber_prekey::KyberPreKeyRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyRecord::generate" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyRecord::generate" -> "alloc::boxed::Box" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyRecord::generate" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyRecord::generate" -> "core::convert::Infallible" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyRecord::generate" -> "core::num::error::TryFromIntError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyRecord::generate" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyRecord::generate" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyRecord::generate" -> "core::time::Duration" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyRecord::generate" -> "libsignal_core::curve::CurveError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyRecord::generate" -> "libsignal_core::curve::PrivateKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyRecord::generate" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyRecord::generate" -> "libsignal_protocol::kem::Key" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyRecord::generate" -> "libsignal_protocol::kem::KeyPair" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyRecord::generate" -> "libsignal_protocol::kem::KeyType" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyRecord::generate" -> "libsignal_protocol::kem::Public" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyRecord::generate" -> "libsignal_protocol::state::kyber_prekey::KyberPreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyRecord::generate" -> "libsignal_protocol::state::kyber_prekey::KyberPreKeyRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyRecord::generate" -> "libsignal_protocol::timestamp::Timestamp" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyRecord::generate" -> "rand_core::os::OsRng" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyRecord::generate" -> "std::time::SystemTime" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyRecord::generate" -> "std::time::SystemTimeError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyRecord::generate" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyRecord::generate" -> "u128" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyRecord::generate" -> "u64" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyRecord::generate" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyRecord::get_storage" -> "libsignal_protocol::state::kyber_prekey::KyberPreKeyRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyRecord::secret_key" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyRecord::secret_key" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyRecord::secret_key" -> "libsignal_protocol::kem::Key" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyRecord::secret_key" -> "libsignal_protocol::kem::Secret" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyRecord::secret_key" -> "libsignal_protocol::state::kyber_prekey::KyberPreKeyRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::kyber_prekey::KyberPreKeyRecord::secret_key" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::prekey" -> "alloc::fmt" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::prekey" -> "libsignal_core::curve::KeyPair" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::prekey" -> "libsignal_core::curve::PrivateKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::prekey" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::prekey" -> "libsignal_protocol::error::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::prekey" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::prekey" -> "libsignal_protocol::state::prekey::PreKeyId" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::prekey" -> "libsignal_protocol::state::prekey::PreKeyRecord" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::prekey" -> "prost::message::Message" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::prekey::PreKeyId" -> "libsignal_protocol::state::prekey::PreKeyId::clone" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::prekey::PreKeyId" -> "libsignal_protocol::state::prekey::PreKeyId::cmp" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::prekey::PreKeyId" -> "libsignal_protocol::state::prekey::PreKeyId::eq" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::prekey::PreKeyId" -> "libsignal_protocol::state::prekey::PreKeyId::fmt" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::prekey::PreKeyId" -> "libsignal_protocol::state::prekey::PreKeyId::fmt" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::prekey::PreKeyId" -> "libsignal_protocol::state::prekey::PreKeyId::hash" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::prekey::PreKeyId" -> "libsignal_protocol::state::prekey::PreKeyId::partial_cmp" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::prekey::PreKeyId::clone" -> "libsignal_protocol::state::prekey::PreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::prekey::PreKeyId::clone" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::prekey::PreKeyId::cmp" -> "core::cmp::Ordering" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::prekey::PreKeyId::cmp" -> "libsignal_protocol::state::prekey::PreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::prekey::PreKeyId::cmp" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::prekey::PreKeyId::eq" -> "bool" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::prekey::PreKeyId::eq" -> "libsignal_protocol::state::prekey::PreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::prekey::PreKeyId::eq" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::prekey::PreKeyId::fmt" -> "char" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::prekey::PreKeyId::fmt" -> "core::fmt::Arguments" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::prekey::PreKeyId::fmt" -> "core::fmt::Error" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::prekey::PreKeyId::fmt" -> "core::fmt::Error" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::prekey::PreKeyId::fmt" -> "core::fmt::Formatter" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::prekey::PreKeyId::fmt" -> "core::fmt::Formatter" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::prekey::PreKeyId::fmt" -> "core::fmt::builders::DebugTuple" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::prekey::PreKeyId::fmt" -> "core::fmt::rt::Alignment" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::prekey::PreKeyId::fmt" -> "core::fmt::rt::Argument" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::prekey::PreKeyId::fmt" -> "core::fmt::rt::Count" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::prekey::PreKeyId::fmt" -> "core::fmt::rt::Placeholder" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::prekey::PreKeyId::fmt" -> "core::fmt::rt::UnsafeArg" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::prekey::PreKeyId::fmt" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::prekey::PreKeyId::fmt" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::prekey::PreKeyId::fmt" -> "libsignal_protocol::state::prekey::PreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::prekey::PreKeyId::fmt" -> "libsignal_protocol::state::prekey::PreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::prekey::PreKeyId::fmt" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::prekey::PreKeyId::fmt" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::prekey::PreKeyId::fmt" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::prekey::PreKeyId::fmt" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::prekey::PreKeyId::fmt" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::prekey::PreKeyId::hash" -> "libsignal_protocol::state::prekey::PreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::prekey::PreKeyId::hash" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::prekey::PreKeyId::partial_cmp" -> "core::cmp::Ordering" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::prekey::PreKeyId::partial_cmp" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::prekey::PreKeyId::partial_cmp" -> "libsignal_protocol::state::prekey::PreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::prekey::PreKeyId::partial_cmp" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::prekey::PreKeyId::partial_cmp" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::prekey::PreKeyRecord" -> "libsignal_protocol::state::prekey::PreKeyRecord::clone" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::prekey::PreKeyRecord" -> "libsignal_protocol::state::prekey::PreKeyRecord::deserialize" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::prekey::PreKeyRecord" -> "libsignal_protocol::state::prekey::PreKeyRecord::fmt" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::prekey::PreKeyRecord" -> "libsignal_protocol::state::prekey::PreKeyRecord::id" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::prekey::PreKeyRecord" -> "libsignal_protocol::state::prekey::PreKeyRecord::key_pair" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::prekey::PreKeyRecord" -> "libsignal_protocol::state::prekey::PreKeyRecord::new" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::prekey::PreKeyRecord" -> "libsignal_protocol::state::prekey::PreKeyRecord::private_key" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::prekey::PreKeyRecord" -> "libsignal_protocol::state::prekey::PreKeyRecord::public_key" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::prekey::PreKeyRecord" -> "libsignal_protocol::state::prekey::PreKeyRecord::serialize" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::prekey::PreKeyRecord::clone" -> "libsignal_protocol::state::prekey::PreKeyRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::prekey::PreKeyRecord::deserialize" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::prekey::PreKeyRecord::deserialize" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::prekey::PreKeyRecord::deserialize" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::prekey::PreKeyRecord::deserialize" -> "libsignal_protocol::state::prekey::PreKeyRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::prekey::PreKeyRecord::deserialize" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::prekey::PreKeyRecord::fmt" -> "core::fmt::Error" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::prekey::PreKeyRecord::fmt" -> "core::fmt::Formatter" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::prekey::PreKeyRecord::fmt" -> "core::fmt::builders::DebugStruct" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::prekey::PreKeyRecord::fmt" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::prekey::PreKeyRecord::fmt" -> "libsignal_protocol::state::prekey::PreKeyRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::prekey::PreKeyRecord::fmt" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::prekey::PreKeyRecord::id" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::prekey::PreKeyRecord::id" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::prekey::PreKeyRecord::id" -> "libsignal_protocol::state::prekey::PreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::prekey::PreKeyRecord::id" -> "libsignal_protocol::state::prekey::PreKeyRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::prekey::PreKeyRecord::key_pair" -> "core::convert::Infallible" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::prekey::PreKeyRecord::key_pair" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::prekey::PreKeyRecord::key_pair" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::prekey::PreKeyRecord::key_pair" -> "libsignal_core::curve::CurveError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::prekey::PreKeyRecord::key_pair" -> "libsignal_core::curve::KeyPair" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::prekey::PreKeyRecord::key_pair" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::prekey::PreKeyRecord::key_pair" -> "libsignal_protocol::state::prekey::PreKeyRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::prekey::PreKeyRecord::key_pair" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::prekey::PreKeyRecord::new" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::prekey::PreKeyRecord::new" -> "alloc::boxed::Box" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::prekey::PreKeyRecord::new" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::prekey::PreKeyRecord::new" -> "libsignal_core::curve::KeyPair" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::prekey::PreKeyRecord::new" -> "libsignal_core::curve::PrivateKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::prekey::PreKeyRecord::new" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::prekey::PreKeyRecord::new" -> "libsignal_protocol::state::prekey::PreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::prekey::PreKeyRecord::new" -> "libsignal_protocol::state::prekey::PreKeyRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::prekey::PreKeyRecord::new" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::prekey::PreKeyRecord::private_key" -> "core::convert::Infallible" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::prekey::PreKeyRecord::private_key" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::prekey::PreKeyRecord::private_key" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::prekey::PreKeyRecord::private_key" -> "libsignal_core::curve::CurveError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::prekey::PreKeyRecord::private_key" -> "libsignal_core::curve::PrivateKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::prekey::PreKeyRecord::private_key" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::prekey::PreKeyRecord::private_key" -> "libsignal_protocol::state::prekey::PreKeyRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::prekey::PreKeyRecord::private_key" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::prekey::PreKeyRecord::public_key" -> "core::convert::Infallible" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::prekey::PreKeyRecord::public_key" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::prekey::PreKeyRecord::public_key" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::prekey::PreKeyRecord::public_key" -> "libsignal_core::curve::CurveError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::prekey::PreKeyRecord::public_key" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::prekey::PreKeyRecord::public_key" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::prekey::PreKeyRecord::public_key" -> "libsignal_protocol::state::prekey::PreKeyRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::prekey::PreKeyRecord::public_key" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::prekey::PreKeyRecord::serialize" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::prekey::PreKeyRecord::serialize" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::prekey::PreKeyRecord::serialize" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::prekey::PreKeyRecord::serialize" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::prekey::PreKeyRecord::serialize" -> "libsignal_protocol::state::prekey::PreKeyRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::prekey::PreKeyRecord::serialize" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session" -> "core::time::Duration" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session" -> "libsignal_core::curve::KeyPair" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session" -> "libsignal_core::curve::PrivateKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session" -> "libsignal_protocol::consts" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session" -> "libsignal_protocol::identity_key::IdentityKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session" -> "libsignal_protocol::kem" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session" -> "libsignal_protocol::ratchet::keys::ChainKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session" -> "libsignal_protocol::ratchet::keys::MessageKeyGenerator" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session" -> "libsignal_protocol::ratchet::keys::RootKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session" -> "libsignal_protocol::state::kyber_prekey::KyberPreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session" -> "libsignal_protocol::state::prekey::PreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session" -> "libsignal_protocol::state::session::InvalidSessionError" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::session" -> "libsignal_protocol::state::session::SessionRecord" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::session" -> "libsignal_protocol::state::session::SessionState" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::session" -> "libsignal_protocol::state::session::UnacknowledgedPreKeyMessageItems" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::session" -> "libsignal_protocol::state::signed_prekey::SignedPreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session" -> "prost::message::Message" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session" -> "std::time::SystemTime" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session" -> "subtle::ConstantTimeEq" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::InvalidSessionError" -> "libsignal_protocol::state::session::InvalidSessionError::fmt" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::session::InvalidSessionError" -> "libsignal_protocol::state::session::InvalidSessionError::fmt" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::session::InvalidSessionError::fmt" -> "core::fmt::Error" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::InvalidSessionError::fmt" -> "core::fmt::Error" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::InvalidSessionError::fmt" -> "core::fmt::Formatter" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::InvalidSessionError::fmt" -> "core::fmt::Formatter" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::InvalidSessionError::fmt" -> "core::fmt::builders::DebugTuple" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::InvalidSessionError::fmt" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::InvalidSessionError::fmt" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::InvalidSessionError::fmt" -> "libsignal_protocol::state::session::InvalidSessionError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::InvalidSessionError::fmt" -> "libsignal_protocol::state::session::InvalidSessionError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::InvalidSessionError::fmt" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::InvalidSessionError::fmt" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord" -> "libsignal_protocol::state::session::SessionRecord::alice_base_key" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::session::SessionRecord" -> "libsignal_protocol::state::session::SessionRecord::archive_current_state" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::session::SessionRecord" -> "libsignal_protocol::state::session::SessionRecord::archive_current_state_inner" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::session::SessionRecord" -> "libsignal_protocol::state::session::SessionRecord::clone" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::session::SessionRecord" -> "libsignal_protocol::state::session::SessionRecord::current_ratchet_key_matches" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::session::SessionRecord" -> "libsignal_protocol::state::session::SessionRecord::deserialize" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::session::SessionRecord" -> "libsignal_protocol::state::session::SessionRecord::get_kyber_ciphertext" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::session::SessionRecord" -> "libsignal_protocol::state::session::SessionRecord::get_receiver_chain_key_bytes" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::session::SessionRecord" -> "libsignal_protocol::state::session::SessionRecord::get_sender_chain_key_bytes" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::session::SessionRecord" -> "libsignal_protocol::state::session::SessionRecord::has_session_state" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::session::SessionRecord" -> "libsignal_protocol::state::session::SessionRecord::has_usable_sender_chain" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::session::SessionRecord" -> "libsignal_protocol::state::session::SessionRecord::local_identity_key_bytes" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::session::SessionRecord" -> "libsignal_protocol::state::session::SessionRecord::local_registration_id" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::session::SessionRecord" -> "libsignal_protocol::state::session::SessionRecord::new" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::session::SessionRecord" -> "libsignal_protocol::state::session::SessionRecord::new_fresh" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::session::SessionRecord" -> "libsignal_protocol::state::session::SessionRecord::previous_session_states" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::session::SessionRecord" -> "libsignal_protocol::state::session::SessionRecord::promote_old_session" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::session::SessionRecord" -> "libsignal_protocol::state::session::SessionRecord::promote_state" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::session::SessionRecord" -> "libsignal_protocol::state::session::SessionRecord::remote_identity_key_bytes" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::session::SessionRecord" -> "libsignal_protocol::state::session::SessionRecord::remote_registration_id" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::session::SessionRecord" -> "libsignal_protocol::state::session::SessionRecord::serialize" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::session::SessionRecord" -> "libsignal_protocol::state::session::SessionRecord::session_state" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::session::SessionRecord" -> "libsignal_protocol::state::session::SessionRecord::session_state_mut" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::session::SessionRecord" -> "libsignal_protocol::state::session::SessionRecord::session_version" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::session::SessionRecord" -> "libsignal_protocol::state::session::SessionRecord::set_session_state" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::session::SessionRecord" -> "libsignal_protocol::state::session::SessionState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::alice_base_key" -> "alloc::string::String" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::alice_base_key" -> "core::convert::Infallible" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::alice_base_key" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::alice_base_key" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::alice_base_key" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::alice_base_key" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::alice_base_key" -> "libsignal_protocol::state::session::SessionRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::alice_base_key" -> "libsignal_protocol::state::session::SessionState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::alice_base_key" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::alice_base_key" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::archive_current_state" -> "bool" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::archive_current_state" -> "core::fmt::Arguments" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::archive_current_state" -> "core::fmt::rt::Argument" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::archive_current_state" -> "core::fmt::rt::Placeholder" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::archive_current_state" -> "core::fmt::rt::UnsafeArg" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::archive_current_state" -> "core::panic::location::Location" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::archive_current_state" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::archive_current_state" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::archive_current_state" -> "libsignal_protocol::state::session::SessionRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::archive_current_state" -> "log::Level" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::archive_current_state" -> "log::LevelFilter" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::archive_current_state" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::archive_current_state" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::archive_current_state_inner" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::archive_current_state_inner" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::archive_current_state_inner" -> "bool" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::archive_current_state_inner" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::archive_current_state_inner" -> "libsignal_protocol::state::session::SessionRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::archive_current_state_inner" -> "libsignal_protocol::state::session::SessionState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::archive_current_state_inner" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::archive_current_state_inner" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::clone" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::clone" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::clone" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::clone" -> "libsignal_protocol::state::session::SessionRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::clone" -> "libsignal_protocol::state::session::SessionState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::clone" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::current_ratchet_key_matches" -> "bool" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::current_ratchet_key_matches" -> "core::convert::Infallible" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::current_ratchet_key_matches" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::current_ratchet_key_matches" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::current_ratchet_key_matches" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::current_ratchet_key_matches" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::current_ratchet_key_matches" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::current_ratchet_key_matches" -> "libsignal_protocol::state::session::InvalidSessionError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::current_ratchet_key_matches" -> "libsignal_protocol::state::session::SessionRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::current_ratchet_key_matches" -> "libsignal_protocol::state::session::SessionState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::deserialize" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::deserialize" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::deserialize" -> "core::iter::adapters::map::Map" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::deserialize" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::deserialize" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::deserialize" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::deserialize" -> "libsignal_protocol::state::session::InvalidSessionError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::deserialize" -> "libsignal_protocol::state::session::SessionRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::deserialize" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::deserialize" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::get_kyber_ciphertext" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::get_kyber_ciphertext" -> "alloc::string::String" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::get_kyber_ciphertext" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::get_kyber_ciphertext" -> "core::convert::Infallible" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::get_kyber_ciphertext" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::get_kyber_ciphertext" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::get_kyber_ciphertext" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::get_kyber_ciphertext" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::get_kyber_ciphertext" -> "libsignal_protocol::state::session::SessionRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::get_kyber_ciphertext" -> "libsignal_protocol::state::session::SessionState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::get_kyber_ciphertext" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::get_kyber_ciphertext" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::get_receiver_chain_key_bytes" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::get_receiver_chain_key_bytes" -> "alloc::boxed::Box" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::get_receiver_chain_key_bytes" -> "alloc::string::String" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::get_receiver_chain_key_bytes" -> "core::convert::Infallible" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::get_receiver_chain_key_bytes" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::get_receiver_chain_key_bytes" -> "core::ops::range::RangeFull" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::get_receiver_chain_key_bytes" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::get_receiver_chain_key_bytes" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::get_receiver_chain_key_bytes" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::get_receiver_chain_key_bytes" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::get_receiver_chain_key_bytes" -> "libsignal_protocol::ratchet::keys::ChainKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::get_receiver_chain_key_bytes" -> "libsignal_protocol::state::session::InvalidSessionError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::get_receiver_chain_key_bytes" -> "libsignal_protocol::state::session::SessionRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::get_receiver_chain_key_bytes" -> "libsignal_protocol::state::session::SessionState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::get_receiver_chain_key_bytes" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::get_receiver_chain_key_bytes" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::get_receiver_chain_key_bytes" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::get_sender_chain_key_bytes" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::get_sender_chain_key_bytes" -> "alloc::string::String" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::get_sender_chain_key_bytes" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::get_sender_chain_key_bytes" -> "core::convert::Infallible" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::get_sender_chain_key_bytes" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::get_sender_chain_key_bytes" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::get_sender_chain_key_bytes" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::get_sender_chain_key_bytes" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::get_sender_chain_key_bytes" -> "libsignal_protocol::state::session::InvalidSessionError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::get_sender_chain_key_bytes" -> "libsignal_protocol::state::session::SessionRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::get_sender_chain_key_bytes" -> "libsignal_protocol::state::session::SessionState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::get_sender_chain_key_bytes" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::get_sender_chain_key_bytes" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::has_session_state" -> "bool" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::has_session_state" -> "core::convert::Infallible" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::has_session_state" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::has_session_state" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::has_session_state" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::has_session_state" -> "libsignal_protocol::state::session::InvalidSessionError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::has_session_state" -> "libsignal_protocol::state::session::SessionRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::has_session_state" -> "libsignal_protocol::state::session::SessionState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::has_session_state" -> "subtle::Choice" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::has_session_state" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::has_session_state" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::has_usable_sender_chain" -> "bool" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::has_usable_sender_chain" -> "core::convert::Infallible" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::has_usable_sender_chain" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::has_usable_sender_chain" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::has_usable_sender_chain" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::has_usable_sender_chain" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::has_usable_sender_chain" -> "libsignal_protocol::state::session::InvalidSessionError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::has_usable_sender_chain" -> "libsignal_protocol::state::session::SessionRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::has_usable_sender_chain" -> "libsignal_protocol::state::session::SessionState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::has_usable_sender_chain" -> "std::time::SystemTime" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::local_identity_key_bytes" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::local_identity_key_bytes" -> "alloc::string::String" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::local_identity_key_bytes" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::local_identity_key_bytes" -> "core::convert::Infallible" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::local_identity_key_bytes" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::local_identity_key_bytes" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::local_identity_key_bytes" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::local_identity_key_bytes" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::local_identity_key_bytes" -> "libsignal_protocol::state::session::InvalidSessionError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::local_identity_key_bytes" -> "libsignal_protocol::state::session::SessionRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::local_identity_key_bytes" -> "libsignal_protocol::state::session::SessionState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::local_identity_key_bytes" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::local_identity_key_bytes" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::local_registration_id" -> "alloc::string::String" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::local_registration_id" -> "core::convert::Infallible" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::local_registration_id" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::local_registration_id" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::local_registration_id" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::local_registration_id" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::local_registration_id" -> "libsignal_protocol::state::session::SessionRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::local_registration_id" -> "libsignal_protocol::state::session::SessionState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::local_registration_id" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::local_registration_id" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::new" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::new" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::new" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::new" -> "libsignal_protocol::state::session::SessionRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::new" -> "libsignal_protocol::state::session::SessionState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::new" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::new_fresh" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::new_fresh" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::new_fresh" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::new_fresh" -> "libsignal_protocol::state::session::SessionRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::new_fresh" -> "libsignal_protocol::state::session::SessionState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::new_fresh" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::previous_session_states" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::previous_session_states" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::previous_session_states" -> "core::iter::adapters::map::Map" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::previous_session_states" -> "core::iter::traits::exact_size::ExactSizeIterator" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::previous_session_states" -> "core::marker::Sized" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::previous_session_states" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::previous_session_states" -> "core::ops::range::RangeFull" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::previous_session_states" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::previous_session_states" -> "core::slice::iter::Iter" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::previous_session_states" -> "libsignal_protocol::state::session::InvalidSessionError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::previous_session_states" -> "libsignal_protocol::state::session::SessionRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::previous_session_states" -> "libsignal_protocol::state::session::SessionState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::previous_session_states" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::previous_session_states" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::promote_old_session" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::promote_old_session" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::promote_old_session" -> "libsignal_protocol::state::session::SessionRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::promote_old_session" -> "libsignal_protocol::state::session::SessionState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::promote_old_session" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::promote_old_session" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::promote_state" -> "bool" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::promote_state" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::promote_state" -> "libsignal_protocol::state::session::SessionRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::promote_state" -> "libsignal_protocol::state::session::SessionState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::remote_identity_key_bytes" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::remote_identity_key_bytes" -> "alloc::string::String" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::remote_identity_key_bytes" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::remote_identity_key_bytes" -> "core::convert::Infallible" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::remote_identity_key_bytes" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::remote_identity_key_bytes" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::remote_identity_key_bytes" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::remote_identity_key_bytes" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::remote_identity_key_bytes" -> "libsignal_protocol::state::session::InvalidSessionError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::remote_identity_key_bytes" -> "libsignal_protocol::state::session::SessionRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::remote_identity_key_bytes" -> "libsignal_protocol::state::session::SessionState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::remote_identity_key_bytes" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::remote_identity_key_bytes" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::remote_registration_id" -> "alloc::string::String" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::remote_registration_id" -> "core::convert::Infallible" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::remote_registration_id" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::remote_registration_id" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::remote_registration_id" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::remote_registration_id" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::remote_registration_id" -> "libsignal_protocol::state::session::SessionRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::remote_registration_id" -> "libsignal_protocol::state::session::SessionState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::remote_registration_id" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::remote_registration_id" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::serialize" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::serialize" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::serialize" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::serialize" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::serialize" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::serialize" -> "libsignal_protocol::state::session::SessionRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::serialize" -> "libsignal_protocol::state::session::SessionState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::serialize" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::session_state" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::session_state" -> "libsignal_protocol::state::session::SessionRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::session_state" -> "libsignal_protocol::state::session::SessionState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::session_state_mut" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::session_state_mut" -> "libsignal_protocol::state::session::SessionRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::session_state_mut" -> "libsignal_protocol::state::session::SessionState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::session_version" -> "alloc::string::String" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::session_version" -> "core::convert::Infallible" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::session_version" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::session_version" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::session_version" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::session_version" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::session_version" -> "libsignal_protocol::state::session::InvalidSessionError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::session_version" -> "libsignal_protocol::state::session::SessionRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::session_version" -> "libsignal_protocol::state::session::SessionState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::session_version" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::session_version" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::set_session_state" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::set_session_state" -> "libsignal_protocol::state::session::SessionRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionRecord::set_session_state" -> "libsignal_protocol::state::session::SessionState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState" -> "libsignal_protocol::state::session::SessionState::add_receiver_chain" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::session::SessionState" -> "libsignal_protocol::state::session::SessionState::alice_base_key" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::session::SessionState" -> "libsignal_protocol::state::session::SessionState::all_receiver_chain_logging_info" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::session::SessionState" -> "libsignal_protocol::state::session::SessionState::clear_unacknowledged_pre_key_message" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::session::SessionState" -> "libsignal_protocol::state::session::SessionState::clone" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::session::SessionState" -> "libsignal_protocol::state::session::SessionState::fmt" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::session::SessionState" -> "libsignal_protocol::state::session::SessionState::from" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::session::SessionState" -> "libsignal_protocol::state::session::SessionState::from_session_structure" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::session::SessionState" -> "libsignal_protocol::state::session::SessionState::get_kyber_ciphertext" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::session::SessionState" -> "libsignal_protocol::state::session::SessionState::get_message_keys" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::session::SessionState" -> "libsignal_protocol::state::session::SessionState::get_receiver_chain" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::session::SessionState" -> "libsignal_protocol::state::session::SessionState::get_receiver_chain_key" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::session::SessionState" -> "libsignal_protocol::state::session::SessionState::get_sender_chain_key" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::session::SessionState" -> "libsignal_protocol::state::session::SessionState::get_sender_chain_key_bytes" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::session::SessionState" -> "libsignal_protocol::state::session::SessionState::has_usable_sender_chain" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::session::SessionState" -> "libsignal_protocol::state::session::SessionState::local_identity_key" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::session::SessionState" -> "libsignal_protocol::state::session::SessionState::local_identity_key_bytes" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::session::SessionState" -> "libsignal_protocol::state::session::SessionState::local_registration_id" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::session::SessionState" -> "libsignal_protocol::state::session::SessionState::new" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::session::SessionState" -> "libsignal_protocol::state::session::SessionState::previous_counter" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::session::SessionState" -> "libsignal_protocol::state::session::SessionState::remote_identity_key" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::session::SessionState" -> "libsignal_protocol::state::session::SessionState::remote_identity_key_bytes" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::session::SessionState" -> "libsignal_protocol::state::session::SessionState::remote_registration_id" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::session::SessionState" -> "libsignal_protocol::state::session::SessionState::root_key" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::session::SessionState" -> "libsignal_protocol::state::session::SessionState::sender_ratchet_key" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::session::SessionState" -> "libsignal_protocol::state::session::SessionState::sender_ratchet_key_for_logging" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::session::SessionState" -> "libsignal_protocol::state::session::SessionState::sender_ratchet_private_key" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::session::SessionState" -> "libsignal_protocol::state::session::SessionState::session_version" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::session::SessionState" -> "libsignal_protocol::state::session::SessionState::session_with_self" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::session::SessionState" -> "libsignal_protocol::state::session::SessionState::set_kyber_ciphertext" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::session::SessionState" -> "libsignal_protocol::state::session::SessionState::set_local_registration_id" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::session::SessionState" -> "libsignal_protocol::state::session::SessionState::set_message_keys" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::session::SessionState" -> "libsignal_protocol::state::session::SessionState::set_previous_counter" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::session::SessionState" -> "libsignal_protocol::state::session::SessionState::set_receiver_chain_key" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::session::SessionState" -> "libsignal_protocol::state::session::SessionState::set_remote_registration_id" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::session::SessionState" -> "libsignal_protocol::state::session::SessionState::set_root_key" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::session::SessionState" -> "libsignal_protocol::state::session::SessionState::set_sender_chain" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::session::SessionState" -> "libsignal_protocol::state::session::SessionState::set_sender_chain_key" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::session::SessionState" -> "libsignal_protocol::state::session::SessionState::set_unacknowledged_kyber_pre_key_id" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::session::SessionState" -> "libsignal_protocol::state::session::SessionState::set_unacknowledged_pre_key_message" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::session::SessionState" -> "libsignal_protocol::state::session::SessionState::unacknowledged_pre_key_message_items" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::session::SessionState" -> "libsignal_protocol::state::session::SessionState::with_receiver_chain" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::session::SessionState" -> "libsignal_protocol::state::session::SessionState::with_sender_chain" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::session::SessionState::add_receiver_chain" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::add_receiver_chain" -> "alloc::boxed::Box" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::add_receiver_chain" -> "alloc::string::String" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::add_receiver_chain" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::add_receiver_chain" -> "bool" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::add_receiver_chain" -> "char" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::add_receiver_chain" -> "core::fmt::Arguments" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::add_receiver_chain" -> "core::fmt::rt::Alignment" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::add_receiver_chain" -> "core::fmt::rt::Argument" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::add_receiver_chain" -> "core::fmt::rt::Count" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::add_receiver_chain" -> "core::fmt::rt::Placeholder" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::add_receiver_chain" -> "core::fmt::rt::UnsafeArg" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::add_receiver_chain" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::add_receiver_chain" -> "core::panic::location::Location" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::add_receiver_chain" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::add_receiver_chain" -> "i32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::add_receiver_chain" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::add_receiver_chain" -> "libsignal_protocol::ratchet::keys::ChainKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::add_receiver_chain" -> "libsignal_protocol::state::session::InvalidSessionError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::add_receiver_chain" -> "libsignal_protocol::state::session::SessionState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::add_receiver_chain" -> "log::Level" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::add_receiver_chain" -> "log::LevelFilter" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::add_receiver_chain" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::add_receiver_chain" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::add_receiver_chain" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::add_receiver_chain" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::alice_base_key" -> "libsignal_protocol::state::session::SessionState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::alice_base_key" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::all_receiver_chain_logging_info" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::all_receiver_chain_logging_info" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::all_receiver_chain_logging_info" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::all_receiver_chain_logging_info" -> "libsignal_protocol::state::session::SessionState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::all_receiver_chain_logging_info" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::all_receiver_chain_logging_info" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::clear_unacknowledged_pre_key_message" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::clear_unacknowledged_pre_key_message" -> "libsignal_protocol::state::session::SessionState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::clone" -> "libsignal_protocol::state::session::SessionState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::fmt" -> "core::fmt::Error" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::fmt" -> "core::fmt::Formatter" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::fmt" -> "core::fmt::builders::DebugStruct" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::fmt" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::fmt" -> "libsignal_protocol::state::session::SessionState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::fmt" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::from" -> "libsignal_protocol::state::session::SessionState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::from_session_structure" -> "libsignal_protocol::state::session::SessionState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::get_kyber_ciphertext" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::get_kyber_ciphertext" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::get_kyber_ciphertext" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::get_kyber_ciphertext" -> "libsignal_protocol::state::session::SessionState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::get_kyber_ciphertext" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::get_message_keys" -> "bool" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::get_message_keys" -> "core::convert::Infallible" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::get_message_keys" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::get_message_keys" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::get_message_keys" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::get_message_keys" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::get_message_keys" -> "libsignal_protocol::ratchet::keys::MessageKeyGenerator" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::get_message_keys" -> "libsignal_protocol::state::session::InvalidSessionError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::get_message_keys" -> "libsignal_protocol::state::session::SessionState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::get_message_keys" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::get_message_keys" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::get_message_keys" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::get_receiver_chain" -> "bool" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::get_receiver_chain" -> "core::convert::Infallible" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::get_receiver_chain" -> "core::iter::adapters::enumerate::Enumerate" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::get_receiver_chain" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::get_receiver_chain" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::get_receiver_chain" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::get_receiver_chain" -> "libsignal_core::curve::CurveError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::get_receiver_chain" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::get_receiver_chain" -> "libsignal_protocol::state::session::InvalidSessionError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::get_receiver_chain" -> "libsignal_protocol::state::session::SessionState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::get_receiver_chain" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::get_receiver_chain" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::get_receiver_chain" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::get_receiver_chain_key" -> "core::convert::Infallible" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::get_receiver_chain_key" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::get_receiver_chain_key" -> "core::ops::range::RangeFull" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::get_receiver_chain_key" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::get_receiver_chain_key" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::get_receiver_chain_key" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::get_receiver_chain_key" -> "libsignal_protocol::ratchet::keys::ChainKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::get_receiver_chain_key" -> "libsignal_protocol::state::session::InvalidSessionError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::get_receiver_chain_key" -> "libsignal_protocol::state::session::SessionState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::get_receiver_chain_key" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::get_receiver_chain_key" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::get_receiver_chain_key" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::get_receiver_chain_key" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::get_sender_chain_key" -> "core::convert::Infallible" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::get_sender_chain_key" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::get_sender_chain_key" -> "core::ops::range::RangeFull" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::get_sender_chain_key" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::get_sender_chain_key" -> "libsignal_protocol::ratchet::keys::ChainKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::get_sender_chain_key" -> "libsignal_protocol::state::session::InvalidSessionError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::get_sender_chain_key" -> "libsignal_protocol::state::session::SessionState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::get_sender_chain_key" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::get_sender_chain_key" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::get_sender_chain_key" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::get_sender_chain_key" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::get_sender_chain_key_bytes" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::get_sender_chain_key_bytes" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::get_sender_chain_key_bytes" -> "core::convert::Infallible" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::get_sender_chain_key_bytes" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::get_sender_chain_key_bytes" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::get_sender_chain_key_bytes" -> "libsignal_protocol::ratchet::keys::ChainKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::get_sender_chain_key_bytes" -> "libsignal_protocol::state::session::InvalidSessionError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::get_sender_chain_key_bytes" -> "libsignal_protocol::state::session::SessionState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::get_sender_chain_key_bytes" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::get_sender_chain_key_bytes" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::has_usable_sender_chain" -> "bool" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::has_usable_sender_chain" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::has_usable_sender_chain" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::has_usable_sender_chain" -> "core::time::Duration" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::has_usable_sender_chain" -> "libsignal_protocol::state::session::InvalidSessionError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::has_usable_sender_chain" -> "libsignal_protocol::state::session::SessionState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::has_usable_sender_chain" -> "std::time::SystemTime" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::has_usable_sender_chain" -> "u64" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::local_identity_key" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::local_identity_key" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::local_identity_key" -> "libsignal_protocol::identity_key::IdentityKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::local_identity_key" -> "libsignal_protocol::state::session::InvalidSessionError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::local_identity_key" -> "libsignal_protocol::state::session::SessionState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::local_identity_key" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::local_identity_key" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::local_identity_key_bytes" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::local_identity_key_bytes" -> "alloc::boxed::Box" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::local_identity_key_bytes" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::local_identity_key_bytes" -> "core::convert::Infallible" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::local_identity_key_bytes" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::local_identity_key_bytes" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::local_identity_key_bytes" -> "libsignal_protocol::identity_key::IdentityKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::local_identity_key_bytes" -> "libsignal_protocol::state::session::InvalidSessionError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::local_identity_key_bytes" -> "libsignal_protocol::state::session::SessionState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::local_identity_key_bytes" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::local_registration_id" -> "libsignal_protocol::state::session::SessionState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::local_registration_id" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::new" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::new" -> "alloc::boxed::Box" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::new" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::new" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::new" -> "i32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::new" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::new" -> "libsignal_protocol::identity_key::IdentityKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::new" -> "libsignal_protocol::ratchet::keys::RootKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::new" -> "libsignal_protocol::state::session::SessionState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::new" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::new" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::new" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::previous_counter" -> "libsignal_protocol::state::session::SessionState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::previous_counter" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::remote_identity_key" -> "core::convert::Infallible" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::remote_identity_key" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::remote_identity_key" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::remote_identity_key" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::remote_identity_key" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::remote_identity_key" -> "libsignal_protocol::identity_key::IdentityKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::remote_identity_key" -> "libsignal_protocol::state::session::InvalidSessionError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::remote_identity_key" -> "libsignal_protocol::state::session::SessionState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::remote_identity_key" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::remote_identity_key" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::remote_identity_key" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::remote_identity_key_bytes" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::remote_identity_key_bytes" -> "alloc::boxed::Box" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::remote_identity_key_bytes" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::remote_identity_key_bytes" -> "core::convert::Infallible" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::remote_identity_key_bytes" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::remote_identity_key_bytes" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::remote_identity_key_bytes" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::remote_identity_key_bytes" -> "libsignal_protocol::identity_key::IdentityKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::remote_identity_key_bytes" -> "libsignal_protocol::state::session::InvalidSessionError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::remote_identity_key_bytes" -> "libsignal_protocol::state::session::SessionState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::remote_identity_key_bytes" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::remote_registration_id" -> "libsignal_protocol::state::session::SessionState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::remote_registration_id" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::root_key" -> "core::convert::Infallible" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::root_key" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::root_key" -> "core::ops::range::RangeFull" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::root_key" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::root_key" -> "libsignal_protocol::ratchet::keys::RootKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::root_key" -> "libsignal_protocol::state::session::InvalidSessionError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::root_key" -> "libsignal_protocol::state::session::SessionState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::root_key" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::root_key" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::root_key" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::sender_ratchet_key" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::sender_ratchet_key" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::sender_ratchet_key" -> "libsignal_core::curve::CurveError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::sender_ratchet_key" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::sender_ratchet_key" -> "libsignal_protocol::state::session::InvalidSessionError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::sender_ratchet_key" -> "libsignal_protocol::state::session::SessionState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::sender_ratchet_key" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::sender_ratchet_key" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::sender_ratchet_key_for_logging" -> "alloc::string::String" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::sender_ratchet_key_for_logging" -> "core::convert::Infallible" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::sender_ratchet_key_for_logging" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::sender_ratchet_key_for_logging" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::sender_ratchet_key_for_logging" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::sender_ratchet_key_for_logging" -> "libsignal_protocol::state::session::InvalidSessionError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::sender_ratchet_key_for_logging" -> "libsignal_protocol::state::session::SessionState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::sender_ratchet_key_for_logging" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::sender_ratchet_private_key" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::sender_ratchet_private_key" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::sender_ratchet_private_key" -> "libsignal_core::curve::CurveError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::sender_ratchet_private_key" -> "libsignal_core::curve::PrivateKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::sender_ratchet_private_key" -> "libsignal_protocol::state::session::InvalidSessionError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::sender_ratchet_private_key" -> "libsignal_protocol::state::session::SessionState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::sender_ratchet_private_key" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::sender_ratchet_private_key" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::session_version" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::session_version" -> "libsignal_protocol::state::session::InvalidSessionError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::session_version" -> "libsignal_protocol::state::session::SessionState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::session_version" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::session_with_self" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::session_with_self" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::session_with_self" -> "bool" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::session_with_self" -> "core::convert::Infallible" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::session_with_self" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::session_with_self" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::session_with_self" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::session_with_self" -> "libsignal_protocol::state::session::InvalidSessionError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::session_with_self" -> "libsignal_protocol::state::session::SessionState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::session_with_self" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::set_kyber_ciphertext" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::set_kyber_ciphertext" -> "alloc::boxed::Box" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::set_kyber_ciphertext" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::set_kyber_ciphertext" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::set_kyber_ciphertext" -> "libsignal_protocol::state::session::SessionState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::set_kyber_ciphertext" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::set_kyber_ciphertext" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::set_local_registration_id" -> "libsignal_protocol::state::session::SessionState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::set_local_registration_id" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::set_message_keys" -> "bool" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::set_message_keys" -> "core::convert::Infallible" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::set_message_keys" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::set_message_keys" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::set_message_keys" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::set_message_keys" -> "i32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::set_message_keys" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::set_message_keys" -> "libsignal_protocol::ratchet::keys::MessageKeyGenerator" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::set_message_keys" -> "libsignal_protocol::state::session::InvalidSessionError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::set_message_keys" -> "libsignal_protocol::state::session::SessionState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::set_message_keys" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::set_message_keys" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::set_previous_counter" -> "libsignal_protocol::state::session::SessionState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::set_previous_counter" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::set_receiver_chain_key" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::set_receiver_chain_key" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::set_receiver_chain_key" -> "core::convert::Infallible" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::set_receiver_chain_key" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::set_receiver_chain_key" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::set_receiver_chain_key" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::set_receiver_chain_key" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::set_receiver_chain_key" -> "libsignal_protocol::ratchet::keys::ChainKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::set_receiver_chain_key" -> "libsignal_protocol::state::session::InvalidSessionError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::set_receiver_chain_key" -> "libsignal_protocol::state::session::SessionState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::set_receiver_chain_key" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::set_receiver_chain_key" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::set_receiver_chain_key" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::set_receiver_chain_key" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::set_remote_registration_id" -> "libsignal_protocol::state::session::SessionState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::set_remote_registration_id" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::set_root_key" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::set_root_key" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::set_root_key" -> "libsignal_protocol::ratchet::keys::RootKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::set_root_key" -> "libsignal_protocol::state::session::SessionState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::set_root_key" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::set_root_key" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::set_sender_chain" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::set_sender_chain" -> "alloc::boxed::Box" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::set_sender_chain" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::set_sender_chain" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::set_sender_chain" -> "libsignal_core::curve::KeyPair" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::set_sender_chain" -> "libsignal_core::curve::PrivateKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::set_sender_chain" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::set_sender_chain" -> "libsignal_protocol::ratchet::keys::ChainKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::set_sender_chain" -> "libsignal_protocol::state::session::SessionState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::set_sender_chain" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::set_sender_chain" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::set_sender_chain" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::set_sender_chain_key" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::set_sender_chain_key" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::set_sender_chain_key" -> "core::iter::adapters::take::Take" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::set_sender_chain_key" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::set_sender_chain_key" -> "libsignal_protocol::ratchet::keys::ChainKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::set_sender_chain_key" -> "libsignal_protocol::state::session::SessionState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::set_sender_chain_key" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::set_sender_chain_key" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::set_sender_chain_key" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::set_unacknowledged_kyber_pre_key_id" -> "libsignal_protocol::state::kyber_prekey::KyberPreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::set_unacknowledged_kyber_pre_key_id" -> "libsignal_protocol::state::session::SessionState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::set_unacknowledged_kyber_pre_key_id" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::set_unacknowledged_pre_key_message" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::set_unacknowledged_pre_key_message" -> "alloc::boxed::Box" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::set_unacknowledged_pre_key_message" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::set_unacknowledged_pre_key_message" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::set_unacknowledged_pre_key_message" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::set_unacknowledged_pre_key_message" -> "core::time::Duration" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::set_unacknowledged_pre_key_message" -> "i32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::set_unacknowledged_pre_key_message" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::set_unacknowledged_pre_key_message" -> "libsignal_protocol::state::prekey::PreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::set_unacknowledged_pre_key_message" -> "libsignal_protocol::state::session::SessionState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::set_unacknowledged_pre_key_message" -> "libsignal_protocol::state::signed_prekey::SignedPreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::set_unacknowledged_pre_key_message" -> "std::time::SystemTime" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::set_unacknowledged_pre_key_message" -> "std::time::SystemTimeError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::set_unacknowledged_pre_key_message" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::set_unacknowledged_pre_key_message" -> "u64" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::set_unacknowledged_pre_key_message" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::unacknowledged_pre_key_message_items" -> "bool" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::unacknowledged_pre_key_message_items" -> "core::convert::Infallible" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::unacknowledged_pre_key_message_items" -> "core::iter::adapters::map::Map" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::unacknowledged_pre_key_message_items" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::unacknowledged_pre_key_message_items" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::unacknowledged_pre_key_message_items" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::unacknowledged_pre_key_message_items" -> "core::time::Duration" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::unacknowledged_pre_key_message_items" -> "libsignal_core::curve::CurveError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::unacknowledged_pre_key_message_items" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::unacknowledged_pre_key_message_items" -> "libsignal_protocol::state::session::InvalidSessionError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::unacknowledged_pre_key_message_items" -> "libsignal_protocol::state::session::SessionState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::unacknowledged_pre_key_message_items" -> "libsignal_protocol::state::session::UnacknowledgedPreKeyMessageItems" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::unacknowledged_pre_key_message_items" -> "libsignal_protocol::state::signed_prekey::SignedPreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::unacknowledged_pre_key_message_items" -> "std::time::SystemTime" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::unacknowledged_pre_key_message_items" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::unacknowledged_pre_key_message_items" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::unacknowledged_pre_key_message_items" -> "u64" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::unacknowledged_pre_key_message_items" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::with_receiver_chain" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::with_receiver_chain" -> "libsignal_protocol::ratchet::keys::ChainKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::with_receiver_chain" -> "libsignal_protocol::state::session::SessionState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::with_sender_chain" -> "libsignal_core::curve::KeyPair" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::with_sender_chain" -> "libsignal_protocol::ratchet::keys::ChainKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::SessionState::with_sender_chain" -> "libsignal_protocol::state::session::SessionState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::UnacknowledgedPreKeyMessageItems" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::UnacknowledgedPreKeyMessageItems" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::UnacknowledgedPreKeyMessageItems" -> "libsignal_protocol::state::kyber_prekey::KyberPreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::UnacknowledgedPreKeyMessageItems" -> "libsignal_protocol::state::prekey::PreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::UnacknowledgedPreKeyMessageItems" -> "libsignal_protocol::state::session::UnacknowledgedPreKeyMessageItems::base_key" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::session::UnacknowledgedPreKeyMessageItems" -> "libsignal_protocol::state::session::UnacknowledgedPreKeyMessageItems::clone" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::session::UnacknowledgedPreKeyMessageItems" -> "libsignal_protocol::state::session::UnacknowledgedPreKeyMessageItems::fmt" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::session::UnacknowledgedPreKeyMessageItems" -> "libsignal_protocol::state::session::UnacknowledgedPreKeyMessageItems::kyber_ciphertext" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::session::UnacknowledgedPreKeyMessageItems" -> "libsignal_protocol::state::session::UnacknowledgedPreKeyMessageItems::kyber_pre_key_id" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::session::UnacknowledgedPreKeyMessageItems" -> "libsignal_protocol::state::session::UnacknowledgedPreKeyMessageItems::new" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::session::UnacknowledgedPreKeyMessageItems" -> "libsignal_protocol::state::session::UnacknowledgedPreKeyMessageItems::pre_key_id" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::session::UnacknowledgedPreKeyMessageItems" -> "libsignal_protocol::state::session::UnacknowledgedPreKeyMessageItems::signed_pre_key_id" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::session::UnacknowledgedPreKeyMessageItems" -> "libsignal_protocol::state::session::UnacknowledgedPreKeyMessageItems::timestamp" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::session::UnacknowledgedPreKeyMessageItems" -> "libsignal_protocol::state::signed_prekey::SignedPreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::UnacknowledgedPreKeyMessageItems" -> "std::time::SystemTime" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::UnacknowledgedPreKeyMessageItems::base_key" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::UnacknowledgedPreKeyMessageItems::base_key" -> "libsignal_protocol::state::session::UnacknowledgedPreKeyMessageItems" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::UnacknowledgedPreKeyMessageItems::clone" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::UnacknowledgedPreKeyMessageItems::clone" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::UnacknowledgedPreKeyMessageItems::clone" -> "libsignal_protocol::state::kyber_prekey::KyberPreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::UnacknowledgedPreKeyMessageItems::clone" -> "libsignal_protocol::state::prekey::PreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::UnacknowledgedPreKeyMessageItems::clone" -> "libsignal_protocol::state::session::UnacknowledgedPreKeyMessageItems" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::UnacknowledgedPreKeyMessageItems::clone" -> "libsignal_protocol::state::signed_prekey::SignedPreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::UnacknowledgedPreKeyMessageItems::clone" -> "std::time::SystemTime" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::UnacknowledgedPreKeyMessageItems::clone" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::UnacknowledgedPreKeyMessageItems::fmt" -> "core::fmt::Error" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::UnacknowledgedPreKeyMessageItems::fmt" -> "core::fmt::Formatter" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::UnacknowledgedPreKeyMessageItems::fmt" -> "core::fmt::builders::DebugStruct" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::UnacknowledgedPreKeyMessageItems::fmt" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::UnacknowledgedPreKeyMessageItems::fmt" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::UnacknowledgedPreKeyMessageItems::fmt" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::UnacknowledgedPreKeyMessageItems::fmt" -> "libsignal_protocol::state::kyber_prekey::KyberPreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::UnacknowledgedPreKeyMessageItems::fmt" -> "libsignal_protocol::state::prekey::PreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::UnacknowledgedPreKeyMessageItems::fmt" -> "libsignal_protocol::state::session::UnacknowledgedPreKeyMessageItems" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::UnacknowledgedPreKeyMessageItems::fmt" -> "libsignal_protocol::state::signed_prekey::SignedPreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::UnacknowledgedPreKeyMessageItems::fmt" -> "std::time::SystemTime" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::UnacknowledgedPreKeyMessageItems::fmt" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::UnacknowledgedPreKeyMessageItems::fmt" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::UnacknowledgedPreKeyMessageItems::kyber_ciphertext" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::UnacknowledgedPreKeyMessageItems::kyber_ciphertext" -> "libsignal_protocol::state::session::UnacknowledgedPreKeyMessageItems" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::UnacknowledgedPreKeyMessageItems::kyber_ciphertext" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::UnacknowledgedPreKeyMessageItems::kyber_pre_key_id" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::UnacknowledgedPreKeyMessageItems::kyber_pre_key_id" -> "libsignal_protocol::state::kyber_prekey::KyberPreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::UnacknowledgedPreKeyMessageItems::kyber_pre_key_id" -> "libsignal_protocol::state::session::UnacknowledgedPreKeyMessageItems" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::UnacknowledgedPreKeyMessageItems::new" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::UnacknowledgedPreKeyMessageItems::new" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::UnacknowledgedPreKeyMessageItems::new" -> "libsignal_protocol::state::kyber_prekey::KyberPreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::UnacknowledgedPreKeyMessageItems::new" -> "libsignal_protocol::state::prekey::PreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::UnacknowledgedPreKeyMessageItems::new" -> "libsignal_protocol::state::session::UnacknowledgedPreKeyMessageItems" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::UnacknowledgedPreKeyMessageItems::new" -> "libsignal_protocol::state::signed_prekey::SignedPreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::UnacknowledgedPreKeyMessageItems::new" -> "std::time::SystemTime" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::UnacknowledgedPreKeyMessageItems::new" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::UnacknowledgedPreKeyMessageItems::pre_key_id" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::UnacknowledgedPreKeyMessageItems::pre_key_id" -> "libsignal_protocol::state::prekey::PreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::UnacknowledgedPreKeyMessageItems::pre_key_id" -> "libsignal_protocol::state::session::UnacknowledgedPreKeyMessageItems" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::UnacknowledgedPreKeyMessageItems::signed_pre_key_id" -> "libsignal_protocol::state::session::UnacknowledgedPreKeyMessageItems" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::UnacknowledgedPreKeyMessageItems::signed_pre_key_id" -> "libsignal_protocol::state::signed_prekey::SignedPreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::UnacknowledgedPreKeyMessageItems::timestamp" -> "libsignal_protocol::state::session::UnacknowledgedPreKeyMessageItems" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::session::UnacknowledgedPreKeyMessageItems::timestamp" -> "std::time::SystemTime" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::signed_prekey" -> "alloc::fmt" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::signed_prekey" -> "core::convert::AsRef" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::signed_prekey" -> "libsignal_core::curve::KeyPair" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::signed_prekey" -> "libsignal_core::curve::PrivateKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::signed_prekey" -> "libsignal_core::curve::PublicKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::signed_prekey" -> "libsignal_protocol::error::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::signed_prekey" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::signed_prekey" -> "libsignal_protocol::kem" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::signed_prekey" -> "libsignal_protocol::state::signed_prekey::GenericSignedPreKey" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::signed_prekey" -> "libsignal_protocol::state::signed_prekey::KeyPairSerde" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::signed_prekey" -> "libsignal_protocol::state::signed_prekey::KeySerde" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::signed_prekey" -> "libsignal_protocol::state::signed_prekey::SignedPreKeyId" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::signed_prekey" -> "libsignal_protocol::state::signed_prekey::SignedPreKeyRecord" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::signed_prekey" -> "libsignal_protocol::timestamp::Timestamp" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::signed_prekey" -> "prost::message::Message" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::signed_prekey::SignedPreKeyId" -> "libsignal_protocol::state::signed_prekey::SignedPreKeyId::clone" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::signed_prekey::SignedPreKeyId" -> "libsignal_protocol::state::signed_prekey::SignedPreKeyId::cmp" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::signed_prekey::SignedPreKeyId" -> "libsignal_protocol::state::signed_prekey::SignedPreKeyId::eq" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::signed_prekey::SignedPreKeyId" -> "libsignal_protocol::state::signed_prekey::SignedPreKeyId::fmt" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::signed_prekey::SignedPreKeyId" -> "libsignal_protocol::state::signed_prekey::SignedPreKeyId::fmt" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::signed_prekey::SignedPreKeyId" -> "libsignal_protocol::state::signed_prekey::SignedPreKeyId::hash" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::signed_prekey::SignedPreKeyId" -> "libsignal_protocol::state::signed_prekey::SignedPreKeyId::partial_cmp" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::signed_prekey::SignedPreKeyId::clone" -> "libsignal_protocol::state::signed_prekey::SignedPreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::signed_prekey::SignedPreKeyId::clone" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::signed_prekey::SignedPreKeyId::cmp" -> "core::cmp::Ordering" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::signed_prekey::SignedPreKeyId::cmp" -> "libsignal_protocol::state::signed_prekey::SignedPreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::signed_prekey::SignedPreKeyId::cmp" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::signed_prekey::SignedPreKeyId::eq" -> "bool" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::signed_prekey::SignedPreKeyId::eq" -> "libsignal_protocol::state::signed_prekey::SignedPreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::signed_prekey::SignedPreKeyId::eq" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::signed_prekey::SignedPreKeyId::fmt" -> "char" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::signed_prekey::SignedPreKeyId::fmt" -> "core::fmt::Arguments" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::signed_prekey::SignedPreKeyId::fmt" -> "core::fmt::Error" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::signed_prekey::SignedPreKeyId::fmt" -> "core::fmt::Error" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::signed_prekey::SignedPreKeyId::fmt" -> "core::fmt::Formatter" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::signed_prekey::SignedPreKeyId::fmt" -> "core::fmt::Formatter" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::signed_prekey::SignedPreKeyId::fmt" -> "core::fmt::builders::DebugTuple" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::signed_prekey::SignedPreKeyId::fmt" -> "core::fmt::rt::Alignment" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::signed_prekey::SignedPreKeyId::fmt" -> "core::fmt::rt::Argument" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::signed_prekey::SignedPreKeyId::fmt" -> "core::fmt::rt::Count" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::signed_prekey::SignedPreKeyId::fmt" -> "core::fmt::rt::Placeholder" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::signed_prekey::SignedPreKeyId::fmt" -> "core::fmt::rt::UnsafeArg" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::signed_prekey::SignedPreKeyId::fmt" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::signed_prekey::SignedPreKeyId::fmt" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::signed_prekey::SignedPreKeyId::fmt" -> "libsignal_protocol::state::signed_prekey::SignedPreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::signed_prekey::SignedPreKeyId::fmt" -> "libsignal_protocol::state::signed_prekey::SignedPreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::signed_prekey::SignedPreKeyId::fmt" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::signed_prekey::SignedPreKeyId::fmt" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::signed_prekey::SignedPreKeyId::fmt" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::signed_prekey::SignedPreKeyId::fmt" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::signed_prekey::SignedPreKeyId::fmt" -> "usize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::signed_prekey::SignedPreKeyId::hash" -> "libsignal_protocol::state::signed_prekey::SignedPreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::signed_prekey::SignedPreKeyId::hash" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::signed_prekey::SignedPreKeyId::partial_cmp" -> "core::cmp::Ordering" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::signed_prekey::SignedPreKeyId::partial_cmp" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::signed_prekey::SignedPreKeyId::partial_cmp" -> "libsignal_protocol::state::signed_prekey::SignedPreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::signed_prekey::SignedPreKeyId::partial_cmp" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::signed_prekey::SignedPreKeyId::partial_cmp" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::signed_prekey::SignedPreKeyRecord" -> "libsignal_protocol::state::signed_prekey::SignedPreKeyRecord::Id" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::signed_prekey::SignedPreKeyRecord" -> "libsignal_protocol::state::signed_prekey::SignedPreKeyRecord::KeyPair" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::signed_prekey::SignedPreKeyRecord" -> "libsignal_protocol::state::signed_prekey::SignedPreKeyRecord::clone" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::signed_prekey::SignedPreKeyRecord" -> "libsignal_protocol::state::signed_prekey::SignedPreKeyRecord::fmt" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::signed_prekey::SignedPreKeyRecord" -> "libsignal_protocol::state::signed_prekey::SignedPreKeyRecord::from_storage" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::signed_prekey::SignedPreKeyRecord" -> "libsignal_protocol::state::signed_prekey::SignedPreKeyRecord::get_storage" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::signed_prekey::SignedPreKeyRecord" -> "libsignal_protocol::state::signed_prekey::SignedPreKeyRecord::private_key" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::state::signed_prekey::SignedPreKeyRecord::Id" -> "libsignal_protocol::state::signed_prekey::SignedPreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::signed_prekey::SignedPreKeyRecord::KeyPair" -> "libsignal_core::curve::KeyPair" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::signed_prekey::SignedPreKeyRecord::clone" -> "libsignal_protocol::state::signed_prekey::SignedPreKeyRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::signed_prekey::SignedPreKeyRecord::fmt" -> "core::fmt::Error" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::signed_prekey::SignedPreKeyRecord::fmt" -> "core::fmt::Formatter" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::signed_prekey::SignedPreKeyRecord::fmt" -> "core::fmt::builders::DebugStruct" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::signed_prekey::SignedPreKeyRecord::fmt" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::signed_prekey::SignedPreKeyRecord::fmt" -> "libsignal_protocol::state::signed_prekey::SignedPreKeyRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::signed_prekey::SignedPreKeyRecord::fmt" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::signed_prekey::SignedPreKeyRecord::from_storage" -> "libsignal_protocol::state::signed_prekey::SignedPreKeyRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::signed_prekey::SignedPreKeyRecord::get_storage" -> "libsignal_protocol::state::signed_prekey::SignedPreKeyRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::signed_prekey::SignedPreKeyRecord::private_key" -> "core::convert::Infallible" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::signed_prekey::SignedPreKeyRecord::private_key" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::signed_prekey::SignedPreKeyRecord::private_key" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::signed_prekey::SignedPreKeyRecord::private_key" -> "libsignal_core::curve::CurveError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::signed_prekey::SignedPreKeyRecord::private_key" -> "libsignal_core::curve::PrivateKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::signed_prekey::SignedPreKeyRecord::private_key" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::signed_prekey::SignedPreKeyRecord::private_key" -> "libsignal_protocol::state::signed_prekey::SignedPreKeyRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::state::signed_prekey::SignedPreKeyRecord::private_key" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage" -> "libsignal_protocol::storage::inmem" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::storage" -> "libsignal_protocol::storage::inmem::InMemIdentityKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage" -> "libsignal_protocol::storage::inmem::InMemKyberPreKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage" -> "libsignal_protocol::storage::inmem::InMemPreKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage" -> "libsignal_protocol::storage::inmem::InMemSenderKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage" -> "libsignal_protocol::storage::inmem::InMemSessionStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage" -> "libsignal_protocol::storage::inmem::InMemSignalProtocolStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage" -> "libsignal_protocol::storage::inmem::InMemSignedPreKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage" -> "libsignal_protocol::storage::traits" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::storage" -> "libsignal_protocol::storage::traits::Direction" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage" -> "libsignal_protocol::storage::traits::IdentityKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage" -> "libsignal_protocol::storage::traits::KyberPreKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage" -> "libsignal_protocol::storage::traits::PreKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage" -> "libsignal_protocol::storage::traits::ProtocolStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage" -> "libsignal_protocol::storage::traits::SenderKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage" -> "libsignal_protocol::storage::traits::SessionStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage" -> "libsignal_protocol::storage::traits::SignedPreKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem" -> "alloc::borrow::Cow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem" -> "libsignal_core::address::ProtocolAddress" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem" -> "libsignal_protocol::error::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem" -> "libsignal_protocol::identity_key::IdentityKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem" -> "libsignal_protocol::identity_key::IdentityKeyPair" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem" -> "libsignal_protocol::sender_keys::SenderKeyRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem" -> "libsignal_protocol::state::kyber_prekey::KyberPreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem" -> "libsignal_protocol::state::kyber_prekey::KyberPreKeyRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem" -> "libsignal_protocol::state::prekey::PreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem" -> "libsignal_protocol::state::prekey::PreKeyRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem" -> "libsignal_protocol::state::session::SessionRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem" -> "libsignal_protocol::state::signed_prekey::SignedPreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem" -> "libsignal_protocol::state::signed_prekey::SignedPreKeyRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem" -> "libsignal_protocol::storage::inmem::InMemIdentityKeyStore" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::storage::inmem" -> "libsignal_protocol::storage::inmem::InMemKyberPreKeyStore" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::storage::inmem" -> "libsignal_protocol::storage::inmem::InMemPreKeyStore" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::storage::inmem" -> "libsignal_protocol::storage::inmem::InMemSenderKeyStore" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::storage::inmem" -> "libsignal_protocol::storage::inmem::InMemSessionStore" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::storage::inmem" -> "libsignal_protocol::storage::inmem::InMemSignalProtocolStore" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::storage::inmem" -> "libsignal_protocol::storage::inmem::InMemSignedPreKeyStore" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::storage::inmem" -> "libsignal_protocol::storage::traits" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem" -> "std::collections::hash::map::HashMap" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem" -> "uuid::Uuid" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemIdentityKeyStore" -> "libsignal_core::address::ProtocolAddress" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemIdentityKeyStore" -> "libsignal_protocol::identity_key::IdentityKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemIdentityKeyStore" -> "libsignal_protocol::identity_key::IdentityKeyPair" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemIdentityKeyStore" -> "libsignal_protocol::storage::inmem::InMemIdentityKeyStore::clone" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::storage::inmem::InMemIdentityKeyStore" -> "libsignal_protocol::storage::inmem::InMemIdentityKeyStore::get_identity" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::storage::inmem::InMemIdentityKeyStore" -> "libsignal_protocol::storage::inmem::InMemIdentityKeyStore::get_identity_key_pair" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::storage::inmem::InMemIdentityKeyStore" -> "libsignal_protocol::storage::inmem::InMemIdentityKeyStore::get_local_registration_id" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::storage::inmem::InMemIdentityKeyStore" -> "libsignal_protocol::storage::inmem::InMemIdentityKeyStore::is_trusted_identity" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::storage::inmem::InMemIdentityKeyStore" -> "libsignal_protocol::storage::inmem::InMemIdentityKeyStore::new" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::storage::inmem::InMemIdentityKeyStore" -> "libsignal_protocol::storage::inmem::InMemIdentityKeyStore::reset" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::storage::inmem::InMemIdentityKeyStore" -> "libsignal_protocol::storage::inmem::InMemIdentityKeyStore::save_identity" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::storage::inmem::InMemIdentityKeyStore" -> "std::collections::hash::map::HashMap" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemIdentityKeyStore" -> "std::hash::random::RandomState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemIdentityKeyStore::clone" -> "libsignal_core::address::ProtocolAddress" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemIdentityKeyStore::clone" -> "libsignal_protocol::identity_key::IdentityKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemIdentityKeyStore::clone" -> "libsignal_protocol::identity_key::IdentityKeyPair" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemIdentityKeyStore::clone" -> "libsignal_protocol::storage::inmem::InMemIdentityKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemIdentityKeyStore::clone" -> "std::collections::hash::map::HashMap" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemIdentityKeyStore::clone" -> "std::hash::random::RandomState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemIdentityKeyStore::clone" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemIdentityKeyStore::get_identity" -> "core::future::future::Future" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemIdentityKeyStore::get_identity" -> "core::marker::Sized" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemIdentityKeyStore::get_identity" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemIdentityKeyStore::get_identity" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemIdentityKeyStore::get_identity" -> "libsignal_core::address::ProtocolAddress" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemIdentityKeyStore::get_identity" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemIdentityKeyStore::get_identity" -> "libsignal_protocol::identity_key::IdentityKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemIdentityKeyStore::get_identity" -> "libsignal_protocol::storage::inmem::InMemIdentityKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemIdentityKeyStore::get_identity" -> "std::collections::hash::map::HashMap" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemIdentityKeyStore::get_identity" -> "std::hash::random::RandomState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemIdentityKeyStore::get_identity_key_pair" -> "core::future::future::Future" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemIdentityKeyStore::get_identity_key_pair" -> "core::marker::Sized" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemIdentityKeyStore::get_identity_key_pair" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemIdentityKeyStore::get_identity_key_pair" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemIdentityKeyStore::get_identity_key_pair" -> "libsignal_protocol::identity_key::IdentityKeyPair" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemIdentityKeyStore::get_identity_key_pair" -> "libsignal_protocol::storage::inmem::InMemIdentityKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemIdentityKeyStore::get_local_registration_id" -> "core::future::future::Future" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemIdentityKeyStore::get_local_registration_id" -> "core::marker::Sized" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemIdentityKeyStore::get_local_registration_id" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemIdentityKeyStore::get_local_registration_id" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemIdentityKeyStore::get_local_registration_id" -> "libsignal_protocol::storage::inmem::InMemIdentityKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemIdentityKeyStore::get_local_registration_id" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemIdentityKeyStore::is_trusted_identity" -> "bool" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemIdentityKeyStore::is_trusted_identity" -> "core::future::future::Future" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemIdentityKeyStore::is_trusted_identity" -> "core::marker::Sized" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemIdentityKeyStore::is_trusted_identity" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemIdentityKeyStore::is_trusted_identity" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemIdentityKeyStore::is_trusted_identity" -> "libsignal_core::address::ProtocolAddress" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemIdentityKeyStore::is_trusted_identity" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemIdentityKeyStore::is_trusted_identity" -> "libsignal_protocol::identity_key::IdentityKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemIdentityKeyStore::is_trusted_identity" -> "libsignal_protocol::storage::inmem::InMemIdentityKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemIdentityKeyStore::is_trusted_identity" -> "libsignal_protocol::storage::traits::Direction" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemIdentityKeyStore::is_trusted_identity" -> "std::collections::hash::map::HashMap" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemIdentityKeyStore::is_trusted_identity" -> "std::hash::random::RandomState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemIdentityKeyStore::new" -> "libsignal_core::address::ProtocolAddress" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemIdentityKeyStore::new" -> "libsignal_protocol::identity_key::IdentityKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemIdentityKeyStore::new" -> "libsignal_protocol::identity_key::IdentityKeyPair" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemIdentityKeyStore::new" -> "libsignal_protocol::storage::inmem::InMemIdentityKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemIdentityKeyStore::new" -> "std::collections::hash::map::HashMap" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemIdentityKeyStore::new" -> "std::hash::random::RandomState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemIdentityKeyStore::new" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemIdentityKeyStore::reset" -> "libsignal_core::address::ProtocolAddress" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemIdentityKeyStore::reset" -> "libsignal_protocol::identity_key::IdentityKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemIdentityKeyStore::reset" -> "libsignal_protocol::storage::inmem::InMemIdentityKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemIdentityKeyStore::reset" -> "std::collections::hash::map::HashMap" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemIdentityKeyStore::reset" -> "std::hash::random::RandomState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemIdentityKeyStore::save_identity" -> "bool" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemIdentityKeyStore::save_identity" -> "core::future::future::Future" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemIdentityKeyStore::save_identity" -> "core::marker::Sized" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemIdentityKeyStore::save_identity" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemIdentityKeyStore::save_identity" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemIdentityKeyStore::save_identity" -> "libsignal_core::address::ProtocolAddress" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemIdentityKeyStore::save_identity" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemIdentityKeyStore::save_identity" -> "libsignal_protocol::identity_key::IdentityKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemIdentityKeyStore::save_identity" -> "libsignal_protocol::storage::inmem::InMemIdentityKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemIdentityKeyStore::save_identity" -> "std::collections::hash::map::HashMap" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemIdentityKeyStore::save_identity" -> "std::hash::random::RandomState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemKyberPreKeyStore" -> "libsignal_protocol::state::kyber_prekey::KyberPreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemKyberPreKeyStore" -> "libsignal_protocol::state::kyber_prekey::KyberPreKeyRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemKyberPreKeyStore" -> "libsignal_protocol::storage::inmem::InMemKyberPreKeyStore::all_kyber_pre_key_ids" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::storage::inmem::InMemKyberPreKeyStore" -> "libsignal_protocol::storage::inmem::InMemKyberPreKeyStore::clone" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::storage::inmem::InMemKyberPreKeyStore" -> "libsignal_protocol::storage::inmem::InMemKyberPreKeyStore::default" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::storage::inmem::InMemKyberPreKeyStore" -> "libsignal_protocol::storage::inmem::InMemKyberPreKeyStore::get_kyber_pre_key" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::storage::inmem::InMemKyberPreKeyStore" -> "libsignal_protocol::storage::inmem::InMemKyberPreKeyStore::mark_kyber_pre_key_used" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::storage::inmem::InMemKyberPreKeyStore" -> "libsignal_protocol::storage::inmem::InMemKyberPreKeyStore::new" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::storage::inmem::InMemKyberPreKeyStore" -> "libsignal_protocol::storage::inmem::InMemKyberPreKeyStore::save_kyber_pre_key" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::storage::inmem::InMemKyberPreKeyStore" -> "std::collections::hash::map::HashMap" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemKyberPreKeyStore" -> "std::hash::random::RandomState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemKyberPreKeyStore::all_kyber_pre_key_ids" -> "core::iter::traits::iterator::Iterator" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemKyberPreKeyStore::all_kyber_pre_key_ids" -> "core::marker::Sized" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemKyberPreKeyStore::all_kyber_pre_key_ids" -> "libsignal_protocol::state::kyber_prekey::KyberPreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemKyberPreKeyStore::all_kyber_pre_key_ids" -> "libsignal_protocol::state::kyber_prekey::KyberPreKeyRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemKyberPreKeyStore::all_kyber_pre_key_ids" -> "libsignal_protocol::storage::inmem::InMemKyberPreKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemKyberPreKeyStore::all_kyber_pre_key_ids" -> "std::collections::hash::map::HashMap" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemKyberPreKeyStore::all_kyber_pre_key_ids" -> "std::collections::hash::map::Keys" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemKyberPreKeyStore::all_kyber_pre_key_ids" -> "std::hash::random::RandomState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemKyberPreKeyStore::clone" -> "libsignal_protocol::state::kyber_prekey::KyberPreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemKyberPreKeyStore::clone" -> "libsignal_protocol::state::kyber_prekey::KyberPreKeyRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemKyberPreKeyStore::clone" -> "libsignal_protocol::storage::inmem::InMemKyberPreKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemKyberPreKeyStore::clone" -> "std::collections::hash::map::HashMap" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemKyberPreKeyStore::clone" -> "std::hash::random::RandomState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemKyberPreKeyStore::default" -> "libsignal_protocol::storage::inmem::InMemKyberPreKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemKyberPreKeyStore::get_kyber_pre_key" -> "core::convert::Infallible" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemKyberPreKeyStore::get_kyber_pre_key" -> "core::future::future::Future" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemKyberPreKeyStore::get_kyber_pre_key" -> "core::marker::Sized" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemKyberPreKeyStore::get_kyber_pre_key" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemKyberPreKeyStore::get_kyber_pre_key" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemKyberPreKeyStore::get_kyber_pre_key" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemKyberPreKeyStore::get_kyber_pre_key" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemKyberPreKeyStore::get_kyber_pre_key" -> "libsignal_protocol::state::kyber_prekey::KyberPreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemKyberPreKeyStore::get_kyber_pre_key" -> "libsignal_protocol::state::kyber_prekey::KyberPreKeyRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemKyberPreKeyStore::get_kyber_pre_key" -> "libsignal_protocol::storage::inmem::InMemKyberPreKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemKyberPreKeyStore::get_kyber_pre_key" -> "std::collections::hash::map::HashMap" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemKyberPreKeyStore::get_kyber_pre_key" -> "std::hash::random::RandomState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemKyberPreKeyStore::mark_kyber_pre_key_used" -> "core::future::future::Future" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemKyberPreKeyStore::mark_kyber_pre_key_used" -> "core::marker::Sized" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemKyberPreKeyStore::mark_kyber_pre_key_used" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemKyberPreKeyStore::mark_kyber_pre_key_used" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemKyberPreKeyStore::mark_kyber_pre_key_used" -> "libsignal_protocol::state::kyber_prekey::KyberPreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemKyberPreKeyStore::mark_kyber_pre_key_used" -> "libsignal_protocol::storage::inmem::InMemKyberPreKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemKyberPreKeyStore::new" -> "libsignal_protocol::state::kyber_prekey::KyberPreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemKyberPreKeyStore::new" -> "libsignal_protocol::state::kyber_prekey::KyberPreKeyRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemKyberPreKeyStore::new" -> "libsignal_protocol::storage::inmem::InMemKyberPreKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemKyberPreKeyStore::new" -> "std::collections::hash::map::HashMap" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemKyberPreKeyStore::new" -> "std::hash::random::RandomState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemKyberPreKeyStore::save_kyber_pre_key" -> "core::future::future::Future" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemKyberPreKeyStore::save_kyber_pre_key" -> "core::marker::Sized" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemKyberPreKeyStore::save_kyber_pre_key" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemKyberPreKeyStore::save_kyber_pre_key" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemKyberPreKeyStore::save_kyber_pre_key" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemKyberPreKeyStore::save_kyber_pre_key" -> "libsignal_protocol::state::kyber_prekey::KyberPreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemKyberPreKeyStore::save_kyber_pre_key" -> "libsignal_protocol::state::kyber_prekey::KyberPreKeyRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemKyberPreKeyStore::save_kyber_pre_key" -> "libsignal_protocol::storage::inmem::InMemKyberPreKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemKyberPreKeyStore::save_kyber_pre_key" -> "std::collections::hash::map::HashMap" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemKyberPreKeyStore::save_kyber_pre_key" -> "std::hash::random::RandomState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemPreKeyStore" -> "libsignal_protocol::state::prekey::PreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemPreKeyStore" -> "libsignal_protocol::state::prekey::PreKeyRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemPreKeyStore" -> "libsignal_protocol::storage::inmem::InMemPreKeyStore::all_pre_key_ids" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::storage::inmem::InMemPreKeyStore" -> "libsignal_protocol::storage::inmem::InMemPreKeyStore::clone" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::storage::inmem::InMemPreKeyStore" -> "libsignal_protocol::storage::inmem::InMemPreKeyStore::default" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::storage::inmem::InMemPreKeyStore" -> "libsignal_protocol::storage::inmem::InMemPreKeyStore::get_pre_key" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::storage::inmem::InMemPreKeyStore" -> "libsignal_protocol::storage::inmem::InMemPreKeyStore::new" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::storage::inmem::InMemPreKeyStore" -> "libsignal_protocol::storage::inmem::InMemPreKeyStore::remove_pre_key" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::storage::inmem::InMemPreKeyStore" -> "libsignal_protocol::storage::inmem::InMemPreKeyStore::save_pre_key" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::storage::inmem::InMemPreKeyStore" -> "std::collections::hash::map::HashMap" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemPreKeyStore" -> "std::hash::random::RandomState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemPreKeyStore::all_pre_key_ids" -> "core::iter::traits::iterator::Iterator" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemPreKeyStore::all_pre_key_ids" -> "core::marker::Sized" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemPreKeyStore::all_pre_key_ids" -> "libsignal_protocol::state::prekey::PreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemPreKeyStore::all_pre_key_ids" -> "libsignal_protocol::state::prekey::PreKeyRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemPreKeyStore::all_pre_key_ids" -> "libsignal_protocol::storage::inmem::InMemPreKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemPreKeyStore::all_pre_key_ids" -> "std::collections::hash::map::HashMap" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemPreKeyStore::all_pre_key_ids" -> "std::collections::hash::map::Keys" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemPreKeyStore::all_pre_key_ids" -> "std::hash::random::RandomState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemPreKeyStore::clone" -> "libsignal_protocol::state::prekey::PreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemPreKeyStore::clone" -> "libsignal_protocol::state::prekey::PreKeyRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemPreKeyStore::clone" -> "libsignal_protocol::storage::inmem::InMemPreKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemPreKeyStore::clone" -> "std::collections::hash::map::HashMap" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemPreKeyStore::clone" -> "std::hash::random::RandomState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemPreKeyStore::default" -> "libsignal_protocol::storage::inmem::InMemPreKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemPreKeyStore::get_pre_key" -> "core::convert::Infallible" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemPreKeyStore::get_pre_key" -> "core::future::future::Future" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemPreKeyStore::get_pre_key" -> "core::marker::Sized" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemPreKeyStore::get_pre_key" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemPreKeyStore::get_pre_key" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemPreKeyStore::get_pre_key" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemPreKeyStore::get_pre_key" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemPreKeyStore::get_pre_key" -> "libsignal_protocol::state::prekey::PreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemPreKeyStore::get_pre_key" -> "libsignal_protocol::state::prekey::PreKeyRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemPreKeyStore::get_pre_key" -> "libsignal_protocol::storage::inmem::InMemPreKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemPreKeyStore::get_pre_key" -> "std::collections::hash::map::HashMap" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemPreKeyStore::get_pre_key" -> "std::hash::random::RandomState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemPreKeyStore::new" -> "libsignal_protocol::state::prekey::PreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemPreKeyStore::new" -> "libsignal_protocol::state::prekey::PreKeyRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemPreKeyStore::new" -> "libsignal_protocol::storage::inmem::InMemPreKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemPreKeyStore::new" -> "std::collections::hash::map::HashMap" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemPreKeyStore::new" -> "std::hash::random::RandomState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemPreKeyStore::remove_pre_key" -> "core::future::future::Future" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemPreKeyStore::remove_pre_key" -> "core::marker::Sized" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemPreKeyStore::remove_pre_key" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemPreKeyStore::remove_pre_key" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemPreKeyStore::remove_pre_key" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemPreKeyStore::remove_pre_key" -> "libsignal_protocol::state::prekey::PreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemPreKeyStore::remove_pre_key" -> "libsignal_protocol::state::prekey::PreKeyRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemPreKeyStore::remove_pre_key" -> "libsignal_protocol::storage::inmem::InMemPreKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemPreKeyStore::remove_pre_key" -> "std::collections::hash::map::HashMap" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemPreKeyStore::remove_pre_key" -> "std::hash::random::RandomState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemPreKeyStore::save_pre_key" -> "core::future::future::Future" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemPreKeyStore::save_pre_key" -> "core::marker::Sized" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemPreKeyStore::save_pre_key" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemPreKeyStore::save_pre_key" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemPreKeyStore::save_pre_key" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemPreKeyStore::save_pre_key" -> "libsignal_protocol::state::prekey::PreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemPreKeyStore::save_pre_key" -> "libsignal_protocol::state::prekey::PreKeyRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemPreKeyStore::save_pre_key" -> "libsignal_protocol::storage::inmem::InMemPreKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemPreKeyStore::save_pre_key" -> "std::collections::hash::map::HashMap" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemPreKeyStore::save_pre_key" -> "std::hash::random::RandomState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSenderKeyStore" -> "alloc::borrow::Cow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSenderKeyStore" -> "libsignal_core::address::ProtocolAddress" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSenderKeyStore" -> "libsignal_protocol::sender_keys::SenderKeyRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSenderKeyStore" -> "libsignal_protocol::storage::inmem::InMemSenderKeyStore::clone" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::storage::inmem::InMemSenderKeyStore" -> "libsignal_protocol::storage::inmem::InMemSenderKeyStore::default" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::storage::inmem::InMemSenderKeyStore" -> "libsignal_protocol::storage::inmem::InMemSenderKeyStore::load_sender_key" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::storage::inmem::InMemSenderKeyStore" -> "libsignal_protocol::storage::inmem::InMemSenderKeyStore::new" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::storage::inmem::InMemSenderKeyStore" -> "libsignal_protocol::storage::inmem::InMemSenderKeyStore::store_sender_key" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::storage::inmem::InMemSenderKeyStore" -> "std::collections::hash::map::HashMap" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSenderKeyStore" -> "std::hash::random::RandomState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSenderKeyStore" -> "uuid::Uuid" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSenderKeyStore::clone" -> "alloc::borrow::Cow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSenderKeyStore::clone" -> "libsignal_core::address::ProtocolAddress" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSenderKeyStore::clone" -> "libsignal_protocol::sender_keys::SenderKeyRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSenderKeyStore::clone" -> "libsignal_protocol::storage::inmem::InMemSenderKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSenderKeyStore::clone" -> "std::collections::hash::map::HashMap" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSenderKeyStore::clone" -> "std::hash::random::RandomState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSenderKeyStore::clone" -> "uuid::Uuid" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSenderKeyStore::default" -> "libsignal_protocol::storage::inmem::InMemSenderKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSenderKeyStore::load_sender_key" -> "alloc::borrow::Cow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSenderKeyStore::load_sender_key" -> "core::future::future::Future" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSenderKeyStore::load_sender_key" -> "core::marker::Sized" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSenderKeyStore::load_sender_key" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSenderKeyStore::load_sender_key" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSenderKeyStore::load_sender_key" -> "libsignal_core::address::ProtocolAddress" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSenderKeyStore::load_sender_key" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSenderKeyStore::load_sender_key" -> "libsignal_protocol::sender_keys::SenderKeyRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSenderKeyStore::load_sender_key" -> "libsignal_protocol::storage::inmem::InMemSenderKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSenderKeyStore::load_sender_key" -> "std::collections::hash::map::HashMap" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSenderKeyStore::load_sender_key" -> "std::hash::random::RandomState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSenderKeyStore::load_sender_key" -> "uuid::Uuid" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSenderKeyStore::new" -> "alloc::borrow::Cow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSenderKeyStore::new" -> "libsignal_core::address::ProtocolAddress" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSenderKeyStore::new" -> "libsignal_protocol::sender_keys::SenderKeyRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSenderKeyStore::new" -> "libsignal_protocol::storage::inmem::InMemSenderKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSenderKeyStore::new" -> "std::collections::hash::map::HashMap" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSenderKeyStore::new" -> "std::hash::random::RandomState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSenderKeyStore::new" -> "uuid::Uuid" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSenderKeyStore::store_sender_key" -> "alloc::borrow::Cow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSenderKeyStore::store_sender_key" -> "core::future::future::Future" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSenderKeyStore::store_sender_key" -> "core::marker::Sized" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSenderKeyStore::store_sender_key" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSenderKeyStore::store_sender_key" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSenderKeyStore::store_sender_key" -> "libsignal_core::address::ProtocolAddress" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSenderKeyStore::store_sender_key" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSenderKeyStore::store_sender_key" -> "libsignal_protocol::sender_keys::SenderKeyRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSenderKeyStore::store_sender_key" -> "libsignal_protocol::storage::inmem::InMemSenderKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSenderKeyStore::store_sender_key" -> "std::collections::hash::map::HashMap" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSenderKeyStore::store_sender_key" -> "std::hash::random::RandomState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSenderKeyStore::store_sender_key" -> "uuid::Uuid" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSessionStore" -> "libsignal_core::address::ProtocolAddress" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSessionStore" -> "libsignal_protocol::state::session::SessionRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSessionStore" -> "libsignal_protocol::storage::inmem::InMemSessionStore::clone" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::storage::inmem::InMemSessionStore" -> "libsignal_protocol::storage::inmem::InMemSessionStore::default" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::storage::inmem::InMemSessionStore" -> "libsignal_protocol::storage::inmem::InMemSessionStore::load_existing_sessions" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::storage::inmem::InMemSessionStore" -> "libsignal_protocol::storage::inmem::InMemSessionStore::load_session" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::storage::inmem::InMemSessionStore" -> "libsignal_protocol::storage::inmem::InMemSessionStore::new" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::storage::inmem::InMemSessionStore" -> "libsignal_protocol::storage::inmem::InMemSessionStore::store_session" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::storage::inmem::InMemSessionStore" -> "std::collections::hash::map::HashMap" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSessionStore" -> "std::hash::random::RandomState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSessionStore::clone" -> "libsignal_core::address::ProtocolAddress" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSessionStore::clone" -> "libsignal_protocol::state::session::SessionRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSessionStore::clone" -> "libsignal_protocol::storage::inmem::InMemSessionStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSessionStore::clone" -> "std::collections::hash::map::HashMap" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSessionStore::clone" -> "std::hash::random::RandomState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSessionStore::default" -> "libsignal_protocol::storage::inmem::InMemSessionStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSessionStore::load_existing_sessions" -> "alloc::alloc::Global" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSessionStore::load_existing_sessions" -> "alloc::vec::Vec" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSessionStore::load_existing_sessions" -> "core::iter::adapters::map::Map" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSessionStore::load_existing_sessions" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSessionStore::load_existing_sessions" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSessionStore::load_existing_sessions" -> "core::slice::iter::Iter" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSessionStore::load_existing_sessions" -> "libsignal_core::address::ProtocolAddress" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSessionStore::load_existing_sessions" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSessionStore::load_existing_sessions" -> "libsignal_protocol::state::session::SessionRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSessionStore::load_existing_sessions" -> "libsignal_protocol::storage::inmem::InMemSessionStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSessionStore::load_existing_sessions" -> "std::collections::hash::map::HashMap" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSessionStore::load_existing_sessions" -> "std::hash::random::RandomState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSessionStore::load_session" -> "core::future::future::Future" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSessionStore::load_session" -> "core::marker::Sized" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSessionStore::load_session" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSessionStore::load_session" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSessionStore::load_session" -> "libsignal_core::address::ProtocolAddress" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSessionStore::load_session" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSessionStore::load_session" -> "libsignal_protocol::state::session::SessionRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSessionStore::load_session" -> "libsignal_protocol::storage::inmem::InMemSessionStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSessionStore::load_session" -> "std::collections::hash::map::HashMap" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSessionStore::load_session" -> "std::hash::random::RandomState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSessionStore::new" -> "libsignal_core::address::ProtocolAddress" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSessionStore::new" -> "libsignal_protocol::state::session::SessionRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSessionStore::new" -> "libsignal_protocol::storage::inmem::InMemSessionStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSessionStore::new" -> "std::collections::hash::map::HashMap" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSessionStore::new" -> "std::hash::random::RandomState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSessionStore::store_session" -> "core::future::future::Future" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSessionStore::store_session" -> "core::marker::Sized" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSessionStore::store_session" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSessionStore::store_session" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSessionStore::store_session" -> "libsignal_core::address::ProtocolAddress" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSessionStore::store_session" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSessionStore::store_session" -> "libsignal_protocol::state::session::SessionRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSessionStore::store_session" -> "libsignal_protocol::storage::inmem::InMemSessionStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSessionStore::store_session" -> "std::collections::hash::map::HashMap" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSessionStore::store_session" -> "std::hash::random::RandomState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore" -> "libsignal_protocol::storage::inmem::InMemIdentityKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore" -> "libsignal_protocol::storage::inmem::InMemKyberPreKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore" -> "libsignal_protocol::storage::inmem::InMemPreKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore" -> "libsignal_protocol::storage::inmem::InMemSenderKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore" -> "libsignal_protocol::storage::inmem::InMemSessionStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore" -> "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::all_kyber_pre_key_ids" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore" -> "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::all_pre_key_ids" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore" -> "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::all_signed_pre_key_ids" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore" -> "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::clone" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore" -> "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::get_identity" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore" -> "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::get_identity_key_pair" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore" -> "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::get_kyber_pre_key" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore" -> "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::get_local_registration_id" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore" -> "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::get_pre_key" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore" -> "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::get_signed_pre_key" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore" -> "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::is_trusted_identity" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore" -> "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::load_sender_key" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore" -> "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::load_session" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore" -> "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::mark_kyber_pre_key_used" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore" -> "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::new" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore" -> "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::remove_pre_key" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore" -> "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::save_identity" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore" -> "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::save_kyber_pre_key" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore" -> "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::save_pre_key" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore" -> "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::save_signed_pre_key" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore" -> "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::store_sender_key" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore" -> "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::store_session" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore" -> "libsignal_protocol::storage::inmem::InMemSignedPreKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::all_kyber_pre_key_ids" -> "core::iter::traits::iterator::Iterator" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::all_kyber_pre_key_ids" -> "core::marker::Sized" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::all_kyber_pre_key_ids" -> "libsignal_protocol::storage::inmem::InMemKyberPreKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::all_kyber_pre_key_ids" -> "libsignal_protocol::storage::inmem::InMemSignalProtocolStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::all_pre_key_ids" -> "core::iter::traits::iterator::Iterator" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::all_pre_key_ids" -> "core::marker::Sized" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::all_pre_key_ids" -> "libsignal_protocol::storage::inmem::InMemPreKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::all_pre_key_ids" -> "libsignal_protocol::storage::inmem::InMemSignalProtocolStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::all_signed_pre_key_ids" -> "core::iter::traits::iterator::Iterator" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::all_signed_pre_key_ids" -> "core::marker::Sized" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::all_signed_pre_key_ids" -> "libsignal_protocol::storage::inmem::InMemSignalProtocolStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::all_signed_pre_key_ids" -> "libsignal_protocol::storage::inmem::InMemSignedPreKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::clone" -> "libsignal_protocol::storage::inmem::InMemIdentityKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::clone" -> "libsignal_protocol::storage::inmem::InMemKyberPreKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::clone" -> "libsignal_protocol::storage::inmem::InMemPreKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::clone" -> "libsignal_protocol::storage::inmem::InMemSenderKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::clone" -> "libsignal_protocol::storage::inmem::InMemSessionStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::clone" -> "libsignal_protocol::storage::inmem::InMemSignalProtocolStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::clone" -> "libsignal_protocol::storage::inmem::InMemSignedPreKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::get_identity" -> "core::future::future::Future" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::get_identity" -> "core::marker::Sized" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::get_identity" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::get_identity" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::get_identity" -> "libsignal_core::address::ProtocolAddress" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::get_identity" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::get_identity" -> "libsignal_protocol::identity_key::IdentityKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::get_identity" -> "libsignal_protocol::storage::inmem::InMemIdentityKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::get_identity" -> "libsignal_protocol::storage::inmem::InMemSignalProtocolStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::get_identity_key_pair" -> "core::future::future::Future" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::get_identity_key_pair" -> "core::marker::Sized" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::get_identity_key_pair" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::get_identity_key_pair" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::get_identity_key_pair" -> "libsignal_protocol::identity_key::IdentityKeyPair" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::get_identity_key_pair" -> "libsignal_protocol::storage::inmem::InMemIdentityKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::get_identity_key_pair" -> "libsignal_protocol::storage::inmem::InMemSignalProtocolStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::get_kyber_pre_key" -> "core::future::future::Future" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::get_kyber_pre_key" -> "core::marker::Sized" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::get_kyber_pre_key" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::get_kyber_pre_key" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::get_kyber_pre_key" -> "libsignal_protocol::state::kyber_prekey::KyberPreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::get_kyber_pre_key" -> "libsignal_protocol::state::kyber_prekey::KyberPreKeyRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::get_kyber_pre_key" -> "libsignal_protocol::storage::inmem::InMemKyberPreKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::get_kyber_pre_key" -> "libsignal_protocol::storage::inmem::InMemSignalProtocolStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::get_local_registration_id" -> "core::future::future::Future" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::get_local_registration_id" -> "core::marker::Sized" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::get_local_registration_id" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::get_local_registration_id" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::get_local_registration_id" -> "libsignal_protocol::storage::inmem::InMemIdentityKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::get_local_registration_id" -> "libsignal_protocol::storage::inmem::InMemSignalProtocolStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::get_local_registration_id" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::get_pre_key" -> "core::future::future::Future" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::get_pre_key" -> "core::marker::Sized" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::get_pre_key" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::get_pre_key" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::get_pre_key" -> "libsignal_protocol::state::prekey::PreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::get_pre_key" -> "libsignal_protocol::state::prekey::PreKeyRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::get_pre_key" -> "libsignal_protocol::storage::inmem::InMemPreKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::get_pre_key" -> "libsignal_protocol::storage::inmem::InMemSignalProtocolStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::get_signed_pre_key" -> "core::future::future::Future" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::get_signed_pre_key" -> "core::marker::Sized" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::get_signed_pre_key" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::get_signed_pre_key" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::get_signed_pre_key" -> "libsignal_protocol::state::signed_prekey::SignedPreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::get_signed_pre_key" -> "libsignal_protocol::state::signed_prekey::SignedPreKeyRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::get_signed_pre_key" -> "libsignal_protocol::storage::inmem::InMemSignalProtocolStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::get_signed_pre_key" -> "libsignal_protocol::storage::inmem::InMemSignedPreKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::is_trusted_identity" -> "bool" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::is_trusted_identity" -> "core::future::future::Future" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::is_trusted_identity" -> "core::marker::Sized" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::is_trusted_identity" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::is_trusted_identity" -> "libsignal_core::address::ProtocolAddress" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::is_trusted_identity" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::is_trusted_identity" -> "libsignal_protocol::identity_key::IdentityKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::is_trusted_identity" -> "libsignal_protocol::storage::inmem::InMemIdentityKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::is_trusted_identity" -> "libsignal_protocol::storage::inmem::InMemSignalProtocolStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::is_trusted_identity" -> "libsignal_protocol::storage::traits::Direction" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::load_sender_key" -> "core::future::future::Future" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::load_sender_key" -> "core::marker::Sized" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::load_sender_key" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::load_sender_key" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::load_sender_key" -> "libsignal_core::address::ProtocolAddress" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::load_sender_key" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::load_sender_key" -> "libsignal_protocol::sender_keys::SenderKeyRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::load_sender_key" -> "libsignal_protocol::storage::inmem::InMemSenderKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::load_sender_key" -> "libsignal_protocol::storage::inmem::InMemSignalProtocolStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::load_sender_key" -> "uuid::Uuid" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::load_session" -> "core::future::future::Future" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::load_session" -> "core::marker::Sized" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::load_session" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::load_session" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::load_session" -> "libsignal_core::address::ProtocolAddress" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::load_session" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::load_session" -> "libsignal_protocol::state::session::SessionRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::load_session" -> "libsignal_protocol::storage::inmem::InMemSessionStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::load_session" -> "libsignal_protocol::storage::inmem::InMemSignalProtocolStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::mark_kyber_pre_key_used" -> "core::future::future::Future" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::mark_kyber_pre_key_used" -> "core::marker::Sized" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::mark_kyber_pre_key_used" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::mark_kyber_pre_key_used" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::mark_kyber_pre_key_used" -> "libsignal_protocol::state::kyber_prekey::KyberPreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::mark_kyber_pre_key_used" -> "libsignal_protocol::storage::inmem::InMemKyberPreKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::mark_kyber_pre_key_used" -> "libsignal_protocol::storage::inmem::InMemSignalProtocolStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::new" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::new" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::new" -> "libsignal_protocol::identity_key::IdentityKeyPair" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::new" -> "libsignal_protocol::storage::inmem::InMemIdentityKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::new" -> "libsignal_protocol::storage::inmem::InMemKyberPreKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::new" -> "libsignal_protocol::storage::inmem::InMemPreKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::new" -> "libsignal_protocol::storage::inmem::InMemSenderKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::new" -> "libsignal_protocol::storage::inmem::InMemSessionStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::new" -> "libsignal_protocol::storage::inmem::InMemSignalProtocolStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::new" -> "libsignal_protocol::storage::inmem::InMemSignedPreKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::new" -> "u32" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::remove_pre_key" -> "core::future::future::Future" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::remove_pre_key" -> "core::marker::Sized" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::remove_pre_key" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::remove_pre_key" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::remove_pre_key" -> "libsignal_protocol::state::prekey::PreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::remove_pre_key" -> "libsignal_protocol::storage::inmem::InMemPreKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::remove_pre_key" -> "libsignal_protocol::storage::inmem::InMemSignalProtocolStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::save_identity" -> "bool" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::save_identity" -> "core::future::future::Future" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::save_identity" -> "core::marker::Sized" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::save_identity" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::save_identity" -> "libsignal_core::address::ProtocolAddress" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::save_identity" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::save_identity" -> "libsignal_protocol::identity_key::IdentityKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::save_identity" -> "libsignal_protocol::storage::inmem::InMemIdentityKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::save_identity" -> "libsignal_protocol::storage::inmem::InMemSignalProtocolStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::save_kyber_pre_key" -> "core::future::future::Future" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::save_kyber_pre_key" -> "core::marker::Sized" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::save_kyber_pre_key" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::save_kyber_pre_key" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::save_kyber_pre_key" -> "libsignal_protocol::state::kyber_prekey::KyberPreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::save_kyber_pre_key" -> "libsignal_protocol::state::kyber_prekey::KyberPreKeyRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::save_kyber_pre_key" -> "libsignal_protocol::storage::inmem::InMemKyberPreKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::save_kyber_pre_key" -> "libsignal_protocol::storage::inmem::InMemSignalProtocolStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::save_pre_key" -> "core::future::future::Future" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::save_pre_key" -> "core::marker::Sized" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::save_pre_key" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::save_pre_key" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::save_pre_key" -> "libsignal_protocol::state::prekey::PreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::save_pre_key" -> "libsignal_protocol::state::prekey::PreKeyRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::save_pre_key" -> "libsignal_protocol::storage::inmem::InMemPreKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::save_pre_key" -> "libsignal_protocol::storage::inmem::InMemSignalProtocolStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::save_signed_pre_key" -> "core::future::future::Future" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::save_signed_pre_key" -> "core::marker::Sized" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::save_signed_pre_key" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::save_signed_pre_key" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::save_signed_pre_key" -> "libsignal_protocol::state::signed_prekey::SignedPreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::save_signed_pre_key" -> "libsignal_protocol::state::signed_prekey::SignedPreKeyRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::save_signed_pre_key" -> "libsignal_protocol::storage::inmem::InMemSignalProtocolStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::save_signed_pre_key" -> "libsignal_protocol::storage::inmem::InMemSignedPreKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::store_sender_key" -> "core::future::future::Future" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::store_sender_key" -> "core::marker::Sized" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::store_sender_key" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::store_sender_key" -> "libsignal_core::address::ProtocolAddress" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::store_sender_key" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::store_sender_key" -> "libsignal_protocol::sender_keys::SenderKeyRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::store_sender_key" -> "libsignal_protocol::storage::inmem::InMemSenderKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::store_sender_key" -> "libsignal_protocol::storage::inmem::InMemSignalProtocolStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::store_sender_key" -> "uuid::Uuid" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::store_session" -> "core::future::future::Future" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::store_session" -> "core::marker::Sized" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::store_session" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::store_session" -> "libsignal_core::address::ProtocolAddress" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::store_session" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::store_session" -> "libsignal_protocol::state::session::SessionRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::store_session" -> "libsignal_protocol::storage::inmem::InMemSessionStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignalProtocolStore::store_session" -> "libsignal_protocol::storage::inmem::InMemSignalProtocolStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignedPreKeyStore" -> "libsignal_protocol::state::signed_prekey::SignedPreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignedPreKeyStore" -> "libsignal_protocol::state::signed_prekey::SignedPreKeyRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignedPreKeyStore" -> "libsignal_protocol::storage::inmem::InMemSignedPreKeyStore::all_signed_pre_key_ids" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::storage::inmem::InMemSignedPreKeyStore" -> "libsignal_protocol::storage::inmem::InMemSignedPreKeyStore::clone" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::storage::inmem::InMemSignedPreKeyStore" -> "libsignal_protocol::storage::inmem::InMemSignedPreKeyStore::default" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::storage::inmem::InMemSignedPreKeyStore" -> "libsignal_protocol::storage::inmem::InMemSignedPreKeyStore::get_signed_pre_key" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::storage::inmem::InMemSignedPreKeyStore" -> "libsignal_protocol::storage::inmem::InMemSignedPreKeyStore::new" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::storage::inmem::InMemSignedPreKeyStore" -> "libsignal_protocol::storage::inmem::InMemSignedPreKeyStore::save_signed_pre_key" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::storage::inmem::InMemSignedPreKeyStore" -> "std::collections::hash::map::HashMap" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignedPreKeyStore" -> "std::hash::random::RandomState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignedPreKeyStore::all_signed_pre_key_ids" -> "core::iter::traits::iterator::Iterator" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignedPreKeyStore::all_signed_pre_key_ids" -> "core::marker::Sized" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignedPreKeyStore::all_signed_pre_key_ids" -> "libsignal_protocol::state::signed_prekey::SignedPreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignedPreKeyStore::all_signed_pre_key_ids" -> "libsignal_protocol::state::signed_prekey::SignedPreKeyRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignedPreKeyStore::all_signed_pre_key_ids" -> "libsignal_protocol::storage::inmem::InMemSignedPreKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignedPreKeyStore::all_signed_pre_key_ids" -> "std::collections::hash::map::HashMap" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignedPreKeyStore::all_signed_pre_key_ids" -> "std::collections::hash::map::Keys" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignedPreKeyStore::all_signed_pre_key_ids" -> "std::hash::random::RandomState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignedPreKeyStore::clone" -> "libsignal_protocol::state::signed_prekey::SignedPreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignedPreKeyStore::clone" -> "libsignal_protocol::state::signed_prekey::SignedPreKeyRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignedPreKeyStore::clone" -> "libsignal_protocol::storage::inmem::InMemSignedPreKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignedPreKeyStore::clone" -> "std::collections::hash::map::HashMap" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignedPreKeyStore::clone" -> "std::hash::random::RandomState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignedPreKeyStore::default" -> "libsignal_protocol::storage::inmem::InMemSignedPreKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignedPreKeyStore::get_signed_pre_key" -> "core::convert::Infallible" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignedPreKeyStore::get_signed_pre_key" -> "core::future::future::Future" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignedPreKeyStore::get_signed_pre_key" -> "core::marker::Sized" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignedPreKeyStore::get_signed_pre_key" -> "core::ops::control_flow::ControlFlow" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignedPreKeyStore::get_signed_pre_key" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignedPreKeyStore::get_signed_pre_key" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignedPreKeyStore::get_signed_pre_key" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignedPreKeyStore::get_signed_pre_key" -> "libsignal_protocol::state::signed_prekey::SignedPreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignedPreKeyStore::get_signed_pre_key" -> "libsignal_protocol::state::signed_prekey::SignedPreKeyRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignedPreKeyStore::get_signed_pre_key" -> "libsignal_protocol::storage::inmem::InMemSignedPreKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignedPreKeyStore::get_signed_pre_key" -> "std::collections::hash::map::HashMap" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignedPreKeyStore::get_signed_pre_key" -> "std::hash::random::RandomState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignedPreKeyStore::new" -> "libsignal_protocol::state::signed_prekey::SignedPreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignedPreKeyStore::new" -> "libsignal_protocol::state::signed_prekey::SignedPreKeyRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignedPreKeyStore::new" -> "libsignal_protocol::storage::inmem::InMemSignedPreKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignedPreKeyStore::new" -> "std::collections::hash::map::HashMap" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignedPreKeyStore::new" -> "std::hash::random::RandomState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignedPreKeyStore::save_signed_pre_key" -> "core::future::future::Future" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignedPreKeyStore::save_signed_pre_key" -> "core::marker::Sized" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignedPreKeyStore::save_signed_pre_key" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignedPreKeyStore::save_signed_pre_key" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignedPreKeyStore::save_signed_pre_key" -> "libsignal_protocol::error::SignalProtocolError" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignedPreKeyStore::save_signed_pre_key" -> "libsignal_protocol::state::signed_prekey::SignedPreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignedPreKeyStore::save_signed_pre_key" -> "libsignal_protocol::state::signed_prekey::SignedPreKeyRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignedPreKeyStore::save_signed_pre_key" -> "libsignal_protocol::storage::inmem::InMemSignedPreKeyStore" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignedPreKeyStore::save_signed_pre_key" -> "std::collections::hash::map::HashMap" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::inmem::InMemSignedPreKeyStore::save_signed_pre_key" -> "std::hash::random::RandomState" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::traits" -> "libsignal_core::address::ProtocolAddress" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::traits" -> "libsignal_protocol::error::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::traits" -> "libsignal_protocol::identity_key::IdentityKey" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::traits" -> "libsignal_protocol::identity_key::IdentityKeyPair" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::traits" -> "libsignal_protocol::sender_keys::SenderKeyRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::traits" -> "libsignal_protocol::state::kyber_prekey::KyberPreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::traits" -> "libsignal_protocol::state::kyber_prekey::KyberPreKeyRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::traits" -> "libsignal_protocol::state::prekey::PreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::traits" -> "libsignal_protocol::state::prekey::PreKeyRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::traits" -> "libsignal_protocol::state::session::SessionRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::traits" -> "libsignal_protocol::state::signed_prekey::SignedPreKeyId" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::traits" -> "libsignal_protocol::state::signed_prekey::SignedPreKeyRecord" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::traits" -> "libsignal_protocol::storage::traits::Direction" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::storage::traits" -> "libsignal_protocol::storage::traits::IdentityKeyStore" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::storage::traits" -> "libsignal_protocol::storage::traits::KyberPreKeyStore" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::storage::traits" -> "libsignal_protocol::storage::traits::PreKeyStore" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::storage::traits" -> "libsignal_protocol::storage::traits::ProtocolStore" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::storage::traits" -> "libsignal_protocol::storage::traits::SenderKeyStore" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::storage::traits" -> "libsignal_protocol::storage::traits::SessionStore" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::storage::traits" -> "libsignal_protocol::storage::traits::SignedPreKeyStore" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::storage::traits" -> "uuid::Uuid" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::traits::Direction" -> "libsignal_protocol::storage::traits::Direction::clone" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::storage::traits::Direction" -> "libsignal_protocol::storage::traits::Direction::eq" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::storage::traits::Direction" -> "libsignal_protocol::storage::traits::Direction::fmt" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::storage::traits::Direction::clone" -> "libsignal_protocol::storage::traits::Direction" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::traits::Direction::eq" -> "bool" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::traits::Direction::eq" -> "libsignal_protocol::storage::traits::Direction" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::traits::Direction::fmt" -> "core::fmt::Error" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::traits::Direction::fmt" -> "core::fmt::Formatter" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::traits::Direction::fmt" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::traits::Direction::fmt" -> "libsignal_protocol::storage::traits::Direction" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::storage::traits::Direction::fmt" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::time::SystemTime::from" -> "core::time::Duration" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::time::SystemTime::from" -> "libsignal_protocol::timestamp::Timestamp" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::time::SystemTime::from" -> "std::time::SystemTime" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::time::SystemTime::from" -> "u64" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::timestamp" -> "libsignal_protocol::timestamp::Timestamp" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::timestamp" -> "serde::de::Deserialize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::timestamp" -> "serde::ser::Serialize" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::timestamp::Timestamp" -> "libsignal_protocol::timestamp::Timestamp::add_millis" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::timestamp::Timestamp" -> "libsignal_protocol::timestamp::Timestamp::clone" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::timestamp::Timestamp" -> "libsignal_protocol::timestamp::Timestamp::cmp" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::timestamp::Timestamp" -> "libsignal_protocol::timestamp::Timestamp::epoch_millis" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::timestamp::Timestamp" -> "libsignal_protocol::timestamp::Timestamp::eq" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::timestamp::Timestamp" -> "libsignal_protocol::timestamp::Timestamp::fmt" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::timestamp::Timestamp" -> "libsignal_protocol::timestamp::Timestamp::from_epoch_millis" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::timestamp::Timestamp" -> "libsignal_protocol::timestamp::Timestamp::hash" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::timestamp::Timestamp" -> "libsignal_protocol::timestamp::Timestamp::partial_cmp" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::timestamp::Timestamp" -> "libsignal_protocol::timestamp::Timestamp::sub_millis" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "libsignal_protocol::timestamp::Timestamp::add_millis" -> "libsignal_protocol::timestamp::Timestamp" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::timestamp::Timestamp::add_millis" -> "u64" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::timestamp::Timestamp::clone" -> "libsignal_protocol::timestamp::Timestamp" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::timestamp::Timestamp::clone" -> "u64" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::timestamp::Timestamp::cmp" -> "core::cmp::Ordering" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::timestamp::Timestamp::cmp" -> "libsignal_protocol::timestamp::Timestamp" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::timestamp::Timestamp::cmp" -> "u64" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::timestamp::Timestamp::epoch_millis" -> "libsignal_protocol::timestamp::Timestamp" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::timestamp::Timestamp::epoch_millis" -> "u64" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::timestamp::Timestamp::eq" -> "bool" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::timestamp::Timestamp::eq" -> "libsignal_protocol::timestamp::Timestamp" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::timestamp::Timestamp::eq" -> "u64" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::timestamp::Timestamp::fmt" -> "core::fmt::Error" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::timestamp::Timestamp::fmt" -> "core::fmt::Formatter" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::timestamp::Timestamp::fmt" -> "core::fmt::builders::DebugTuple" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::timestamp::Timestamp::fmt" -> "core::result::Result" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::timestamp::Timestamp::fmt" -> "libsignal_protocol::timestamp::Timestamp" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::timestamp::Timestamp::fmt" -> "str" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::timestamp::Timestamp::fmt" -> "u64" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::timestamp::Timestamp::from_epoch_millis" -> "libsignal_protocol::timestamp::Timestamp" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::timestamp::Timestamp::from_epoch_millis" -> "u64" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::timestamp::Timestamp::hash" -> "libsignal_protocol::timestamp::Timestamp" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::timestamp::Timestamp::hash" -> "u64" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::timestamp::Timestamp::partial_cmp" -> "core::cmp::Ordering" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::timestamp::Timestamp::partial_cmp" -> "core::option::Option" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::timestamp::Timestamp::partial_cmp" -> "libsignal_protocol::timestamp::Timestamp" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::timestamp::Timestamp::partial_cmp" -> "u64" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::timestamp::Timestamp::partial_cmp" -> "u8" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::timestamp::Timestamp::sub_millis" -> "libsignal_protocol::timestamp::Timestamp" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "libsignal_protocol::timestamp::Timestamp::sub_millis" -> "u64" [label="uses", color="#7f7f7f", style="dashed"] [constraint=false]; // "uses" edge
    "std::time::SystemTime" -> "libsignal_protocol::time::SystemTime::from" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge
    "u32" -> "libsignal_protocol" [label="owns", color="#000000", style="solid"] [constraint=true]; // "owns" edge

}
